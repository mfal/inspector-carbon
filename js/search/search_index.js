var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.2","fields":["title","body"],"fieldVectors":[["title/interfaces/MetricEntry.html",[0,1,1,1.281]],["body/interfaces/MetricEntry.html",[0,0.872,1,1.214,2,0.514,3,0.529,4,0.231,5,0.231,6,0.514,7,0.92,8,0.92,9,2.112,10,2.368,11,2.387,12,1.592,13,1.935,14,0.231,15,0.92,16,1.749,17,2.258,18,3.399,19,1.429,20,0.101,21,2.639,22,1.521,23,0.684,24,2.17,25,0.514,26,0.609,27,0.874,28,0.874,29,0.179,30,2.399,31,0.382,32,2.501,33,2.217,34,1.935,35,1.935,36,2.602,37,1.935,38,1.301,39,1.249,40,1.521,41,0.92,42,1.749,43,1.249,44,1.749,45,2.064,46,1.749,47,0.295,48,0.382,49,1.249,50,0.929,51,3.569,52,0.529,53,2.063,54,0.92,55,1.446,56,3.778,57,2.501,58,0.874,59,1.521,60,0.514,61,0.514,62,3.504,63,1.249,64,1.301,65,0.92,66,2.501,67,0.92,68,0.92,69,0.382,70,0.92,71,1.249,72,1.117,73,2.217,74,0.92,75,0.514,76,0.514,77,0.514,78,1.249,79,0.514,80,0.382,81,0.514,82,0.92,83,0.514,84,0.682,85,0.382,86,3.589,87,0.514,88,0.514,89,0.514,90,0.514,91,0.514,92,0.514,93,0.514,94,0.514,95,0.514,96,2.112,97,0.514,98,0.514,99,0.382,100,0.514,101,0.514,102,0.514,103,0.514,104,1.249,105,0.514,106,0.92,107,0.514,108,0.92,109,0.718,110,0.514,111,0.684,112,0.514,113,1.944,114,0.514,115,0.92,116,0.514,117,0.514,118,0.514,119,0.231,120,0.514,121,0.92,122,0.514,123,0.92,124,0.514,125,0.514,126,0.92,127,0.514,128,0.514,129,0.929,130,1.249,131,0.514,132,0.92,133,0.514,134,0.514,135,0.514,136,0.92,137,0.382,138,0.514,139,2.112,140,3.895,141,0.514,142,0.514,143,0.514,144,1.944,145,0.514,146,0.514,147,0.514,148,0.514,149,1.249,150,0.514,151,0.514,152,1.249,153,0.514,154,0.514,155,1.249,156,0.514,157,0.514,158,1.249,159,0.514,160,0.92,161,0.514,162,1.249,163,0.92,164,0.514,165,0.92,166,0.514,167,0.514,168,0.514,169,1.249,170,0.514,171,2.258,172,1.249,173,0.514,174,0.514,175,3.038,176,0.514,177,0.514,178,0.514,179,0.514,180,0.514,181,0.514,182,0.92,183,2.112,184,0.514,185,0.514,186,0.514,187,0.514,188,0.92,189,0.514,190,2.387,191,0.514,192,0.514,193,0.514,194,0.514,195,0.514,196,1.521,197,0.514,198,0.514,199,0.514,200,0.92,201,0.514,202,0.514,203,0.514,204,2.112,205,1.944,206,1.944,207,0.514,208,0.514,209,1.944,210,0.92,211,1.446,212,0.92,213,1.749,214,0.514,215,0.514,216,0.514,217,0.514,218,0.514,219,0.514,220,0.92,221,0.514,222,0.514,223,0.514,224,0.92,225,0.92,226,0.92,227,0.92,228,0.92,229,0.92,230,0.92,231,0.92,232,0.92,233,0.92,234,0.92,235,0.92,236,0.92,237,0.92,238,0.92,239,0.92,240,0.92,241,0.92,242,0.92,243,0.92,244,0.514,245,0.514,246,0.514,247,0.92,248,0.514,249,0.92,250,0.514,251,0.92,252,0.514,253,0.92,254,0.514,255,0.514,256,0.514,257,0.514,258,0.514,259,0.514,260,0.514,261,0.514,262,0.514,263,0.021,264,0.021]],["title/coverage.html",[265,1.698]],["body/coverage.html",[0,1.354,1,1.735,4,1.354,5,1.709,19,1.354,20,0.094,26,1.05,52,1.735,53,1.735,84,1.354,263,0.083,264,0.083,265,1.735,266,2.245,267,3.018,268,2.245,269,3.809,270,3.018,271,3.018,272,1.735,273,3.018,274,2.245,275,2.245]],["title/dependencies.html",[276,1.906,277,1.975]],["body/dependencies.html",[3,1.816,12,1.417,20,0.095,24,2.349,26,1.099,47,1.816,263,0.086,264,0.086,277,2.349,278,3.159,279,3.159,280,3.159,281,3.159]],["title/index.html",[14,0.855,109,1.095,119,0.855]],["body/index.html",[3,1.265,12,1.687,13,2.179,19,0.987,20,0.098,21,2.855,23,2.612,26,1.146,27,2.207,28,1.265,29,0.766,30,2.45,38,2.612,47,2.207,53,2.019,55,1.636,58,2.019,73,2.179,80,1.636,84,1.641,85,1.636,111,1.636,119,0.987,129,2.179,137,2.179,211,1.636,263,0.068,264,0.068,282,2.93,283,2.201,284,2.201,285,2.93,286,2.201,287,2.201,288,2.201,289,3.294,290,2.93,291,2.201,292,2.201,293,2.93,294,2.93,295,2.201,296,2.201,297,2.93,298,2.93,299,2.201,300,2.201,301,2.201,302,3.294,303,2.201,304,2.93,305,2.201,306,2.93,307,2.201,308,2.201,309,2.201,310,2.201,311,2.201,312,2.201,313,2.201,314,2.201,315,2.201,316,2.201,317,2.201,318,2.201,319,1.265,320,1.636]],["title/license.html",[109,1.095,119,0.855,319,1.095]],["body/license.html",[4,1.125,20,0.075,58,1.834,69,2.609,263,0.075,264,0.075,266,1.865,319,1.442,320,1.865,321,3.509,322,2.508,323,2.508,324,3.191,325,2.508,326,2.508,327,2.508,328,2.508,329,3.191,330,2.508,331,3.693,332,4.047,333,2.508,334,3.191,335,3.509,336,2.508,337,3.191,338,2.508,339,2.508,340,2.508,341,2.508,342,2.508,343,2.508,344,2.508,345,2.508,346,2.508,347,2.508,348,2.508,349,2.508,350,2.508,351,2.508,352,3.191,353,3.191,354,2.508,355,2.508,356,2.508,357,3.191,358,2.508,359,2.508,360,2.508,361,2.508,362,2.508,363,2.508,364,2.508,365,2.508,366,2.508,367,2.508,368,2.508,369,2.508,370,2.508,371,2.508,372,2.508,373,2.508,374,2.508,375,2.508,376,2.508,377,2.508,378,2.508,379,2.508,380,2.508]],["title/modules.html",[29,1.028]],["body/modules.html",[20,0.088,29,1.145,263,0.088,264,0.088]],["title/overview.html",[381,2.197]],["body/overview.html",[0,1.456,20,0.087,52,1.865,99,2.773,263,0.087,264,0.087,381,2.413]],["title/miscellaneous/typealiases.html",[382,0.855,383,2.657]],["body/miscellaneous/typealiases.html",[5,1.38,12,1.38,14,1.38,19,1.622,20,0.096,33,2.288,34,2.288,35,2.288,37,2.288,45,2.288,48,2.288,50,2.855,263,0.084,264,0.084,382,1.38,384,3.077,385,2.288]],["title/unit-test.html",[72,1.387,386,1.794]],["body/unit-test.html",[4,1.427,20,0.086,64,2.365,72,1.828,84,1.427,263,0.086,264,0.086,265,1.828,268,2.365,274,2.365,275,2.365,386,2.365,387,3.18,388,3.18]],["title/miscellaneous/variables.html",[272,1.527,382,0.855]],["body/miscellaneous/variables.html",[5,1.398,10,2.318,14,1.398,20,0.093,26,1.384,27,1.792,28,1.792,29,1.085,31,2.318,263,0.085,264,0.085,272,1.792,382,1.398,385,2.318,389,3.117]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":190,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["0.1.2",{"_index":278,"title":{},"body":{"dependencies.html":{}}}],["0.5.9",{"_index":281,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":99,"title":{},"body":{"interfaces/MetricEntry.html":{},"overview.html":{}}}],["1.11.0",{"_index":279,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":273,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":269,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":98,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["2018",{"_index":323,"title":{},"body":{"license.html":{}}}],["3/3",{"_index":271,"title":{},"body":{"coverage.html":{}}}],["32/32",{"_index":270,"title":{},"body":{"coverage.html":{}}}],["abov",{"_index":351,"title":{},"body":{"license.html":{}}}],["action",{"_index":374,"title":{},"body":{"license.html":{}}}],["add",{"_index":294,"title":{},"body":{"index.html":{}}}],["alias",{"_index":384,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alway",{"_index":185,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["and/or",{"_index":344,"title":{},"body":{"license.html":{}}}],["any).id",{"_index":170,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["aris",{"_index":378,"title":{},"body":{"license.html":{}}}],["assign",{"_index":74,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["associ",{"_index":333,"title":{},"body":{"license.html":{}}}],["async",{"_index":133,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["author",{"_index":367,"title":{},"body":{"license.html":{}}}],["basic",{"_index":291,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":188,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["branch",{"_index":387,"title":{},"body":{"unit-test.html":{}}}],["build",{"_index":164,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["buildtags(commontag",{"_index":197,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["c",{"_index":322,"title":{},"body":{"license.html":{}}}],["carbon",{"_index":27,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["carbon/graphit",{"_index":87,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["carbonmetricreport",{"_index":53,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"index.html":{}}}],["carbonmetricreporter(\"plaintext://graphite:2003",{"_index":293,"title":{},"body":{"index.html":{}}}],["certain",{"_index":160,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["chang",{"_index":171,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["charg",{"_index":328,"title":{},"body":{"license.html":{}}}],["claim",{"_index":370,"title":{},"body":{"license.html":{}}}],["class",{"_index":52,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"overview.html":{}}}],["client",{"_index":28,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["clock",{"_index":32,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["clock=new",{"_index":91,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["collect",{"_index":159,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["common",{"_index":297,"title":{},"body":{"index.html":{}}}],["commontag",{"_index":195,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["commontags.foreach((tag",{"_index":199,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["compil",{"_index":307,"title":{},"body":{"index.html":{}}}],["compos",{"_index":305,"title":{},"body":{"index.html":{}}}],["comput",{"_index":205,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["condit",{"_index":350,"title":{},"body":{"license.html":{}}}],["connect",{"_index":380,"title":{},"body":{"license.html":{}}}],["consol",{"_index":79,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["const",{"_index":30,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["constructor",{"_index":97,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["contract",{"_index":375,"title":{},"body":{"license.html":{}}}],["copi",{"_index":331,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":321,"title":{},"body":{"license.html":{}}}],["counter",{"_index":33,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["counter.getcount",{"_index":144,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["counter.getgroup",{"_index":210,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["counter.getnam",{"_index":212,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["coverag",{"_index":265,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["creat",{"_index":85,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["current",{"_index":60,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["damag",{"_index":371,"title":{},"body":{"license.html":{}}}],["data",{"_index":129,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["date",{"_index":140,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["date(this.clock.time().millisecond",{"_index":141,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["deal",{"_index":334,"title":{},"body":{"license.html":{}}}],["default",{"_index":389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["depend",{"_index":277,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["determin",{"_index":59,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["differ",{"_index":166,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["distribut",{"_index":342,"title":{},"body":{"license.html":{}}}],["docker",{"_index":304,"title":{},"body":{"index.html":{}}}],["document",{"_index":266,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["each",{"_index":82,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["entri",{"_index":7,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["enumer",{"_index":48,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["err",{"_index":182,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["even",{"_index":94,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["event",{"_index":366,"title":{},"body":{"license.html":{}}}],["export",{"_index":49,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["express",{"_index":359,"title":{},"body":{"license.html":{}}}],["extend",{"_index":54,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["failur",{"_index":77,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["field",{"_index":206,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["fit",{"_index":362,"title":{},"body":{"license.html":{}}}],["follow",{"_index":349,"title":{},"body":{"license.html":{}}}],["free",{"_index":327,"title":{},"body":{"license.html":{}}}],["function",{"_index":64,"title":{},"body":{"interfaces/MetricEntry.html":{},"unit-test.html":{}}}],["furnish",{"_index":347,"title":{},"body":{"license.html":{}}}],["gaug",{"_index":34,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["gauge.getgroup",{"_index":216,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["gauge.getnam",{"_index":217,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["gauge.getvalu",{"_index":149,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["get",{"_index":109,"title":{"index.html":{},"license.html":{}},"body":{"interfaces/MetricEntry.html":{}}}],["getlog",{"_index":114,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["getnumber(valu",{"_index":203,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["gettag",{"_index":110,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["given",{"_index":178,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["grafana",{"_index":310,"title":{},"body":{"index.html":{}}}],["grant",{"_index":326,"title":{},"body":{"license.html":{}}}],["graph",{"_index":318,"title":{},"body":{"index.html":{}}}],["graphit",{"_index":26,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["graphite.createclient(this.host",{"_index":122,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["graphite/carbon",{"_index":288,"title":{},"body":{"index.html":{}}}],["group",{"_index":209,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["haschanged(metricid",{"_index":189,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["herebi",{"_index":325,"title":{},"body":{"license.html":{}}}],["histogram",{"_index":35,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["histogram.getcount",{"_index":152,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["histogram.getgroup",{"_index":222,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["histogram.getnam",{"_index":223,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["histogram.getsnapshot",{"_index":221,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["holder",{"_index":368,"title":{},"body":{"license.html":{}}}],["host",{"_index":55,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["http://graphit",{"_index":317,"title":{},"body":{"index.html":{}}}],["http://localhost:3000",{"_index":312,"title":{},"body":{"index.html":{}}}],["identifi",{"_index":267,"title":{},"body":{"coverage.html":{}}}],["impli",{"_index":360,"title":{},"body":{"license.html":{}}}],["import",{"_index":23,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["includ",{"_index":69,"title":{},"body":{"interfaces/MetricEntry.html":{},"license.html":{}}}],["index",{"_index":14,"title":{"index.html":{}},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["inspector",{"_index":47,"title":{},"body":{"interfaces/MetricEntry.html":{},"dependencies.html":{},"index.html":{}}}],["instal",{"_index":289,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":13,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/MetricEntry.html":{}},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"overview.html":{}}}],["interv",{"_index":66,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["interval=1000",{"_index":88,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["isnan(valu",{"_index":204,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["key",{"_index":196,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["kind",{"_index":358,"title":{},"body":{"license.html":{}}}],["last",{"_index":9,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["lastmodifiedfunct",{"_index":165,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["lastmodifiedfunction(metr",{"_index":174,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["lastreport",{"_index":16,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["lastvalu",{"_index":17,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["liabil",{"_index":372,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":369,"title":{},"body":{"license.html":{}}}],["lib/.../carbonmetricreporter.t",{"_index":385,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lib/metrics/carbonmetricreporter.t",{"_index":5,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["librari",{"_index":283,"title":{},"body":{"index.html":{}}}],["licens",{"_index":319,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":337,"title":{},"body":{"license.html":{}}}],["line",{"_index":388,"title":{},"body":{"unit-test.html":{}}}],["link",{"_index":132,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["log",{"_index":78,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["logger",{"_index":36,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["logmetadata",{"_index":76,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["made",{"_index":284,"title":{},"body":{"index.html":{}}}],["map",{"_index":24,"title":{},"body":{"interfaces/MetricEntry.html":{},"dependencies.html":{}}}],["match",{"_index":264,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["meant",{"_index":286,"title":{},"body":{"index.html":{}}}],["measur",{"_index":175,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["measurement[`count",{"_index":213,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["measurement[`m15_r",{"_index":247,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["measurement[`m1_r",{"_index":249,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["measurement[`m5_r",{"_index":251,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["measurement[`max",{"_index":224,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["measurement[`mean",{"_index":226,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["measurement[`mean_r",{"_index":253,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["measurement[`min",{"_index":228,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["measurement[`p50",{"_index":230,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["measurement[`p75",{"_index":232,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["measurement[`p95",{"_index":234,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["measurement[`p98",{"_index":236,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["measurement[`p99",{"_index":238,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["measurement[`p999",{"_index":240,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["measurement[`stddev",{"_index":242,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["measurement[`valu",{"_index":218,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["memberof",{"_index":51,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["merchant",{"_index":361,"title":{},"body":{"license.html":{}}}],["merg",{"_index":340,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":75,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["meter",{"_index":37,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["meter.getcount",{"_index":155,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["meter.getgroup",{"_index":245,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["meter.getnam",{"_index":246,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["metric",{"_index":12,"title":{},"body":{"interfaces/MetricEntry.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["metricentri",{"_index":1,"title":{"interfaces/MetricEntry.html":{}},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{}}}],["metricentry.lastreport",{"_index":194,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["metricentry.lastvalu",{"_index":193,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["metricid",{"_index":169,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["metricregistri",{"_index":38,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["metricreport",{"_index":39,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["metrics.foreach((metr",{"_index":168,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["metricst",{"_index":83,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["metrictyp",{"_index":50,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["millisecond",{"_index":40,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["minim",{"_index":67,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["minimum",{"_index":186,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["minreportingtimeout",{"_index":70,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["minreportingtimeout=1",{"_index":92,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["minut",{"_index":41,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["minute.convertto(minreportingtimeout",{"_index":107,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["miscellan",{"_index":382,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":320,"title":{},"body":{"index.html":{},"license.html":{}}}],["modifi",{"_index":339,"title":{},"body":{"license.html":{}}}],["modul",{"_index":29,"title":{"modules.html":{}},"body":{"interfaces/MetricEntry.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["monoton",{"_index":207,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["monotonecount",{"_index":42,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["name",{"_index":211,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["navig",{"_index":311,"title":{},"body":{"index.html":{}}}],["need",{"_index":303,"title":{},"body":{"index.html":{}}}],["new",{"_index":84,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["node",{"_index":285,"title":{},"body":{"index.html":{}}}],["nodejs.it",{"_index":287,"title":{},"body":{"index.html":{}}}],["nodejs.tim",{"_index":65,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["noninfring",{"_index":365,"title":{},"body":{"license.html":{}}}],["notic",{"_index":352,"title":{},"body":{"license.html":{}}}],["now",{"_index":139,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["npm",{"_index":290,"title":{},"body":{"index.html":{}}}],["null",{"_index":183,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["number",{"_index":18,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["object",{"_index":61,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["obtain",{"_index":330,"title":{},"body":{"license.html":{}}}],["otherwis",{"_index":377,"title":{},"body":{"license.html":{}}}],["out",{"_index":379,"title":{},"body":{"license.html":{}}}],["overview",{"_index":381,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":276,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":86,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["particular",{"_index":363,"title":{},"body":{"license.html":{}}}],["password",{"_index":314,"title":{},"body":{"index.html":{}}}],["period",{"_index":118,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["permiss",{"_index":324,"title":{},"body":{"license.html":{}}}],["permit",{"_index":346,"title":{},"body":{"license.html":{}}}],["person",{"_index":329,"title":{},"body":{"license.html":{}}}],["playground",{"_index":302,"title":{},"body":{"index.html":{}}}],["playground/playground.shview",{"_index":309,"title":{},"body":{"index.html":{}}}],["point",{"_index":130,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["portion",{"_index":355,"title":{},"body":{"license.html":{}}}],["privat",{"_index":56,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["properti",{"_index":15,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["provid",{"_index":356,"title":{},"body":{"license.html":{}}}],["public",{"_index":96,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["publish",{"_index":341,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":364,"title":{},"body":{"license.html":{}}}],["reach",{"_index":187,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["refer",{"_index":22,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["regist",{"_index":131,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["registri",{"_index":137,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["report",{"_index":21,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["reportcounter(count",{"_index":214,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["reporter.addmetricregistry(registri",{"_index":295,"title":{},"body":{"index.html":{}}}],["reporter.gettags().set(\"app",{"_index":298,"title":{},"body":{"index.html":{}}}],["reporter.start();set",{"_index":296,"title":{},"body":{"index.html":{}}}],["reportfunct",{"_index":163,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["reportfunction(metr",{"_index":176,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["reportgauge(gaug",{"_index":215,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["reporthistogram(histogram",{"_index":219,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["reportmeter(met",{"_index":244,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["reportmetr",{"_index":167,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["reportmetricregistry(registri",{"_index":138,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["reportmonotonecounter(count",{"_index":208,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["reporttimer(tim",{"_index":255,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["require(\"graphit",{"_index":31,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/variables.html":{}}}],["restrict",{"_index":336,"title":{},"body":{"license.html":{}}}],["result",{"_index":263,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":62,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["right",{"_index":338,"title":{},"body":{"license.html":{}}}],["root/root",{"_index":315,"title":{},"body":{"index.html":{}}}],["run",{"_index":306,"title":{},"body":{"index.html":{}}}],["save",{"_index":80,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["schedul",{"_index":63,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["script",{"_index":308,"title":{},"body":{"index.html":{}}}],["sell",{"_index":345,"title":{},"body":{"license.html":{}}}],["send",{"_index":93,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["sendmetric(metr",{"_index":179,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["servic",{"_index":299,"title":{},"body":{"index.html":{}}}],["set",{"_index":111,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["setinterv",{"_index":124,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["setlog(log",{"_index":116,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["settags(tag",{"_index":112,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["shall",{"_index":353,"title":{},"body":{"license.html":{}}}],["snapshot",{"_index":220,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["softwar",{"_index":332,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/MetricEntry.html":{},"dependencies.html":{},"index.html":{}}}],["specif",{"_index":202,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["specifi",{"_index":136,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["start",{"_index":119,"title":{"index.html":{},"license.html":{}},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["state",{"_index":81,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["statement",{"_index":268,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["stdclock",{"_index":43,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["stop",{"_index":126,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["string",{"_index":57,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["subject",{"_index":348,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":343,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":354,"title":{},"body":{"license.html":{}}}],["super",{"_index":100,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["support",{"_index":280,"title":{},"body":{"dependencies.html":{}}}],["support/regist",{"_index":25,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["t",{"_index":162,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["tabl",{"_index":275,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":274,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":73,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{}}}],["taggabl",{"_index":44,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["taggable.gettags().foreach((tag",{"_index":201,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["tags=new",{"_index":90,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["tags[key",{"_index":200,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["templat",{"_index":161,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["test",{"_index":386,"title":{"unit-test.html":{}},"body":{"unit-test.html":{}}}],["this.buildtags(this.gettag",{"_index":180,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.client",{"_index":121,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.client.end",{"_index":128,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.client.writetagged(measur",{"_index":181,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.clock",{"_index":105,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(meter.get15minuter",{"_index":248,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(meter.get1minuter",{"_index":250,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(meter.get5minuter",{"_index":252,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(meter.getmeanr",{"_index":254,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.get75thpercentil",{"_index":233,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.get95thpercentil",{"_index":235,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.get98thpercentil",{"_index":237,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.get999thpercentil",{"_index":241,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.get99thpercentil",{"_index":239,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.getmax",{"_index":225,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.getmean",{"_index":227,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.getmedian",{"_index":231,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.getmin",{"_index":229,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(snapshot.getstddev",{"_index":243,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(timer.get15minuter",{"_index":259,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(timer.get1minuter",{"_index":260,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(timer.get5minuter",{"_index":261,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.getnumber(timer.getmeanr",{"_index":262,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.haschanged(metricid",{"_index":173,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.host",{"_index":101,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.interv",{"_index":102,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.log",{"_index":115,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.log.error(err",{"_index":184,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.logmetadata",{"_index":108,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.metricregistries.foreach((registri",{"_index":134,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.metricstates.get(metricid",{"_index":192,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.metricstates.has(metricid",{"_index":191,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.minreportingtimeout",{"_index":106,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.report",{"_index":125,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.reportcounter(count",{"_index":146,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.reportgauge(gaug",{"_index":148,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.reporthistogram(histogram",{"_index":151,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.reportmeter(met",{"_index":154,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.reportmetricregistry(registri",{"_index":135,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.reportmetrics(registry.getcounterlist",{"_index":145,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.reportmetrics(registry.getgaugelist",{"_index":147,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.reportmetrics(registry.gethistogramlist",{"_index":150,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.reportmetrics(registry.getmeterlist",{"_index":153,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.reportmetrics(registry.getmonotonecounterlist",{"_index":142,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.reportmetrics(registry.gettimerlist",{"_index":156,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.reportmonotonecounter(count",{"_index":143,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.reporttimer(tim",{"_index":157,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.sendmetric(metr",{"_index":177,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.tag",{"_index":104,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.tim",{"_index":123,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.timer.unref",{"_index":127,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.unit",{"_index":103,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["this.unit.convertto(this.interv",{"_index":120,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["time",{"_index":71,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["timeout",{"_index":68,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["timer",{"_index":45,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/typealiases.html":{}}}],["timer.getcount",{"_index":158,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["timer.getgroup",{"_index":257,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["timer.getnam",{"_index":258,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["timer.getsnapshot",{"_index":256,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["timestamp",{"_index":11,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["timeunit",{"_index":46,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["tort",{"_index":376,"title":{},"body":{"license.html":{}}}],["track",{"_index":8,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["trigger",{"_index":117,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["true",{"_index":172,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["type",{"_index":19,"title":{},"body":{"interfaces/MetricEntry.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":383,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":282,"title":{},"body":{"index.html":{}}}],["unchang",{"_index":95,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["unit",{"_index":72,"title":{"unit-test.html":{}},"body":{"interfaces/MetricEntry.html":{},"unit-test.html":{}}}],["unit=millisecond",{"_index":89,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["url",{"_index":316,"title":{},"body":{"index.html":{}}}],["us",{"_index":58,"title":{},"body":{"interfaces/MetricEntry.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":292,"title":{},"body":{"index.html":{}}}],["usernam",{"_index":313,"title":{},"body":{"index.html":{}}}],["v1.2.3\");dev",{"_index":301,"title":{},"body":{"index.html":{}}}],["valu",{"_index":10,"title":{},"body":{"interfaces/MetricEntry.html":{},"miscellaneous/variables.html":{}}}],["variabl",{"_index":272,"title":{"miscellaneous/variables.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":300,"title":{},"body":{"index.html":{}}}],["void",{"_index":113,"title":{},"body":{"interfaces/MetricEntry.html":{}}}],["warranti",{"_index":357,"title":{},"body":{"license.html":{}}}],["whether",{"_index":373,"title":{},"body":{"license.html":{}}}],["without",{"_index":335,"title":{},"body":{"license.html":{}}}],["x",{"_index":198,"title":{},"body":{"interfaces/MetricEntry.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/MetricEntry.html":{"url":"interfaces/MetricEntry.html","title":"interface - MetricEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/CarbonMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Entry interface to track the last value and timestamp of a metric instance.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        lastReport\n                                \n                                \n                                        lastValue\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastReport\n                                    \n                                \n                                \n                                    \n                                        lastReport:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Timestamp of the last reporting.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastValue\n                                    \n                                \n                                \n                                    \n                                        lastValue:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Last reported reference value.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Graphite / carbon client module.\n */\nconst graphite = require(\"graphite\");\n\nimport {\n    Clock,\n    Counter,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricReporter,\n    MILLISECOND,\n    MINUTE,\n    MonotoneCounter,\n    StdClock,\n    Taggable,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\n/**\n * Enumeration of all metric types.\n */\nexport type MetricType = \"counter\" | \"gauge\" | \"histogram\" | \"meter\" | \"timer\";\n\n/**\n * Entry interface to track the last value and timestamp of a metric instance.\n *\n * @interface MetricEntry\n */\ninterface MetricEntry {\n    /**\n     * Timestamp of the last reporting.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastReport: number;\n\n    /**\n     * Last reported reference value.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastValue: number;\n}\n\n/**\n * Metric reporter for graphite / carbon.\n *\n * @export\n * @class CarbonMetricReporter\n * @extends {MetricReporter}\n */\nexport class CarbonMetricReporter extends MetricReporter {\n\n    /**\n     * The graphite / carbon host.\n     *\n     * @private\n     * @type {string}\n     * @memberof CarbonMetricReporter\n     */\n    private host: string;\n    /**\n     * Clock used to determine the current timestamp.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof CarbonMetricReporter\n     */\n    private clock: Clock;\n    /**\n     * Reference for the object returned by the scheduler function.\n     *\n     * @private\n     * @type {NodeJS.Timer}\n     * @memberof CarbonMetricReporter\n     */\n    private timer: NodeJS.Timer;\n    /**\n     * Reporting interval.\n     *\n     * @private\n     * @type {number}\n     * @memberof CarbonMetricReporter\n     */\n    private interval: number;\n    /**\n     * Minimal timeout to include a metric instance into a reporting.\n     *\n     * @private\n     * @type {number}\n     * @memberof CarbonMetricReporter\n     */\n    private minReportingTimeout: number;\n    /**\n     * Time unit for the reporting interval.\n     *\n     * @private\n     * @type {TimeUnit}\n     * @memberof CarbonMetricReporter\n     */\n    private unit: TimeUnit;\n    /**\n     * Tags assigned to this reporter instance - reported for every metric instance.\n     *\n     * @private\n     * @type {Map}\n     * @memberof CarbonMetricReporter\n     */\n    private tags: Map;\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * Minimal logger interface to report failures.\n     *\n     * @private\n     * @type {Logger}\n     * @memberof CarbonMetricReporter\n     */\n    private log: Logger = console;\n    /**\n     * Saves the state of each reported metrics.\n     *\n     * @private\n     * @type {Map}\n     * @memberof CarbonMetricReporter\n     */\n    private metricStates: Map = new Map();\n    /**\n     * Graphite / carbon client instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private client: any;\n\n    /**\n     * Creates an instance of CarbonMetricReporter.\n     *\n     * @param {string} host The carbon/graphite host.\n     * @param {number} [interval=1000] The reporting interval.\n     * @param {TimeUnit} [unit=MILLISECOND] The time unit for the reporting interval.\n     * @param {Map} [tags=new Map()] Tags assigned to every metric.\n     * @param {Clock} [clock=new StdClock()] The clock - used to determine the timestamp of the metrics while reporting.\n     * @param {number} [minReportingTimeout=1] The time in minutes the report sends even unchanged metrics.\n     * @memberof CarbonMetricReporter\n     */\n    public constructor(\n        host: string,\n        interval: number = 1000,\n        unit: TimeUnit = MILLISECOND,\n        tags: Map = new Map(),\n        clock: Clock = new StdClock(),\n        minReportingTimeout = 1) {\n        super();\n\n        this.host = host;\n        this.interval = interval;\n        this.unit = unit;\n        this.tags = tags;\n        this.clock = clock;\n        this.minReportingTimeout = MINUTE.convertTo(minReportingTimeout, MILLISECOND);\n\n        this.logMetadata = {\n            interval,\n            tags,\n            unit,\n        };\n    }\n\n    /**\n     * Gets the reporter tags.\n     *\n     * @returns {Map}\n     * @memberof CarbonMetricReporter\n     */\n    public getTags(): Map {\n        return this.tags;\n    }\n\n    /**\n     * Sets the reporter tags.\n     *\n     * @param {Map} tags\n     * @memberof CarbonMetricReporter\n     */\n    public setTags(tags: Map): void {\n        this.tags = tags;\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof CarbonMetricReporter\n     */\n    public getLog(): Logger {\n        return this.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {Logger} log\n     * @memberof CarbonMetricReporter\n     */\n    public setLog(log: Logger): void {\n        this.log = log;\n    }\n\n    /**\n     * Uses the scheduler function to trigger periodical reporting.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public start(): void {\n        const interval: number = this.unit.convertTo(this.interval, MILLISECOND);\n\n        this.client = graphite.createClient(this.host);\n        this.timer = setInterval(() => this.report(), interval);\n    }\n\n    /**\n     * Stops the timer reference returned by the scheduler function.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public stop(): void {\n        if (this.timer) {\n            this.timer.unref();\n        }\n        if (this.client) {\n            this.client.end();\n        }\n    }\n\n    /**\n     * Reports the data points for each registered {@link MetricRegistry}.\n     *\n     * @private\n     * @memberof CarbonMetricReporter\n     */\n    private async report() {\n        this.metricRegistries.forEach((registry) => this.reportMetricRegistry(registry));\n    }\n\n    /**\n     * Reports the data points for the specified {@link MetricRegistry}.\n     *\n     * @private\n     * @param {MetricRegistry} registry\n     * @memberof CarbonMetricReporter\n     */\n    private reportMetricRegistry(registry: MetricRegistry): void {\n        const now: Date = new Date(this.clock.time().milliseconds);\n\n        this.reportMetrics(registry.getMonotoneCounterList(), now, \"counter\",\n            (counter: MonotoneCounter, date: Date) => this.reportMonotoneCounter(counter, date),\n            (counter: MonotoneCounter) => counter.getCount());\n        this.reportMetrics(registry.getCounterList(), now, \"counter\",\n            (counter: Counter, date: Date) => this.reportCounter(counter, date),\n            (counter: Counter) => counter.getCount());\n        this.reportMetrics(registry.getGaugeList(), now, \"gauge\",\n            (gauge: Gauge, date: Date) => this.reportGauge(gauge, date),\n            (gauge: Gauge) => gauge.getValue());\n        this.reportMetrics(registry.getHistogramList(), now, \"histogram\",\n            (histogram: Histogram, date: Date) => this.reportHistogram(histogram, date),\n            (histogram: Histogram) => histogram.getCount());\n        this.reportMetrics(registry.getMeterList(), now, \"meter\",\n            (meter: Meter, date: Date) => this.reportMeter(meter, date),\n            (meter: Meter) => meter.getCount());\n        this.reportMetrics(registry.getTimerList(), now, \"timer\",\n            (timer: Timer, date: Date) => this.reportTimer(timer, date),\n            (timer: Timer) => timer.getCount());\n    }\n\n    /**\n     * Reports a collection of metric instance for a certain type.\n     *\n     * @private\n     * @template T\n     * @param {T[]} metrics\n     * @param {Date} date\n     * @param {MetricType} type\n     * @param {(metric: Metric, date: Date) => {}} reportFunction\n     *      The function to build the data points for a certain metric.\n     * @param {(metric: Metric) => number} lastModifiedFunction\n     *      function to determine if a metric has a different value since the last reporting.\n     * @memberof CarbonMetricReporter\n     */\n    private reportMetrics(\n        metrics: T[],\n        date: Date,\n        type: MetricType,\n        reportFunction: (metric: Metric, date: Date) => {},\n        lastModifiedFunction: (metric: Metric) => number): void {\n\n        metrics.forEach((metric) => {\n            const metricId = (metric as any).id;\n            let changed = true;\n            if (metricId) {\n                changed = this.hasChanged(metricId, lastModifiedFunction(metric), date);\n            }\n\n            if (changed) {\n                const measurement = reportFunction(metric, date);\n                if (!!measurement) {\n                    this.sendMetric(metric, date, measurement);\n                }\n            }\n        });\n    }\n\n    /**\n     * Uses the client instance to report the given metric.\n     *\n     * @private\n     * @param {Metric} metric\n     * @param {Date} timestamp\n     * @param {{}} measurement\n     * @memberof CarbonMetricReporter\n     */\n    private sendMetric(metric: Metric, timestamp: Date, measurement: {}) {\n        const tags = this.buildTags(this.getTags(), metric);\n        this.client.writeTagged(measurement, tags, timestamp, (err: any) => {\n            if (err != null) {\n                this.log.error(err, this.logMetadata);\n            }\n        });\n    }\n\n    /**\n     * Determines if the specified metric has changed. This is always true if\n     * the minimum-reporting timeout was reached.\n     *\n     * @private\n     * @param {number} metricId\n     * @param {number} lastValue\n     * @param {Date} date\n     * @returns {boolean}\n     * @memberof CarbonMetricReporter\n     */\n    private hasChanged(metricId: number, lastValue: number, date: Date): boolean {\n        let changed = true;\n        let metricEntry = {\n            lastReport: 0,\n            lastValue,\n        };\n        if (this.metricStates.has(metricId)) {\n            metricEntry = this.metricStates.get(metricId);\n            changed = metricEntry.lastValue !== lastValue;\n            if (!changed) {\n                changed = metricEntry.lastReport + this.minReportingTimeout } commonTags\n     * @param {Taggable} taggable\n     * @returns {{ [key: string]: string }}\n     * @memberof CarbonMetricReporter\n     */\n    private buildTags(commonTags: Map, taggable: Taggable): { [key: string]: string } {\n        const tags: { [x: string]: string } = {};\n        commonTags.forEach((tag, key) => tags[key] = tag);\n        taggable.getTags().forEach((tag, key) => tags[key] = tag);\n        return tags;\n    }\n\n    /**\n     * Either gets 0 or the specifed value.\n     *\n     * @private\n     * @param {number} value\n     * @returns {number}\n     * @memberof CarbonMetricReporter\n     */\n    private getNumber(value: number): number {\n        if (isNaN(value)) {\n            return 0;\n        }\n        return value;\n    }\n\n    /**\n     * Computes and reports the fields of the monotone-counter.\n     *\n     * @private\n     * @param {MonotoneCounter} counter\n     * @param {Date} date\n     * @returns {{}}\n     * @memberof CarbonMetricReporter\n     */\n    private reportMonotoneCounter(counter: MonotoneCounter, date: Date): {} {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const measurement: any = {\n            group: counter.getGroup(),\n            name: counter.getName(),\n        };\n        measurement[`count`] = counter.getCount() || 0;\n\n        return measurement;\n    }\n\n    /**\n     * Computes and reports the fields of the counter.\n     *\n     * @private\n     * @param {Counter} counter\n     * @param {Date} date\n     * @returns {{}}\n     * @memberof CarbonMetricReporter\n     */\n    private reportCounter(counter: Counter, date: Date): {} {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const measurement: any = {\n            group: counter.getGroup(),\n            name: counter.getName(),\n        };\n        measurement[`count`] = counter.getCount() || 0;\n\n        return measurement;\n    }\n\n    /**\n     * Computes and reports the fields of the gauge.\n     *\n     * @private\n     * @param {Gauge} gauge\n     * @param {Date} date\n     * @returns {{}}\n     * @memberof CarbonMetricReporter\n     */\n    private reportGauge(gauge: Gauge, date: Date): {} {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const measurement: any = {\n            group: gauge.getGroup(),\n            name: gauge.getName(),\n        };\n        measurement[`value`] = gauge.getValue() || 0;\n\n        return measurement;\n    }\n\n    /**\n     * Computes and reports the fields of the histogram.\n     *\n     * @private\n     * @param {Histogram} histogram\n     * @param {Date} date\n     * @returns {{}}\n     * @memberof CarbonMetricReporter\n     */\n    private reportHistogram(histogram: Histogram, date: Date): {} {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const measurement: any = {\n            group: histogram.getGroup(),\n            name: histogram.getName(),\n        };\n        measurement[`count`] = histogram.getCount() || 0;\n        measurement[`max`] = this.getNumber(snapshot.getMax());\n        measurement[`mean`] = this.getNumber(snapshot.getMean());\n        measurement[`min`] = this.getNumber(snapshot.getMin());\n        measurement[`p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return measurement;\n    }\n\n    /**\n     * Computes and reports the fields of the meter.\n     *\n     * @private\n     * @param {Meter} meter\n     * @param {Date} date\n     * @returns {{}}\n     * @memberof CarbonMetricReporter\n     */\n    private reportMeter(meter: Meter, date: Date): {} {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const measurement: any = {\n            group: meter.getGroup(),\n            name: meter.getName(),\n        };\n        measurement[`count`] = meter.getCount() || 0;\n        measurement[`m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        measurement[`m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        measurement[`m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        measurement[`mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return measurement;\n    }\n\n    /**\n     * Computes and reports the fields of the timer.\n     *\n     * @private\n     * @param {Timer} timer\n     * @param {Date} date\n     * @returns {{}}\n     * @memberof CarbonMetricReporter\n     */\n    private reportTimer(timer: Timer, date: Date): {} {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const measurement: any = {\n            group: timer.getGroup(),\n            name: timer.getName(),\n        };\n        measurement[`count`] = timer.getCount() || 0;\n        measurement[`m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        measurement[`m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        measurement[`m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        measurement[`max`] = this.getNumber(snapshot.getMax());\n        measurement[`mean`] = this.getNumber(snapshot.getMean());\n        measurement[`mean_rate`] = this.getNumber(timer.getMeanRate());\n        measurement[`min`] = this.getNumber(snapshot.getMin());\n        measurement[`p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return measurement;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            \n                class\n            \n            \n                CarbonMetricReporter\n            \n            \n                100 %\n                (32/32)\n            \n        \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            \n                interface\n            \n            \n                MetricEntry\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            \n                variable\n            \n            \n                graphite\n            \n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            graphite : ^0.1.2\n        \n            inspector-metrics : ^1.11.0\n        \n            source-map-support : ^0.5.9\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-carbon\nTypescript Metrics Reporter for\ngraphite carbon.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with typescript / nodejs.It uses node-graphite as graphite/carbon client.\ninstall\nnpm install --save inspector-carbon\nbasic usage\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter(\"plaintext://graphite:2003/\");\nconst registry: MetricRegistry = new MetricRegistry();\n\n// add the registry to the reporter\nreporter.addMetricRegistry(registry);\n// start reporting\nreporter.start();set common tags for all metrics\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter(\"plaintext://graphite:2003/\");\n\n// set common tags for all metrics\nreporter.getTags().set(\"app-name\", \"my-service\");\nreporter.getTags().set(\"app-version\", \"v1.2.3\");dev\nusing the playground\nTo use the playground you need to have docker and docker-compose installed.\nnpm run compile\n# running playground script\nplayground/playground.shview data in grafana\n\nNavigate to http://localhost:3000\nAdd a new Data Source (type: graphite, username / password: root/root, host / url: http://graphite/)\nCreate a new graph\n\nLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MetricType   (lib/.../CarbonMetricReporter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/CarbonMetricReporter.ts\n    \n        \n            \n                \n                    \n                        \n                        MetricType\n                    \n                \n                    \n                        \n                            Enumeration of all metric types.\n\n                        \n                    \n                \n                    \n                        MetricType:     \"counter\" | \"gauge\" | \"histogram\" | \"meter\" | \"timer\"\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            graphite   (lib/.../CarbonMetricReporter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/CarbonMetricReporter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            graphite\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        graphite:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"graphite\")\n                        \n                    \n\n                \n                    \n                        Graphite / carbon client module.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
