var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/interfaces/CarbonData.html",[0,0.606,1,0.948]],["body/interfaces/CarbonData.html",[0,0.833,1,1.634,2,0.693,3,0.733,4,0.291,5,0.454,6,0.693,7,1.118,8,1.118,9,0.059,10,1.4,11,1.498,12,0.454,13,1.118,14,2.355,15,2.028,16,1.61,17,0.085,18,0.591,19,0.851,20,1.118,21,1.05,22,0.67,23,1.118,24,1.118,25,0.904,26,1.303,27,0.693,28,1.057,29,0.291,30,1.877,31,0.56,32,1.988,33,1.607,34,1.89,35,1.89,36,2.355,37,1.89,38,1.136,39,2.242,40,1.405,41,1.118,42,1.612,43,1.118,44,1.118,45,1.118,46,1.118,47,2.136,48,1.118,49,1.988,50,1.405,51,0.366,52,1.768,53,0.921,54,1.405,55,1.528,56,1.612,57,2.434,58,0.693,59,0.693,60,0.693,61,1.89,62,0.591,63,1.273,64,0.693,65,0.693,66,1.612,67,0.693,68,1.672,69,0.56,70,1.768,71,0.693,72,0.693,73,1.612,74,0.693,75,1.303,76,0.589,77,0.693,78,1.405,79,0.56,80,0.934,81,1.118,82,1.405,83,2.284,84,1.612,85,0.693,86,0.693,87,1.136,88,1.118,89,0.693,90,0.693,91,0.693,92,1.813,93,0.56,94,0.56,95,0.693,96,1.118,97,2.509,98,0.693,99,1.118,100,0.56,101,2.384,102,0.693,103,1.118,104,0.693,105,0.291,106,1.405,107,1.118,108,0.693,109,0.693,110,1.118,111,0.693,112,0.693,113,0.693,114,0.693,115,2.284,116,0.904,117,1.118,118,1.405,119,0.693,120,2.242,121,0.693,122,0.693,123,0.693,124,0.693,125,0.693,126,0.693,127,0.693,128,0.693,129,0.693,130,1.118,131,1.89,132,0.693,133,0.693,134,0.693,135,1.429,136,1.768,137,0.693,138,1.118,139,1.768,140,1.768,141,0.693,142,1.429,143,0.693,144,1.612,145,1.768,146,1.768,147,0.693,148,1.118,149,0.693,150,0.693,151,0.693,152,0.693,153,1.118,154,1.118,155,0.693,156,0.693,157,0.693,158,1.118,159,1.118,160,1.118,161,1.118,162,1.118,163,1.118,164,1.118,165,1.118,166,1.118,167,1.118,168,1.118,169,1.118,170,1.118,171,1.118,172,1.118,173,1.118,174,1.118,175,1.118,176,1.118,177,1.118,178,0.693,179,1.118,180,0.693,181,0.693,182,1.118,183,0.693,184,1.118,185,0.693,186,1.118,187,0.693,188,1.118,189,0.693,190,0.693,191,1.118,192,0.693,193,0.693,194,0.693,195,0.693,196,0.693,197,0.693,198,0.693,199,0.033]],["title/classes/CarbonMetricReporter.html",[62,0.764,63,0.764]],["body/classes/CarbonMetricReporter.html",[0,0.678,1,1.667,2,0.586,3,0.639,4,0.246,5,0.384,6,0.586,7,0.586,8,0.586,9,0.06,10,1.318,11,1.478,12,0.384,13,0.974,14,2.127,15,1.85,16,1.673,17,0.085,18,0.31,19,0.77,20,0.586,21,1.023,22,0.651,23,0.586,24,0.586,25,0.788,26,1.178,27,0.586,28,1.318,29,0.246,30,1.792,31,0.474,32,1.849,33,1.72,34,2.073,35,2.073,36,2.413,37,2.073,38,1.307,39,2.432,40,1.617,41,0.974,42,1.849,43,1.457,44,0.974,45,1.25,46,0.974,47,2.127,48,0.974,49,2.175,50,1.25,51,0.31,52,1.617,53,0.82,54,1.457,55,1.411,56,1.457,57,2.345,58,0.586,59,0.586,60,0.586,61,1.849,62,0.66,63,1.252,64,0.586,65,0.974,66,1.936,67,1.457,68,1.792,69,0.788,70,2.254,71,0.974,72,0.586,73,1.457,74,0.586,75,1.212,76,0.524,77,0.586,78,1.25,79,0.474,80,0.977,81,0.974,82,1.25,83,2.175,84,1.457,85,0.586,86,0.586,87,1.307,88,1.25,89,0.586,90,0.586,91,0.586,92,1.72,93,0.474,94,0.474,95,0.586,96,0.974,97,2.571,98,1.457,99,0.974,100,0.788,101,2.288,102,0.974,103,1.457,104,0.974,105,0.611,106,1.617,107,0.974,108,0.586,109,0.586,110,1.745,111,0.974,112,0.586,113,0.586,114,0.974,115,2.481,116,1.178,117,1.457,118,1.617,119,1.25,120,2.45,121,1.25,122,0.586,123,0.586,124,0.586,125,0.586,126,0.586,127,0.586,128,0.586,129,0.586,130,0.974,131,1.745,132,0.586,133,0.586,134,0.586,135,1.676,136,2.073,137,1.25,138,0.974,139,1.617,140,1.617,141,0.586,142,1.792,143,0.586,144,1.457,145,1.617,146,1.617,147,0.974,148,0.974,149,0.586,150,0.586,151,0.586,152,0.974,153,0.974,154,0.974,155,0.586,156,0.586,157,0.586,158,0.974,159,0.974,160,0.974,161,0.974,162,0.974,163,0.974,164,0.974,165,0.974,166,0.974,167,0.974,168,0.974,169,0.974,170,0.974,171,0.974,172,0.974,173,0.974,174,0.974,175,0.974,176,0.974,177,0.974,178,0.974,179,0.974,180,0.586,181,0.586,182,0.974,183,0.586,184,0.974,185,0.586,186,0.974,187,0.586,188,0.974,189,0.586,190,0.974,191,0.974,192,0.586,193,0.586,194,0.586,195,0.586,196,0.586,197,0.586,198,0.586,199,0.029,200,0.964,201,1.603,202,1.603,203,1.603,204,1.603,205,1.603,206,1.603,207,0.964,208,1.603,209,3.649,210,1.603,211,3.187,212,3.187,213,0.964,214,0.964,215,0.964,216,0.964,217,0.964,218,0.964,219,0.964,220,0.964,221,0.964,222,0.964,223,0.964,224,0.964,225,0.964]],["title/interfaces/CarbonMetricReporterOptions.html",[0,0.606,53,0.948]],["body/interfaces/CarbonMetricReporterOptions.html",[0,0.834,1,1.623,2,0.695,3,0.735,4,0.291,5,0.456,7,0.695,8,0.695,9,0.057,10,1.305,11,1.499,12,0.456,13,1.121,14,2.244,15,1.929,16,1.61,17,0.085,18,0.367,19,0.744,20,0.695,21,1.051,22,0.671,23,0.695,24,0.695,25,0.906,26,1.305,27,0.695,28,1.058,29,0.291,30,1.878,31,0.562,32,1.99,33,1.609,34,1.892,35,1.892,36,2.435,37,1.892,38,1.138,39,2.244,40,1.408,41,1.121,42,1.614,43,1.121,44,1.121,45,1.121,46,1.408,47,2.138,48,1.121,49,1.99,50,1.408,51,0.367,52,1.77,53,1.058,54,1.614,55,1.774,56,1.892,57,2.435,58,0.695,59,1.121,60,1.121,61,2.138,62,0.592,63,1.274,64,0.695,65,0.695,66,1.614,67,0.695,68,1.674,69,0.562,70,1.77,71,0.695,72,0.695,73,1.614,74,0.695,75,1.305,76,0.59,77,0.695,78,1.408,79,0.562,80,0.935,81,1.121,82,1.408,83,2.286,84,1.614,85,0.695,86,0.695,87,1.138,88,1.121,89,0.695,90,0.695,91,0.695,92,1.814,93,0.562,94,0.562,95,0.695,96,1.121,97,2.51,98,0.695,99,1.121,100,0.562,101,2.385,102,0.695,103,1.121,104,0.695,105,0.291,106,1.408,107,1.121,108,0.695,109,0.695,110,1.121,111,0.695,112,0.695,113,0.695,114,0.695,115,2.286,116,0.906,117,1.121,118,1.408,119,0.695,120,2.244,121,0.695,122,0.695,123,0.695,124,0.695,125,0.695,126,0.695,127,0.695,128,0.695,129,0.695,130,1.121,131,1.892,132,0.695,133,0.695,134,0.695,135,1.431,136,1.77,137,0.695,138,1.121,139,1.77,140,1.77,141,0.695,142,1.431,143,0.695,144,1.614,145,1.77,146,1.77,147,0.695,148,1.121,149,0.695,150,0.695,151,0.695,152,0.695,153,1.121,154,1.121,155,0.695,156,0.695,157,0.695,158,1.121,159,1.121,160,1.121,161,1.121,162,1.121,163,1.121,164,1.121,165,1.121,166,1.121,167,1.121,168,1.121,169,1.121,170,1.121,171,1.121,172,1.121,173,1.121,174,1.121,175,1.121,176,1.121,177,1.121,178,0.695,179,1.121,180,0.695,181,0.695,182,1.121,183,0.695,184,1.121,185,0.695,186,1.121,187,0.695,188,1.121,189,0.695,190,0.695,191,1.121,192,0.695,193,0.695,194,0.695,195,0.695,196,0.695,197,0.695,198,0.695,199,0.033]],["title/changelog.html",[19,0.65,105,0.516,226,1.547]],["body/changelog.html",[4,0.891,6,1.683,9,0.064,11,1.103,17,0.073,18,1.123,21,0.889,22,0.545,33,1.36,51,1.293,76,0.705,80,1.334,93,1.98,135,1.36,199,0.064,226,2.928,227,2.769,228,3.836,229,2.769,230,2.769,231,2.769,232,2.769,233,2.769,234,2.671,235,2.769,236,2.769,237,3.077,238,3.499,239,3.499,240,4.245,241,2.671,242,2.126,243,2.671,244,2.769,245,2.114,246,3.836,247,3.836,248,3.836,249,2.331,250,2.769,251,2.769,252,2.769,253,2.769,254,2.769,255,2.769,256,2.769,257,2.769,258,3.499,259,2.114,260,2.769,261,2.769,262,2.769,263,2.769,264,2.769,265,2.769,266,3.499,267,4.03,268,3.499,269,2.671,270,2.769,271,2.769,272,2.769,273,2.769,274,2.769,275,3.499,276,2.769,277,2.769,278,2.769,279,2.769,280,2.769,281,3.499,282,2.769,283,2.114,284,1.719,285,2.769,286,1.683,287,2.671,288,2.769,289,2.769,290,2.769,291,2.769,292,2.769,293,2.769,294,2.769,295,1.36,296,2.769,297,2.769,298,2.769,299,2.769,300,2.769,301,2.769]],["title/coverage.html",[295,1.558]],["body/coverage.html",[0,1.003,1,1.34,4,0.857,5,1.716,9,0.072,16,1.34,17,0.081,18,1.08,22,0.662,53,1.34,62,1.08,63,1.08,76,0.857,199,0.072,295,1.653,302,3.365,303,2.569,304,4.177,305,3.365,306,3.365,307,3.365,308,3.365,309,2.045,310,3.365,311,2.569,312,2.569]],["title/dependencies.html",[249,1.726,313,2.026]],["body/dependencies.html",[3,1.397,9,0.073,10,1.397,17,0.081,22,0.69,26,1.723,51,1.126,199,0.073,249,2.131,259,2.678,314,3.508,315,3.508,316,3.508]],["title/index.html",[12,0.807,19,0.65,105,0.516]],["body/index.html",[3,1.094,9,0.063,10,1.687,11,1.714,15,1.71,16,1.094,17,0.084,21,1.381,22,0.752,25,1.974,28,1.094,29,0.699,30,1.877,38,1.974,51,1.381,55,1.349,63,1.29,68,1.71,69,1.349,76,1.056,80,1.29,94,1.71,100,1.349,105,0.699,116,1.71,142,1.349,199,0.063,234,2.096,241,2.096,243,2.096,245,2.657,269,2.917,283,2.657,284,1.349,286,1.669,287,2.096,317,2.746,318,2.746,319,2.746,320,2.746,321,2.746,322,3.821,323,3.48,324,2.746,325,2.746,326,3.48,327,3.48,328,2.746,329,2.746,330,3.48,331,2.746,332,2.746,333,2.746,334,3.48,335,2.746,336,3.48,337,2.746,338,3.48,339,2.746,340,2.746,341,2.746,342,2.746,343,2.746,344,2.746,345,2.746,346,2.746,347,2.746]],["title/license.html",[19,0.65,105,0.516,284,0.995]],["body/license.html",[4,0.767,9,0.067,17,0.067,18,0.966,80,1.183,199,0.067,237,2.298,284,1.479,286,1.829,348,3.983,349,3.01,350,3.686,351,3.01,352,3.01,353,3.01,354,3.01,355,3.686,356,3.01,357,4.151,358,4.464,359,3.01,360,3.686,361,3.983,362,3.01,363,3.983,364,3.686,365,3.01,366,3.01,367,3.01,368,3.01,369,3.01,370,3.01,371,3.01,372,3.01,373,3.01,374,3.01,375,3.01,376,3.01,377,3.01,378,3.01,379,3.686,380,3.686,381,3.01,382,3.01,383,3.01,384,3.686,385,3.01,386,3.01,387,3.01,388,3.01,389,3.01,390,3.01,391,3.01,392,3.01,393,3.01,394,3.01,395,3.01,396,3.01,397,3.01,398,3.01,399,3.01,400,3.01,401,3.01,402,3.01,403,3.01,404,3.01,405,3.01,406,3.01,407,3.01]],["title/modules.html",[29,0.808]],["body/modules.html",[9,0.074,17,0.074,29,0.917,199,0.074]],["title/overview.html",[408,2.421]],["body/overview.html",[0,0.909,9,0.074,17,0.074,62,1.145,79,1.753,199,0.074,408,2.724,409,3.568]],["title/unit-test.html",[75,1.025,242,1.563]],["body/unit-test.html",[4,0.897,9,0.073,17,0.073,75,1.403,76,0.897,87,1.73,199,0.073,242,2.14,295,1.73,303,2.689,311,2.689,312,2.689,410,3.522,411,3.522]],["title/miscellaneous/variables.html",[309,1.726,412,1.547]],["body/miscellaneous/variables.html",[5,1.385,9,0.073,12,1.385,17,0.079,21,1.116,22,0.856,28,1.385,29,0.886,31,1.709,92,1.709,199,0.073,309,2.113,412,2.655,413,3.478,414,3.478]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":145,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["0.1.3",{"_index":314,"title":{},"body":{"dependencies.html":{}}}],["0.5.9",{"_index":316,"title":{},"body":{"dependencies.html":{}}}],["02",{"_index":278,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":239,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":274,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":275,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":79,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"overview.html":{}}}],["1.0.0",{"_index":277,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":273,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":257,"title":{},"body":{"changelog.html":{}}}],["1.13.0",{"_index":315,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":310,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":258,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":304,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":74,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["11",{"_index":238,"title":{},"body":{"changelog.html":{}}}],["14/14",{"_index":305,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":409,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":236,"title":{},"body":{"changelog.html":{}}}],["2/3",{"_index":308,"title":{},"body":{"coverage.html":{}}}],["2018",{"_index":237,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["3/3",{"_index":306,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":297,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":307,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":298,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":299,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":300,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":378,"title":{},"body":{"license.html":{}}}],["action",{"_index":401,"title":{},"body":{"license.html":{}}}],["ad",{"_index":240,"title":{},"body":{"changelog.html":{}}}],["adapt",{"_index":251,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":327,"title":{},"body":{"index.html":{}}}],["adher",{"_index":232,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":371,"title":{},"body":{"license.html":{}}}],["aris",{"_index":405,"title":{},"body":{"license.html":{}}}],["array",{"_index":121,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["associ",{"_index":359,"title":{},"body":{"license.html":{}}}],["author",{"_index":394,"title":{},"body":{"license.html":{}}}],["base",{"_index":230,"title":{},"body":{"changelog.html":{}}}],["basic",{"_index":287,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["branch",{"_index":410,"title":{},"body":{"unit-test.html":{}}}],["build",{"_index":135,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{}}}],["c",{"_index":349,"title":{},"body":{"license.html":{}}}],["carbon",{"_index":21,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["carbondata",{"_index":1,"title":{"interfaces/CarbonData.html":{}},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{}}}],["carbondata.tag",{"_index":129,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["carbonmetricreport",{"_index":63,"title":{"classes/CarbonMetricReporter.html":{}},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"index.html":{}}}],["carbonmetricreporter(\"plaintext://graphite:2003",{"_index":326,"title":{},"body":{"index.html":{}}}],["carbonmetricreporteropt",{"_index":53,"title":{"interfaces/CarbonMetricReporterOptions.html":{}},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{}}}],["chai",{"_index":289,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":93,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{}}}],["changelog",{"_index":226,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["charg",{"_index":354,"title":{},"body":{"license.html":{}}}],["claim",{"_index":397,"title":{},"body":{"license.html":{}}}],["class",{"_index":62,"title":{"classes/CarbonMetricReporter.html":{}},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"overview.html":{}}}],["client",{"_index":28,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["clock",{"_index":32,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["code",{"_index":294,"title":{},"body":{"changelog.html":{}}}],["combin",{"_index":24,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["commit",{"_index":280,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":94,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["compil",{"_index":241,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["compodoc",{"_index":271,"title":{},"body":{"changelog.html":{}}}],["compon",{"_index":264,"title":{},"body":{"changelog.html":{}}}],["compos",{"_index":335,"title":{},"body":{"index.html":{}}}],["condit",{"_index":377,"title":{},"body":{"license.html":{}}}],["config",{"_index":267,"title":{},"body":{"changelog.html":{}}}],["connect",{"_index":407,"title":{},"body":{"license.html":{}}}],["consol",{"_index":72,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["const",{"_index":30,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["constructor",{"_index":71,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["constructor(undefin",{"_index":207,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["contract",{"_index":402,"title":{},"body":{"license.html":{}}}],["copi",{"_index":357,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":348,"title":{},"body":{"license.html":{}}}],["counter",{"_index":33,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{}}}],["counter.getcount",{"_index":138,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["counter.getgroup",{"_index":141,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["counter.getnam",{"_index":143,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["coverag",{"_index":295,"title":{"coverage.html":{}},"body":{"changelog.html":{},"coverage.html":{},"unit-test.html":{}}}],["creat",{"_index":69,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["ctx",{"_index":120,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["current",{"_index":86,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["damag",{"_index":398,"title":{},"body":{"license.html":{}}}],["data",{"_index":338,"title":{},"body":{"index.html":{}}}],["date",{"_index":117,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["deal",{"_index":360,"title":{},"body":{"license.html":{}}}],["default",{"_index":414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defin",{"_index":209,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["depend",{"_index":249,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"changelog.html":{}}}],["determin",{"_index":85,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["differ",{"_index":244,"title":{},"body":{"changelog.html":{}}}],["distribut",{"_index":369,"title":{},"body":{"license.html":{}}}],["docker",{"_index":334,"title":{},"body":{"index.html":{}}}],["document",{"_index":18,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"license.html":{}}}],["editorconfig",{"_index":296,"title":{},"body":{"changelog.html":{}}}],["err",{"_index":130,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["es2017",{"_index":255,"title":{},"body":{"changelog.html":{}}}],["es6",{"_index":256,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":393,"title":{},"body":{"license.html":{}}}],["exampl",{"_index":200,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["export",{"_index":52,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["express",{"_index":386,"title":{},"body":{"license.html":{}}}],["extend",{"_index":54,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["failur",{"_index":60,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["fit",{"_index":389,"title":{},"body":{"license.html":{}}}],["fix",{"_index":265,"title":{},"body":{"changelog.html":{}}}],["follow",{"_index":376,"title":{},"body":{"license.html":{}}}],["format",{"_index":229,"title":{},"body":{"changelog.html":{}}}],["free",{"_index":353,"title":{},"body":{"license.html":{}}}],["function",{"_index":87,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"unit-test.html":{}}}],["furnish",{"_index":374,"title":{},"body":{"license.html":{}}}],["gaug",{"_index":34,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["gauge.getgroup",{"_index":149,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["gauge.getnam",{"_index":150,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["gauge.getvalu",{"_index":148,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["get",{"_index":19,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["getlog",{"_index":98,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["given",{"_index":114,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["grafana",{"_index":339,"title":{},"body":{"index.html":{}}}],["grant",{"_index":352,"title":{},"body":{"license.html":{}}}],["graph",{"_index":347,"title":{},"body":{"index.html":{}}}],["graphit",{"_index":22,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["graphite.createclient(this.options.host",{"_index":108,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["graphite/carbon",{"_index":321,"title":{},"body":{"index.html":{}}}],["group",{"_index":140,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["handleresult",{"_index":119,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["handleresults(ctx",{"_index":215,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["helper",{"_index":7,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["herebi",{"_index":351,"title":{},"body":{"license.html":{}}}],["histogram",{"_index":35,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["histogram.getcount",{"_index":153,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["histogram.getgroup",{"_index":156,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["histogram.getnam",{"_index":157,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["histogram.getsnapshot",{"_index":155,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["holder",{"_index":395,"title":{},"body":{"license.html":{}}}],["homepag",{"_index":261,"title":{},"body":{"changelog.html":{}}}],["host",{"_index":55,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["http://graphit",{"_index":346,"title":{},"body":{"index.html":{}}}],["http://localhost:3000",{"_index":341,"title":{},"body":{"index.html":{}}}],["identifi",{"_index":302,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":253,"title":{},"body":{"changelog.html":{}}}],["impli",{"_index":387,"title":{},"body":{"license.html":{}}}],["import",{"_index":25,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["includ",{"_index":363,"title":{},"body":{"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["initi",{"_index":279,"title":{},"body":{"changelog.html":{}}}],["inspector",{"_index":51,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["instal",{"_index":322,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":68,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"overview.html":{}}}],["interv",{"_index":81,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["isnan(valu",{"_index":139,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["it'",{"_index":91,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["jenkin",{"_index":291,"title":{},"body":{"changelog.html":{}}}],["jsdoc",{"_index":263,"title":{},"body":{"changelog.html":{}}}],["keep",{"_index":231,"title":{},"body":{"changelog.html":{}}}],["kind",{"_index":385,"title":{},"body":{"license.html":{}}}],["liabil",{"_index":399,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":396,"title":{},"body":{"license.html":{}}}],["lib/.../carbonmetricreporter.t",{"_index":413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/metrics/carbonmetricreporter.t",{"_index":5,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/metrics/carbonmetricreporter.ts:177",{"_index":214,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["lib/metrics/carbonmetricreporter.ts:187",{"_index":223,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["lib/metrics/carbonmetricreporter.ts:196",{"_index":224,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["lib/metrics/carbonmetricreporter.ts:206",{"_index":225,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["lib/metrics/carbonmetricreporter.ts:224",{"_index":216,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["lib/metrics/carbonmetricreporter.ts:252",{"_index":218,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["lib/metrics/carbonmetricreporter.ts:280",{"_index":219,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["lib/metrics/carbonmetricreporter.ts:306",{"_index":220,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["lib/metrics/carbonmetricreporter.ts:343",{"_index":221,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["lib/metrics/carbonmetricreporter.ts:373",{"_index":222,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["lib/metrics/carbonmetricreporter.ts:87",{"_index":213,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["lib/metrics/carbonmetricreporter.ts:95",{"_index":210,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["librari",{"_index":317,"title":{},"body":{"index.html":{}}}],["licens",{"_index":284,"title":{"license.html":{}},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["limit",{"_index":364,"title":{},"body":{"license.html":{}}}],["line",{"_index":411,"title":{},"body":{"unit-test.html":{}}}],["link",{"_index":83,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["lint",{"_index":266,"title":{},"body":{"changelog.html":{}}}],["liter",{"_index":208,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["log",{"_index":61,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["logger",{"_index":36,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["logmetadata",{"_index":67,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["made",{"_index":318,"title":{},"body":{"index.html":{}}}],["map",{"_index":26,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"dependencies.html":{}}}],["map((carbondata",{"_index":125,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["map((result",{"_index":123,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["match",{"_index":199,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["meant",{"_index":319,"title":{},"body":{"index.html":{}}}],["measur",{"_index":14,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`count",{"_index":144,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`m15_r",{"_index":182,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`m1_r",{"_index":184,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`m5_r",{"_index":186,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`max",{"_index":158,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`mean",{"_index":160,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`mean_r",{"_index":188,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`min",{"_index":162,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`p50",{"_index":164,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`p75",{"_index":166,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`p95",{"_index":168,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`p98",{"_index":170,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`p99",{"_index":172,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`p999",{"_index":174,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`stddev",{"_index":176,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`valu",{"_index":151,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["memberof",{"_index":57,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["merchant",{"_index":388,"title":{},"body":{"license.html":{}}}],["merg",{"_index":367,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":65,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["meter",{"_index":37,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["meter.getcount",{"_index":179,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["meter.getgroup",{"_index":180,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["meter.getnam",{"_index":181,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["method",{"_index":201,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["metric",{"_index":10,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"dependencies.html":{},"index.html":{}}}],["metriclogg",{"_index":252,"title":{},"body":{"changelog.html":{}}}],["metricregistri",{"_index":38,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["metricreport",{"_index":64,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metrics@1.11.0",{"_index":270,"title":{},"body":{"changelog.html":{}}}],["metrics@1.13.0",{"_index":250,"title":{},"body":{"changelog.html":{}}}],["metrics@1.8.3",{"_index":301,"title":{},"body":{"changelog.html":{}}}],["metrics@1.8.7",{"_index":276,"title":{},"body":{"changelog.html":{}}}],["metricsetreportcontext",{"_index":39,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metrictyp",{"_index":40,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["millisecond",{"_index":41,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["minim",{"_index":59,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["minreportingtimeout",{"_index":78,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["miscellan",{"_index":412,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mit",{"_index":286,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["mocha",{"_index":288,"title":{},"body":{"changelog.html":{}}}],["modifi",{"_index":366,"title":{},"body":{"license.html":{}}}],["modul",{"_index":29,"title":{"modules.html":{}},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["monoton",{"_index":260,"title":{},"body":{"changelog.html":{}}}],["monotonecount",{"_index":42,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["name",{"_index":142,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["navig",{"_index":340,"title":{},"body":{"index.html":{}}}],["need",{"_index":333,"title":{},"body":{"index.html":{}}}],["new",{"_index":76,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["node",{"_index":245,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nodej",{"_index":246,"title":{},"body":{"changelog.html":{}}}],["nodejs.it",{"_index":320,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":392,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":227,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":379,"title":{},"body":{"license.html":{}}}],["npm",{"_index":323,"title":{},"body":{"index.html":{}}}],["null",{"_index":131,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["number",{"_index":84,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["nyc",{"_index":293,"title":{},"body":{"changelog.html":{}}}],["obtain",{"_index":356,"title":{},"body":{"license.html":{}}}],["option",{"_index":212,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["otherwis",{"_index":404,"title":{},"body":{"license.html":{}}}],["out",{"_index":406,"title":{},"body":{"license.html":{}}}],["overallreportcontext",{"_index":43,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["overview",{"_index":408,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":313,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":262,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":101,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["paramet",{"_index":211,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["particular",{"_index":390,"title":{},"body":{"license.html":{}}}],["password",{"_index":343,"title":{},"body":{"index.html":{}}}],["period",{"_index":104,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["permiss",{"_index":350,"title":{},"body":{"license.html":{}}}],["permit",{"_index":373,"title":{},"body":{"license.html":{}}}],["person",{"_index":355,"title":{},"body":{"license.html":{}}}],["pipelin",{"_index":292,"title":{},"body":{"changelog.html":{}}}],["playground",{"_index":269,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["playground/playground.shview",{"_index":337,"title":{},"body":{"index.html":{}}}],["portion",{"_index":382,"title":{},"body":{"license.html":{}}}],["privat",{"_index":66,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["project",{"_index":228,"title":{},"body":{"changelog.html":{}}}],["promis",{"_index":106,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["promise((resolv",{"_index":126,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["promise.all(result",{"_index":122,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["properti",{"_index":13,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["protect",{"_index":115,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["provid",{"_index":383,"title":{},"body":{"license.html":{}}}],["public",{"_index":70,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["publish",{"_index":368,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":391,"title":{},"body":{"license.html":{}}}],["readm",{"_index":282,"title":{},"body":{"changelog.html":{}}}],["readonli",{"_index":58,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["refactor",{"_index":268,"title":{},"body":{"changelog.html":{}}}],["refer",{"_index":111,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["registri",{"_index":116,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["reject",{"_index":127,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reject(err",{"_index":133,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["report",{"_index":11,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{}}}],["reportcount",{"_index":137,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reportcounter(count",{"_index":217,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["reporter.addmetricregistry(registri",{"_index":328,"title":{},"body":{"index.html":{}}}],["reporter.gettags().set(\"app",{"_index":330,"title":{},"body":{"index.html":{}}}],["reporter.start();set",{"_index":329,"title":{},"body":{"index.html":{}}}],["reportgaug",{"_index":202,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["reportgauge(gaug",{"_index":147,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reporthistogram",{"_index":203,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["reporthistogram(histogram",{"_index":152,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reportingresult",{"_index":44,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reportinterv",{"_index":73,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reportmet",{"_index":204,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["reportmeter(met",{"_index":178,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reporttim",{"_index":205,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["reporttimer(tim",{"_index":190,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["repres",{"_index":8,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["require(\"graphit",{"_index":31,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"miscellaneous/variables.html":{}}}],["resolv",{"_index":134,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["restrict",{"_index":362,"title":{},"body":{"license.html":{}}}],["result",{"_index":9,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["result.result",{"_index":124,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["return",{"_index":97,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["right",{"_index":365,"title":{},"body":{"license.html":{}}}],["root/root",{"_index":344,"title":{},"body":{"index.html":{}}}],["run",{"_index":336,"title":{},"body":{"index.html":{}}}],["save",{"_index":324,"title":{},"body":{"index.html":{}}}],["schedul",{"_index":47,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["scheduledmetricreport",{"_index":45,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["scheduledmetricreporteropt",{"_index":46,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["script",{"_index":243,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sell",{"_index":372,"title":{},"body":{"license.html":{}}}],["semant",{"_index":233,"title":{},"body":{"changelog.html":{}}}],["sent",{"_index":20,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["server",{"_index":23,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["servic",{"_index":331,"title":{},"body":{"index.html":{}}}],["set",{"_index":100,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["setinterv",{"_index":77,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["setlog",{"_index":206,"title":{},"body":{"classes/CarbonMetricReporter.html":{}}}],["setlog(log",{"_index":102,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["setup",{"_index":281,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":380,"title":{},"body":{"license.html":{}}}],["sinon",{"_index":290,"title":{},"body":{"changelog.html":{}}}],["snapshot",{"_index":154,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["softwar",{"_index":358,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"dependencies.html":{},"index.html":{}}}],["specifi",{"_index":136,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["start",{"_index":105,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["statement",{"_index":303,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["stdclock",{"_index":48,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["stop",{"_index":110,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["string",{"_index":56,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["subject",{"_index":375,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":370,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":381,"title":{},"body":{"license.html":{}}}],["super",{"_index":95,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["super.start",{"_index":109,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["super.stop",{"_index":112,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["support",{"_index":259,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["support/regist",{"_index":27,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["tabl",{"_index":312,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":311,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":15,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["target",{"_index":254,"title":{},"body":{"changelog.html":{}}}],["test",{"_index":242,"title":{"unit-test.html":{}},"body":{"changelog.html":{},"unit-test.html":{}}}],["this.buildtags(ctx.registri",{"_index":146,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.client",{"_index":107,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.client.end",{"_index":113,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.client.writetagged(carbondata.measur",{"_index":128,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(meter.get15minuter",{"_index":183,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(meter.get1minuter",{"_index":185,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(meter.get5minuter",{"_index":187,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(meter.getmeanr",{"_index":189,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get75thpercentil",{"_index":167,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get95thpercentil",{"_index":169,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get98thpercentil",{"_index":171,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get999thpercentil",{"_index":175,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get99thpercentil",{"_index":173,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getmax",{"_index":159,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getmean",{"_index":161,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getmedian",{"_index":165,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getmin",{"_index":163,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getstddev",{"_index":177,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(timer.get15minuter",{"_index":195,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(timer.get1minuter",{"_index":196,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(timer.get5minuter",{"_index":197,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(timer.getmeanr",{"_index":198,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.logmetadata",{"_index":96,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.options.log",{"_index":99,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.options.log.error(err",{"_index":132,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["time",{"_index":82,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timeout",{"_index":89,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer",{"_index":49,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer.getcount",{"_index":191,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer.getgroup",{"_index":193,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer.getnam",{"_index":194,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer.getsnapshot",{"_index":192,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timestamp",{"_index":118,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timeunit",{"_index":50,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["tool",{"_index":272,"title":{},"body":{"changelog.html":{}}}],["tort",{"_index":403,"title":{},"body":{"license.html":{}}}],["travis.yml",{"_index":247,"title":{},"body":{"changelog.html":{}}}],["trigger",{"_index":88,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["type",{"_index":16,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"index.html":{}}}],["typescript",{"_index":283,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["under",{"_index":285,"title":{},"body":{"changelog.html":{}}}],["unit",{"_index":75,"title":{"unit-test.html":{}},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"unit-test.html":{}}}],["unreleas",{"_index":235,"title":{},"body":{"changelog.html":{}}}],["updat",{"_index":248,"title":{},"body":{"changelog.html":{}}}],["url",{"_index":345,"title":{},"body":{"index.html":{}}}],["us",{"_index":80,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":325,"title":{},"body":{"index.html":{}}}],["usernam",{"_index":342,"title":{},"body":{"index.html":{}}}],["v1.2.3\");dev",{"_index":332,"title":{},"body":{"index.html":{}}}],["valu",{"_index":92,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"miscellaneous/variables.html":{}}}],["variabl",{"_index":309,"title":{"miscellaneous/variables.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":234,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["void",{"_index":103,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["warranti",{"_index":384,"title":{},"body":{"license.html":{}}}],["wether",{"_index":90,"title":{},"body":{"interfaces/CarbonData.html":{},"classes/CarbonMetricReporter.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["whether",{"_index":400,"title":{},"body":{"license.html":{}}}],["without",{"_index":361,"title":{},"body":{"license.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/CarbonData.html":{"url":"interfaces/CarbonData.html","title":"interface - CarbonData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CarbonData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/CarbonMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for representing the result of a metric report.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        measurement\n                                \n                                \n                                        tags\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        measurement\n                                    \n                                \n                                \n                                    \n                                        measurement:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Document that is getting sent to the carbon / graphite server.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                    \n                                \n                                \n                                    \n                                        tags:     Tags\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Tags\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Combined tags for the metric.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Graphite / carbon client module.\n */\nconst graphite = require(\"graphite\");\n\nimport {\n    Clock,\n    Counter,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    Scheduler,\n    StdClock,\n    Tags,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\nexport interface CarbonMetricReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * The graphite / carbon host.\n     *\n     * @type {string}\n     * @memberof CarbonMetricReporterOptions\n     */\n    readonly host: string;\n    /**\n     * Minimal logger interface to report failures.\n     *\n     * @type {Logger}\n     * @memberof CarbonMetricReporterOptions\n     */\n    log: Logger;\n}\n\n/**\n * Helper interface for representing the result of a metric report.\n *\n * @export\n * @interface CarbonData\n */\nexport interface CarbonData {\n    /**\n     * Document that is getting sent to the carbon / graphite server.\n     *\n     * @type {*}\n     * @memberof CarbonData\n     */\n    measurement: any;\n    /**\n     * Combined tags for the metric.\n     *\n     * @type {Tags}\n     * @memberof CarbonData\n     */\n    tags: Tags;\n}\n\n/**\n * Metric reporter for graphite / carbon.\n *\n * @export\n * @class CarbonMetricReporter\n * @extends {MetricReporter}\n */\nexport class CarbonMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * Graphite / carbon client instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private client: any;\n\n    /**\n     * Creates an instance of CarbonMetricReporter.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public constructor({\n        host,\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: {\n        /**\n         * The graphite / carbon host.\n         * @type {string}\n         */\n        host: string,\n        /**\n         * The logger instance used to report metrics.\n         * @type {Logger}\n         */\n        log?: Logger,\n        /**\n         * Reporting interval in the time-unit of {@link #unit}.\n         * @type {number}\n         */\n        reportInterval?: number;\n        /**\n         * The time-unit of the reporting interval.\n         * @type {TimeUnit}\n         */\n        unit?: TimeUnit;\n        /**\n         * The clock instance used determine the current time.\n         * @type {Clock}\n         */\n        clock?: Clock;\n        /**\n         * The scheduler function used to trigger reporting.\n         * @type {Scheduler}\n         */\n        scheduler?: Scheduler;\n        /**\n         * The timeout in which a metrics gets reported wether it's value has changed or not.\n         * @type {number}\n         */\n        minReportingTimeout?: number;\n        /**\n         * Common tags for this reporter instance.\n         * @type {Map}\n         */\n        tags?: Map;\n    }) {\n        super({\n            clock,\n            host,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            tags,\n            unit,\n        });\n\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof CarbonMetricReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {Logger} log\n     * @memberof CarbonMetricReporter\n     */\n    public setLog(log: Logger): void {\n        this.options.log = log;\n    }\n\n    /**\n     * Uses the scheduler function to trigger periodical reporting.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public start(): Promise {\n        this.client = graphite.createClient(this.options.host);\n        return super.start();\n    }\n\n    /**\n     * Stops the timer reference returned by the scheduler function.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public stop(): void {\n        super.stop();\n        if (this.client) {\n            this.client.end();\n        }\n    }\n\n    /**\n     * Uses the client instance to report the given metric results.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @param {Date} timestamp\n     * @param {MetricType} type\n     * @param {ReportingResult[]} results\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    protected handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        timestamp: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        return Promise.all(results\n            .map((result) => result.result)\n            .map((carbonData) => new Promise((resolve, reject) => {\n                this.client.writeTagged(carbonData.measurement, carbonData.tags, timestamp, (err: any) => {\n                    if (err != null) {\n                        this.options.log.error(err, this.logMetadata);\n                        reject(err);\n                    }\n                    resolve();\n                });\n            })));\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Counter} or {@link MonotoneCounter}.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): CarbonData {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const measurement: any = {\n            group: counter.getGroup(),\n            name: counter.getName(),\n        };\n        measurement[`count`] = counter.getCount() || 0;\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, counter),\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Gauge}.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): CarbonData {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const measurement: any = {\n            group: gauge.getGroup(),\n            name: gauge.getName(),\n        };\n        measurement[`value`] = gauge.getValue() || 0;\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, gauge),\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Histogram}.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): CarbonData {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const measurement: any = {\n            group: histogram.getGroup(),\n            name: histogram.getName(),\n        };\n        measurement[`count`] = histogram.getCount() || 0;\n        measurement[`max`] = this.getNumber(snapshot.getMax());\n        measurement[`mean`] = this.getNumber(snapshot.getMean());\n        measurement[`min`] = this.getNumber(snapshot.getMin());\n        measurement[`p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, histogram),\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Meter}.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): CarbonData {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const measurement: any = {\n            group: meter.getGroup(),\n            name: meter.getName(),\n        };\n        measurement[`count`] = meter.getCount() || 0;\n        measurement[`m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        measurement[`m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        measurement[`m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        measurement[`mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, meter),\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Timer}.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): CarbonData {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const measurement: any = {\n            group: timer.getGroup(),\n            name: timer.getName(),\n        };\n        measurement[`count`] = timer.getCount() || 0;\n        measurement[`m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        measurement[`m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        measurement[`m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        measurement[`max`] = this.getNumber(snapshot.getMax());\n        measurement[`mean`] = this.getNumber(snapshot.getMean());\n        measurement[`mean_rate`] = this.getNumber(timer.getMeanRate());\n        measurement[`min`] = this.getNumber(snapshot.getMin());\n        measurement[`p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, timer),\n        };\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CarbonMetricReporter.html":{"url":"classes/CarbonMetricReporter.html","title":"class - CarbonMetricReporter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CarbonMetricReporter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/CarbonMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Metric reporter for graphite / carbon.\n\n            \n\n            \n                Extends\n            \n            \n                    ScheduledMetricReporter\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                logMetadata\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getLog\n                            \n                            \n                                    Protected\n                                handleResults\n                            \n                            \n                                    Protected\n                                reportCounter\n                            \n                            \n                                    Protected\n                                reportGauge\n                            \n                            \n                                    Protected\n                                reportHistogram\n                            \n                            \n                                    Protected\n                                reportMeter\n                            \n                            \n                                    Protected\n                                reportTimer\n                            \n                            \n                                    Public\n                                setLog\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/CarbonMetricReporter.ts:95\n                            \n                        \n\n                \n                    \n                            Creates an instance of CarbonMetricReporter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            client\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        client:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/CarbonMetricReporter.ts:95\n                            \n                        \n\n                \n                    \n                        Graphite / carbon client instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logMetadata:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/CarbonMetricReporter.ts:87\n                            \n                        \n\n                \n                    \n                        Metadata for the logger.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getLog\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getLog()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/CarbonMetricReporter.ts:177\n                            \n                        \n\n\n                \n                    \n                            Gets the logger instance.\n\n\n                            \n                            \n                            \n                                Returns :     Logger\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            handleResults\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        handleResults(ctx: OverallReportContext, registry: MetricRegistry, timestamp: Date, type: MetricType, results: Array>)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/CarbonMetricReporter.ts:224\n                            \n                        \n\n\n                \n                    \n                            Uses the client instance to report the given metric results.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ctx\n                                                        \n                                                                    OverallReportContext\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        registry\n                                                        \n                                                                    MetricRegistry\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        timestamp\n                                                        \n                                                                    Date\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        type\n                                                        \n                                                                    MetricType\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        results\n                                                        \n                                                                    Array>\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            reportCounter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reportCounter(counter: MonotoneCounter | Counter, ctx: MetricSetReportContext)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/CarbonMetricReporter.ts:252\n                            \n                        \n\n\n                \n                    \n                            Builds the CarbonData for the specified Counter or MonotoneCounter.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        counter\n                                                        \n                                                                    MonotoneCounter | Counter\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        ctx\n                                                        \n                                                                    MetricSetReportContext\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     CarbonData\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            reportGauge\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reportGauge(gauge: Gauge, ctx: MetricSetReportContext>)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/CarbonMetricReporter.ts:280\n                            \n                        \n\n\n                \n                    \n                            Builds the CarbonData for the specified Gauge.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gauge\n                                                        \n                                                                    Gauge\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        ctx\n                                                        \n                                                                    MetricSetReportContext>\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     CarbonData\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            reportHistogram\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reportHistogram(histogram: Histogram, ctx: MetricSetReportContext)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/CarbonMetricReporter.ts:306\n                            \n                        \n\n\n                \n                    \n                            Builds the CarbonData for the specified Histogram.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        histogram\n                                                        \n                                                                    Histogram\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        ctx\n                                                        \n                                                                    MetricSetReportContext\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     CarbonData\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            reportMeter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reportMeter(meter: Meter, ctx: MetricSetReportContext)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/CarbonMetricReporter.ts:343\n                            \n                        \n\n\n                \n                    \n                            Builds the CarbonData for the specified Meter.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        meter\n                                                        \n                                                                    Meter\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        ctx\n                                                        \n                                                                    MetricSetReportContext\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     CarbonData\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            reportTimer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reportTimer(timer: Timer, ctx: MetricSetReportContext)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/CarbonMetricReporter.ts:373\n                            \n                        \n\n\n                \n                    \n                            Builds the CarbonData for the specified Timer.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        timer\n                                                        \n                                                                    Timer\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        ctx\n                                                        \n                                                                    MetricSetReportContext\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     CarbonData\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setLog\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setLog(log: Logger)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/CarbonMetricReporter.ts:187\n                            \n                        \n\n\n                \n                    \n                            Sets the logger instance.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        log\n                                                        \n                                                                    Logger\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            start\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        start()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/CarbonMetricReporter.ts:196\n                            \n                        \n\n\n                \n                    \n                            Uses the scheduler function to trigger periodical reporting.\n\n\n                            \n                                Returns :     Promise\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/CarbonMetricReporter.ts:206\n                            \n                        \n\n\n                \n                    \n                            Stops the timer reference returned by the scheduler function.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Graphite / carbon client module.\n */\nconst graphite = require(\"graphite\");\n\nimport {\n    Clock,\n    Counter,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    Scheduler,\n    StdClock,\n    Tags,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\nexport interface CarbonMetricReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * The graphite / carbon host.\n     *\n     * @type {string}\n     * @memberof CarbonMetricReporterOptions\n     */\n    readonly host: string;\n    /**\n     * Minimal logger interface to report failures.\n     *\n     * @type {Logger}\n     * @memberof CarbonMetricReporterOptions\n     */\n    log: Logger;\n}\n\n/**\n * Helper interface for representing the result of a metric report.\n *\n * @export\n * @interface CarbonData\n */\nexport interface CarbonData {\n    /**\n     * Document that is getting sent to the carbon / graphite server.\n     *\n     * @type {*}\n     * @memberof CarbonData\n     */\n    measurement: any;\n    /**\n     * Combined tags for the metric.\n     *\n     * @type {Tags}\n     * @memberof CarbonData\n     */\n    tags: Tags;\n}\n\n/**\n * Metric reporter for graphite / carbon.\n *\n * @export\n * @class CarbonMetricReporter\n * @extends {MetricReporter}\n */\nexport class CarbonMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * Graphite / carbon client instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private client: any;\n\n    /**\n     * Creates an instance of CarbonMetricReporter.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public constructor({\n        host,\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: {\n        /**\n         * The graphite / carbon host.\n         * @type {string}\n         */\n        host: string,\n        /**\n         * The logger instance used to report metrics.\n         * @type {Logger}\n         */\n        log?: Logger,\n        /**\n         * Reporting interval in the time-unit of {@link #unit}.\n         * @type {number}\n         */\n        reportInterval?: number;\n        /**\n         * The time-unit of the reporting interval.\n         * @type {TimeUnit}\n         */\n        unit?: TimeUnit;\n        /**\n         * The clock instance used determine the current time.\n         * @type {Clock}\n         */\n        clock?: Clock;\n        /**\n         * The scheduler function used to trigger reporting.\n         * @type {Scheduler}\n         */\n        scheduler?: Scheduler;\n        /**\n         * The timeout in which a metrics gets reported wether it's value has changed or not.\n         * @type {number}\n         */\n        minReportingTimeout?: number;\n        /**\n         * Common tags for this reporter instance.\n         * @type {Map}\n         */\n        tags?: Map;\n    }) {\n        super({\n            clock,\n            host,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            tags,\n            unit,\n        });\n\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof CarbonMetricReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {Logger} log\n     * @memberof CarbonMetricReporter\n     */\n    public setLog(log: Logger): void {\n        this.options.log = log;\n    }\n\n    /**\n     * Uses the scheduler function to trigger periodical reporting.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public start(): Promise {\n        this.client = graphite.createClient(this.options.host);\n        return super.start();\n    }\n\n    /**\n     * Stops the timer reference returned by the scheduler function.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public stop(): void {\n        super.stop();\n        if (this.client) {\n            this.client.end();\n        }\n    }\n\n    /**\n     * Uses the client instance to report the given metric results.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @param {Date} timestamp\n     * @param {MetricType} type\n     * @param {ReportingResult[]} results\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    protected handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        timestamp: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        return Promise.all(results\n            .map((result) => result.result)\n            .map((carbonData) => new Promise((resolve, reject) => {\n                this.client.writeTagged(carbonData.measurement, carbonData.tags, timestamp, (err: any) => {\n                    if (err != null) {\n                        this.options.log.error(err, this.logMetadata);\n                        reject(err);\n                    }\n                    resolve();\n                });\n            })));\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Counter} or {@link MonotoneCounter}.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): CarbonData {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const measurement: any = {\n            group: counter.getGroup(),\n            name: counter.getName(),\n        };\n        measurement[`count`] = counter.getCount() || 0;\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, counter),\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Gauge}.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): CarbonData {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const measurement: any = {\n            group: gauge.getGroup(),\n            name: gauge.getName(),\n        };\n        measurement[`value`] = gauge.getValue() || 0;\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, gauge),\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Histogram}.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): CarbonData {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const measurement: any = {\n            group: histogram.getGroup(),\n            name: histogram.getName(),\n        };\n        measurement[`count`] = histogram.getCount() || 0;\n        measurement[`max`] = this.getNumber(snapshot.getMax());\n        measurement[`mean`] = this.getNumber(snapshot.getMean());\n        measurement[`min`] = this.getNumber(snapshot.getMin());\n        measurement[`p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, histogram),\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Meter}.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): CarbonData {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const measurement: any = {\n            group: meter.getGroup(),\n            name: meter.getName(),\n        };\n        measurement[`count`] = meter.getCount() || 0;\n        measurement[`m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        measurement[`m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        measurement[`m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        measurement[`mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, meter),\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Timer}.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): CarbonData {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const measurement: any = {\n            group: timer.getGroup(),\n            name: timer.getName(),\n        };\n        measurement[`count`] = timer.getCount() || 0;\n        measurement[`m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        measurement[`m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        measurement[`m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        measurement[`max`] = this.getNumber(snapshot.getMax());\n        measurement[`mean`] = this.getNumber(snapshot.getMean());\n        measurement[`mean_rate`] = this.getNumber(timer.getMeanRate());\n        measurement[`min`] = this.getNumber(snapshot.getMin());\n        measurement[`p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, timer),\n        };\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CarbonMetricReporterOptions.html":{"url":"interfaces/CarbonMetricReporterOptions.html","title":"interface - CarbonMetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CarbonMetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/CarbonMetricReporter.ts\n        \n\n\n            \n                Extends\n            \n            \n                    ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        host\n                                \n                                \n                                        log\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                    \n                                \n                                \n                                    \n                                        host:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The graphite / carbon host.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                    \n                                \n                                \n                                    \n                                        log:     Logger\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Logger\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Minimal logger interface to report failures.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Graphite / carbon client module.\n */\nconst graphite = require(\"graphite\");\n\nimport {\n    Clock,\n    Counter,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    Scheduler,\n    StdClock,\n    Tags,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\nexport interface CarbonMetricReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * The graphite / carbon host.\n     *\n     * @type {string}\n     * @memberof CarbonMetricReporterOptions\n     */\n    readonly host: string;\n    /**\n     * Minimal logger interface to report failures.\n     *\n     * @type {Logger}\n     * @memberof CarbonMetricReporterOptions\n     */\n    log: Logger;\n}\n\n/**\n * Helper interface for representing the result of a metric report.\n *\n * @export\n * @interface CarbonData\n */\nexport interface CarbonData {\n    /**\n     * Document that is getting sent to the carbon / graphite server.\n     *\n     * @type {*}\n     * @memberof CarbonData\n     */\n    measurement: any;\n    /**\n     * Combined tags for the metric.\n     *\n     * @type {Tags}\n     * @memberof CarbonData\n     */\n    tags: Tags;\n}\n\n/**\n * Metric reporter for graphite / carbon.\n *\n * @export\n * @class CarbonMetricReporter\n * @extends {MetricReporter}\n */\nexport class CarbonMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * Graphite / carbon client instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private client: any;\n\n    /**\n     * Creates an instance of CarbonMetricReporter.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public constructor({\n        host,\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: {\n        /**\n         * The graphite / carbon host.\n         * @type {string}\n         */\n        host: string,\n        /**\n         * The logger instance used to report metrics.\n         * @type {Logger}\n         */\n        log?: Logger,\n        /**\n         * Reporting interval in the time-unit of {@link #unit}.\n         * @type {number}\n         */\n        reportInterval?: number;\n        /**\n         * The time-unit of the reporting interval.\n         * @type {TimeUnit}\n         */\n        unit?: TimeUnit;\n        /**\n         * The clock instance used determine the current time.\n         * @type {Clock}\n         */\n        clock?: Clock;\n        /**\n         * The scheduler function used to trigger reporting.\n         * @type {Scheduler}\n         */\n        scheduler?: Scheduler;\n        /**\n         * The timeout in which a metrics gets reported wether it's value has changed or not.\n         * @type {number}\n         */\n        minReportingTimeout?: number;\n        /**\n         * Common tags for this reporter instance.\n         * @type {Map}\n         */\n        tags?: Map;\n    }) {\n        super({\n            clock,\n            host,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            tags,\n            unit,\n        });\n\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof CarbonMetricReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {Logger} log\n     * @memberof CarbonMetricReporter\n     */\n    public setLog(log: Logger): void {\n        this.options.log = log;\n    }\n\n    /**\n     * Uses the scheduler function to trigger periodical reporting.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public start(): Promise {\n        this.client = graphite.createClient(this.options.host);\n        return super.start();\n    }\n\n    /**\n     * Stops the timer reference returned by the scheduler function.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public stop(): void {\n        super.stop();\n        if (this.client) {\n            this.client.end();\n        }\n    }\n\n    /**\n     * Uses the client instance to report the given metric results.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @param {Date} timestamp\n     * @param {MetricType} type\n     * @param {ReportingResult[]} results\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    protected handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        timestamp: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        return Promise.all(results\n            .map((result) => result.result)\n            .map((carbonData) => new Promise((resolve, reject) => {\n                this.client.writeTagged(carbonData.measurement, carbonData.tags, timestamp, (err: any) => {\n                    if (err != null) {\n                        this.options.log.error(err, this.logMetadata);\n                        reject(err);\n                    }\n                    resolve();\n                });\n            })));\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Counter} or {@link MonotoneCounter}.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): CarbonData {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const measurement: any = {\n            group: counter.getGroup(),\n            name: counter.getName(),\n        };\n        measurement[`count`] = counter.getCount() || 0;\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, counter),\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Gauge}.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): CarbonData {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const measurement: any = {\n            group: gauge.getGroup(),\n            name: gauge.getName(),\n        };\n        measurement[`value`] = gauge.getValue() || 0;\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, gauge),\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Histogram}.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): CarbonData {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const measurement: any = {\n            group: histogram.getGroup(),\n            name: histogram.getName(),\n        };\n        measurement[`count`] = histogram.getCount() || 0;\n        measurement[`max`] = this.getNumber(snapshot.getMax());\n        measurement[`mean`] = this.getNumber(snapshot.getMean());\n        measurement[`min`] = this.getNumber(snapshot.getMin());\n        measurement[`p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, histogram),\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Meter}.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): CarbonData {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const measurement: any = {\n            group: meter.getGroup(),\n            name: meter.getName(),\n        };\n        measurement[`count`] = meter.getCount() || 0;\n        measurement[`m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        measurement[`m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        measurement[`m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        measurement[`mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, meter),\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Timer}.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): CarbonData {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const measurement: any = {\n            group: timer.getGroup(),\n            name: timer.getName(),\n        };\n        measurement[`count`] = timer.getCount() || 0;\n        measurement[`m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        measurement[`m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        measurement[`m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        measurement[`max`] = this.getNumber(snapshot.getMax());\n        measurement[`mean`] = this.getNumber(snapshot.getMean());\n        measurement[`mean_rate`] = this.getNumber(timer.getMeanRate());\n        measurement[`min`] = this.getNumber(snapshot.getMin());\n        measurement[`p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, timer),\n        };\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n[Unreleased]\n[2.0.0] - 2018-11-04\nAdded\n\nCHANGELOG\ncompile and test script for different node versions\n\nChanged\n\nadded nodejs 11 to travis.yml\nupdated dependencies\nuse inspector-metrics@1.13.0\nadapted new MetricLogger implementation\ncompile target from \"es2017\" to \"es6\"\n\n[1.1.0] - 2018-10-04\nAdded\n\nsupport for monotone counters\n\"description\" & \"homepage\" to package.json\njsdocs for components\n\nChanged\n\nfixed linting config\nrefactored playground\nupdated dependencies\nuse inspector-metrics@1.11.0\nrefactored build scripts\nuse compodoc as documentation tool\n\n[1.0.1] - 2018-07-08\nChanged\n\nupdated dependencies\nuse inspector-metrics@1.8.7\nadded nodejs 10 to travis.yml\n\n[1.0.0] - 2018-02-08\nInitial commit.\nAdded\n\nproject setup\nREADME\ntypescript config\nlint config\n\n\nlicensed under MIT license\nbasic carbon / graphite reporter\nmocha testing (with chai, sinon)\nJenkins pipeline\nNYC code-coverage config\nadded editorconfig file\ntravis.yml for nodejs 6, 7, 8, 9\nbasic playground setup\nuse inspector-metrics@1.8.3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            \n                class\n            \n            \n                CarbonMetricReporter\n            \n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            \n                interface\n            \n            \n                CarbonData\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            \n                interface\n            \n            \n                CarbonMetricReporterOptions\n            \n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            \n                variable\n            \n            \n                graphite\n            \n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            graphite : 0.1.3\n        \n            inspector-metrics : 1.13.0\n        \n            source-map-support : 0.5.9\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-carbon\nTypescript Metrics Reporter for\ngraphite carbon.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with typescript / nodejs.It uses node-graphite as graphite/carbon client.\ninstall\nnpm install --save inspector-carbon\nbasic usage\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter(\"plaintext://graphite:2003/\");\nconst registry: MetricRegistry = new MetricRegistry();\n\n// add the registry to the reporter\nreporter.addMetricRegistry(registry);\n// start reporting\nreporter.start();set common tags for all metrics\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter(\"plaintext://graphite:2003/\");\n\n// set common tags for all metrics\nreporter.getTags().set(\"app-name\", \"my-service\");\nreporter.getTags().set(\"app-version\", \"v1.2.3\");dev\nusing the playground\nTo use the playground you need to have docker and docker-compose installed.\nnpm run compile\n# running playground script\nplayground/playground.shview data in grafana\n\nNavigate to http://localhost:3000\nAdd a new Data Source (type: graphite, username / password: root/root, host / url: http://graphite/)\nCreate a new graph\n\nLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            graphite   (lib/.../CarbonMetricReporter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/CarbonMetricReporter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            graphite\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        graphite:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"graphite\")\n                        \n                    \n\n                \n                    \n                        Graphite / carbon client module.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
