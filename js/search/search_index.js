var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/interfaces/CarbonData.html",[0,0.866,1,1.088]],["body/interfaces/CarbonData.html",[0,1.012,1,1.785,2,0.523,3,0.666,4,0.877,5,0.331,6,0.417,7,0.666,8,1.117,9,1.117,10,0.055,11,2.56,12,1.88,13,0.417,14,1.117,15,2.658,16,2.335,17,2.222,18,0.093,19,1.117,20,0.556,21,1.117,22,1.075,23,0.679,24,0.877,25,1.117,26,0.877,27,1.326,28,0.666,29,1.055,30,0.417,31,2.309,32,0.523,33,2.161,34,2.161,35,1.012,36,2.267,37,2.034,38,2.658,39,2.161,40,1.133,41,2.501,42,1.442,43,1.117,44,1.688,45,1.117,46,1.117,47,1.117,48,1.117,49,2.357,50,1.117,51,2.267,52,1.442,53,0.331,54,0.839,55,1.88,56,0.902,57,1.442,58,1.598,59,2.034,60,2.855,61,0.666,62,0.666,63,0.666,64,2.034,65,0.698,66,0.698,67,1.769,68,0.666,69,0.666,70,1.688,71,0.666,72,1.781,73,0.666,74,2.161,75,0.666,76,0.666,77,1.688,78,0.666,79,1.351,80,0.564,81,0.666,82,1.442,83,0.523,84,1.133,85,1.055,86,1.117,87,1.442,88,2.611,89,1.688,90,0.666,91,0.666,92,1.442,93,1.117,94,0.666,95,1.117,96,0.666,97,0.666,98,0.666,99,1.964,100,0.523,101,0.523,102,0.666,103,1.117,104,2.434,105,0.666,106,2.77,107,1.442,108,0.666,109,2.77,110,0.666,111,0.666,112,0.666,113,2.267,114,1.688,115,0.666,116,0.666,117,0.666,118,1.442,119,1.117,120,0.666,121,2.357,122,1.133,123,1.133,124,0.666,125,0.666,126,0.666,127,0.666,128,0.877,129,0.666,130,0.417,131,1.117,132,0.666,133,0.666,134,0.666,135,0.666,136,0.666,137,0.523,138,0.666,139,0.666,140,0.666,141,0.046,142,2.658,143,1.442,144,0.666,145,2.501,146,0.666,147,0.666,148,0.666,149,0.666,150,0.666,151,0.666,152,0.666,153,0.666,154,0.666,155,1.117,156,0.666,157,0.666,158,0.666,159,2.034,160,1.88,161,0.666,162,1.117,163,1.88,164,2.161,165,1.88,166,0.666,167,1.88,168,0.666,169,1.88,170,0.666,171,1.688,172,1.88,173,0.666,174,1.117,175,0.666,176,0.666,177,0.666,178,0.666,179,0.666,180,1.117,181,1.117,182,0.666,183,0.666,184,0.666,185,0.666,186,1.117,187,1.117,188,1.117,189,1.117,190,1.117,191,1.117,192,1.117,193,1.117,194,1.117,195,1.117,196,1.117,197,1.117,198,1.117,199,1.117,200,1.117,201,1.117,202,1.117,203,1.117,204,1.117,205,1.117,206,0.666,207,1.117,208,0.666,209,0.666,210,0.666,211,1.117,212,0.666,213,1.117,214,0.666,215,1.117,216,0.666,217,1.117,218,0.666,219,0.666,220,1.117,221,0.666,222,0.666,223,0.666,224,0.666,225,0.666,226,0.666,227,0.666,228,0.666,229,0.523,230,0.666,231,0.666,232,0.666,233,0.666,234,0.03]],["title/interfaces/CarbonMetricReporterOptions.html",[0,0.866,56,1.088]],["body/interfaces/CarbonMetricReporterOptions.html",[0,1.013,1,1.77,2,0.525,3,0.668,4,0.879,5,0.332,6,0.418,8,0.668,9,0.668,10,0.051,11,2.436,12,1.883,13,0.418,14,1.119,15,2.503,16,2.243,17,2.223,18,0.093,19,0.668,20,0.332,21,0.668,22,1.076,23,0.68,24,0.525,25,0.668,26,0.879,27,1.328,28,0.668,29,1.057,30,0.418,31,2.31,32,0.525,33,2.163,34,2.163,35,1.013,36,2.269,37,2.037,38,2.772,39,2.163,40,1.135,41,2.503,42,1.445,43,1.119,44,1.69,45,1.119,46,1.119,47,1.119,48,1.445,49,2.359,50,1.119,51,2.269,52,1.445,53,0.332,54,0.841,55,1.883,56,1.057,57,1.69,58,1.914,59,2.269,60,2.856,61,0.668,62,1.119,63,1.119,64,2.359,65,0.7,66,0.7,67,1.77,68,0.668,69,0.668,70,1.69,71,0.668,72,1.783,73,0.668,74,2.163,75,0.668,76,0.668,77,1.69,78,0.668,79,1.353,80,0.565,81,0.668,82,1.445,83,0.525,84,1.135,85,1.057,86,1.119,87,1.445,88,2.614,89,1.69,90,0.668,91,0.668,92,1.445,93,1.119,94,0.668,95,1.119,96,0.668,97,0.668,98,0.668,99,1.966,100,0.525,101,0.525,102,0.668,103,1.119,104,2.436,105,0.668,106,2.772,107,1.445,108,0.668,109,2.772,110,0.668,111,0.668,112,0.668,113,2.269,114,1.69,115,0.668,116,0.668,117,0.668,118,1.445,119,1.119,120,0.668,121,2.359,122,1.135,123,1.135,124,0.668,125,0.668,126,0.668,127,0.668,128,0.879,129,0.668,130,0.418,131,1.119,132,0.668,133,0.668,134,0.668,135,0.668,136,0.668,137,0.525,138,0.668,139,0.668,140,0.668,141,0.046,142,2.66,143,1.445,144,0.668,145,2.503,146,0.668,147,0.668,148,0.668,149,0.668,150,0.668,151,0.668,152,0.668,153,0.668,154,0.668,155,1.119,156,0.668,157,0.668,158,0.668,159,2.037,160,1.883,161,0.668,162,1.119,163,1.883,164,2.163,165,1.883,166,0.668,167,1.883,168,0.668,169,1.883,170,0.668,171,1.69,172,1.883,173,0.668,174,1.119,175,0.668,176,0.668,177,0.668,178,0.668,179,0.668,180,1.119,181,1.119,182,0.668,183,0.668,184,0.668,185,0.668,186,1.119,187,1.119,188,1.119,189,1.119,190,1.119,191,1.119,192,1.119,193,1.119,194,1.119,195,1.119,196,1.119,197,1.119,198,1.119,199,1.119,200,1.119,201,1.119,202,1.119,203,1.119,204,1.119,205,1.119,206,0.668,207,1.119,208,0.668,209,0.668,210,0.668,211,1.119,212,0.668,213,1.119,214,0.668,215,1.119,216,0.668,217,1.119,218,0.668,219,0.668,220,1.119,221,0.668,222,0.668,223,0.668,224,0.668,225,0.668,226,0.668,227,0.668,228,0.668,229,0.525,230,0.668,231,0.668,232,0.668,233,0.668,234,0.03]],["title/changelog.html",[20,0.738,235,1.166,236,1.485]],["body/changelog.html",[5,1.133,7,1.7,10,0.046,18,0.078,22,0.846,23,0.509,35,0.846,53,1.521,54,0.846,65,1.063,80,0.89,85,1.063,100,2.402,130,1.063,137,1.336,141,0.046,234,0.062,236,2.569,237,2.254,238,2.254,239,3.406,240,2.254,241,2.254,242,2.254,243,2.254,244,2.254,245,2.254,246,2.254,247,2.254,248,2.254,249,2.254,250,3.02,251,3.406,252,2.402,253,2.254,254,3.794,255,2.248,256,2.254,257,3.057,258,3.988,259,2.254,260,2.254,261,2.254,262,2.254,263,2.254,264,2.254,265,4.105,266,2.254,267,1.7,268,3.02,269,2.254,270,2.254,271,2.254,272,1.7,273,1.7,274,2.254,275,2.254,276,2.254,277,2.254,278,2.254,279,2.278,280,1.7,281,3.638,282,2.745,283,3.406,284,2.254,285,3.02,286,2.254,287,3.406,288,2.254,289,2.254,290,3.02,291,3.02,292,1.063,293,1.7,294,2.254,295,1.7,296,2.254,297,3.406,298,2.254,299,2.254,300,2.254,301,2.254,302,2.254,303,2.254,304,2.254,305,2.254,306,3.02,307,2.254,308,2.254,309,2.254,310,2.254,311,2.254,312,2.254,313,2.254,314,3.638,315,2.254,316,1.7,317,2.254,318,2.254,319,1.336,320,2.254,321,2.254,322,2.254,323,2.254,324,2.254,325,2.254,326,2.254,327,3.02,328,1.7,329,2.254,330,2.254,331,2.254,332,1.336,333,1.063,334,2.278,335,2.254,336,2.254,337,2.254,338,2.254,339,2.254,340,2.254,341,2.254,342,2.254,343,1.063,344,2.254,345,2.254,346,2.254,347,2.254,348,2.254,349,2.254]],["title/coverage.html",[343,1.447]],["body/coverage.html",[0,1.412,1,1.508,5,1.2,6,1.948,10,0.065,17,1.895,18,0.087,23,0.723,56,1.508,66,1.508,67,1.508,80,0.943,141,0.065,234,0.077,319,1.895,343,1.508,350,3.198,351,2.412,352,4.001,353,3.198,354,3.198,355,3.198,356,3.198,357,3.198,358,3.198,359,2.412,360,2.412]],["title/dependencies.html",[255,1.631,361,1.968]],["body/dependencies.html",[4,1.959,10,0.068,18,0.088,23,0.747,27,1.959,53,1.44,54,1.44,141,0.068,234,0.079,255,2.274,267,2.494,279,2.494,362,3.306,363,3.306,364,3.306,365,3.306]],["title/index.html",[13,0.928,20,0.738,235,1.166]],["body/index.html",[10,0.047,16,1.809,18,0.091,22,1.561,23,0.862,24,2.035,26,2.325,29,1.081,30,1.081,31,2.26,35,1.374,40,2.26,53,1.545,54,1.503,58,2.035,65,1.919,67,1.943,72,2.035,80,1.125,84,1.358,85,1.081,101,1.809,122,1.809,123,1.358,128,1.358,130,1.081,141,0.047,229,1.358,234,0.063,252,1.358,272,1.729,273,1.729,280,1.729,282,2.591,292,1.44,293,1.729,295,2.304,316,1.729,328,1.729,332,1.358,333,1.081,334,1.729,366,2.292,367,2.292,368,2.292,369,2.292,370,2.292,371,3.054,372,2.292,373,2.292,374,2.292,375,3.434,376,2.292,377,2.292,378,2.292,379,3.054,380,2.292,381,2.292,382,2.292,383,2.292,384,2.292,385,2.292,386,2.292,387,2.292,388,2.292,389,2.292,390,2.292,391,2.292,392,2.292,393,3.054,394,2.292,395,2.292,396,2.292,397,2.292,398,3.054,399,2.292,400,3.434,401,3.434,402,2.292,403,2.292,404,2.292,405,2.292,406,2.292,407,2.292,408,2.292,409,2.292,410,2.292,411,2.292,412,2.292]],["title/license.html",[20,0.738,235,1.166,333,0.928]],["body/license.html",[10,0.058,18,0.071,35,1.056,141,0.058,234,0.071,252,2.066,257,2.124,319,1.668,332,1.668,333,1.328,413,3.786,414,2.816,415,3.486,416,2.816,417,2.816,418,2.816,419,2.816,420,2.816,421,2.816,422,3.486,423,4.278,424,2.816,425,2.816,426,2.816,427,3.786,428,2.816,429,3.486,430,2.816,431,2.816,432,2.816,433,2.816,434,2.816,435,2.816,436,2.816,437,2.816,438,2.816,439,3.486,440,2.816,441,2.816,442,2.816,443,2.816,444,2.816,445,2.816,446,2.816,447,3.486,448,3.486,449,2.816,450,2.816,451,2.816,452,2.816,453,2.816,454,2.816,455,2.816,456,2.816,457,2.816,458,2.816,459,2.816,460,2.816,461,2.816,462,2.816,463,2.816,464,2.816,465,2.816,466,2.816,467,2.816,468,2.816,469,2.816,470,2.816,471,2.816,472,2.816,473,2.816,474,2.816,475,2.816,476,2.816,477,2.816,478,2.816]],["title/modules.html",[479,2.314]],["body/modules.html",[10,0.071,18,0.081,141,0.071,234,0.081,479,2.608]],["title/overview.html",[480,2.314]],["body/overview.html",[2,2.028,10,0.07,18,0.08,66,1.614,83,2.028,141,0.07,234,0.08,480,2.581,481,3.422]],["title/unit-test.html",[79,1.177,292,1.177]],["body/unit-test.html",[5,1.265,10,0.069,18,0.079,79,1.59,80,0.994,141,0.069,234,0.079,292,1.59,343,1.59,351,2.543,359,2.543,360,2.543,482,3.371,483,3.371,484,3.371]],["title/miscellaneous/variables.html",[485,1.485,486,2.076]],["body/miscellaneous/variables.html",[6,1.571,10,0.068,13,1.571,18,0.086,22,1.249,23,0.919,29,1.571,30,1.571,32,1.973,99,1.973,141,0.068,234,0.079,485,2.512,486,2.512,487,3.33,488,3.33]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":172,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["0.1.4",{"_index":362,"title":{},"body":{"dependencies.html":{}}}],["0.5.10",{"_index":364,"title":{},"body":{"dependencies.html":{}}}],["02",{"_index":250,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":290,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":322,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":251,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":83,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"overview.html":{}}}],["1.0.0",{"_index":324,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":321,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":305,"title":{},"body":{"changelog.html":{}}}],["1.16.x",{"_index":365,"title":{},"body":{"dependencies.html":{}}}],["1.17.2",{"_index":363,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":358,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":306,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":352,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":78,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["11",{"_index":258,"title":{},"body":{"changelog.html":{}}}],["17/17",{"_index":353,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":481,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":289,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":277,"title":{},"body":{"changelog.html":{}}}],["2.1.1",{"_index":269,"title":{},"body":{"changelog.html":{}}}],["2.1.2",{"_index":263,"title":{},"body":{"changelog.html":{}}}],["2.2.0",{"_index":256,"title":{},"body":{"changelog.html":{}}}],["2.2.1",{"_index":248,"title":{},"body":{"changelog.html":{}}}],["2/3",{"_index":356,"title":{},"body":{"coverage.html":{}}}],["2018",{"_index":257,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2019",{"_index":249,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":278,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":270,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":264,"title":{},"body":{"changelog.html":{}}}],["3.3.4",{"_index":276,"title":{},"body":{"changelog.html":{}}}],["3/3",{"_index":354,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":259,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":345,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":355,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":346,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":347,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":348,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":446,"title":{},"body":{"license.html":{}}}],["action",{"_index":471,"title":{},"body":{"license.html":{}}}],["ad",{"_index":382,"title":{},"body":{"index.html":{}}}],["adapted",{"_index":299,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":376,"title":{},"body":{"index.html":{}}}],["added",{"_index":265,"title":{},"body":{"changelog.html":{}}}],["adheres",{"_index":244,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":437,"title":{},"body":{"license.html":{}}}],["applied",{"_index":260,"title":{},"body":{"changelog.html":{}}}],["arising",{"_index":475,"title":{},"body":{"license.html":{}}}],["array",{"_index":146,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["associated",{"_index":424,"title":{},"body":{"license.html":{}}}],["async",{"_index":114,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["authors",{"_index":464,"title":{},"body":{"license.html":{}}}],["await",{"_index":123,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["based",{"_index":242,"title":{},"body":{"changelog.html":{}}}],["basic",{"_index":334,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["boots",{"_index":396,"title":{},"body":{"index.html":{}}}],["branches",{"_index":482,"title":{},"body":{"unit-test.html":{}}}],["build",{"_index":316,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["builds",{"_index":159,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["c",{"_index":414,"title":{},"body":{"license.html":{}}}],["carbon",{"_index":22,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["carbondata",{"_index":1,"title":{"interfaces/CarbonData.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{}}}],["carbondata.tags",{"_index":154,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["carbonmetricreporter",{"_index":67,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"index.html":{}}}],["carbonmetricreporteroptions",{"_index":56,"title":{"interfaces/CarbonMetricReporterOptions.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{}}}],["chai",{"_index":337,"title":{},"body":{"changelog.html":{}}}],["changed",{"_index":100,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{}}}],["changelog",{"_index":236,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":238,"title":{},"body":{"changelog.html":{}}}],["charge",{"_index":419,"title":{},"body":{"license.html":{}}}],["claim",{"_index":467,"title":{},"body":{"license.html":{}}}],["class",{"_index":66,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"overview.html":{}}}],["client",{"_index":29,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["clock",{"_index":33,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["code",{"_index":342,"title":{},"body":{"changelog.html":{}}}],["combined",{"_index":25,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["commit",{"_index":326,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":101,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["compile",{"_index":291,"title":{},"body":{"changelog.html":{}}}],["compodoc",{"_index":318,"title":{},"body":{"changelog.html":{}}}],["components",{"_index":312,"title":{},"body":{"changelog.html":{}}}],["compose",{"_index":394,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":445,"title":{},"body":{"license.html":{}}}],["config",{"_index":314,"title":{},"body":{"changelog.html":{}}}],["connection",{"_index":477,"title":{},"body":{"license.html":{}}}],["console",{"_index":76,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["const",{"_index":31,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["constructor",{"_index":75,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["contract",{"_index":472,"title":{},"body":{"license.html":{}}}],["copies",{"_index":439,"title":{},"body":{"license.html":{}}}],["copy",{"_index":422,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":413,"title":{},"body":{"license.html":{}}}],["corner",{"_index":411,"title":{},"body":{"index.html":{}}}],["counter",{"_index":34,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["counter.getcount",{"_index":162,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["counter.getgroup",{"_index":166,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["counter.getname",{"_index":168,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["counters",{"_index":308,"title":{},"body":{"changelog.html":{}}}],["coverage",{"_index":343,"title":{"coverage.html":{}},"body":{"changelog.html":{},"coverage.html":{},"unit-test.html":{}}}],["creates",{"_index":73,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["ctx",{"_index":145,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["current",{"_index":91,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["damages",{"_index":468,"title":{},"body":{"license.html":{}}}],["dashboard",{"_index":401,"title":{},"body":{"index.html":{}}}],["data",{"_index":405,"title":{},"body":{"index.html":{}}}],["date",{"_index":118,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["deal",{"_index":426,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":478,"title":{},"body":{"license.html":{}}}],["default",{"_index":488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":255,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{}}}],["dependency",{"_index":268,"title":{},"body":{"changelog.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/CarbonData.html":{},"changelog.html":{}}}],["determine",{"_index":90,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["different",{"_index":294,"title":{},"body":{"changelog.html":{}}}],["distribute",{"_index":435,"title":{},"body":{"license.html":{}}}],["docker",{"_index":393,"title":{},"body":{"index.html":{}}}],["document",{"_index":19,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["documentation",{"_index":319,"title":{},"body":{"changelog.html":{},"coverage.html":{},"license.html":{}}}],["documented",{"_index":240,"title":{},"body":{"changelog.html":{}}}],["editorconfig",{"_index":344,"title":{},"body":{"changelog.html":{}}}],["env/boot.sh",{"_index":402,"title":{},"body":{"index.html":{}}}],["err",{"_index":155,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["es2017",{"_index":303,"title":{},"body":{"changelog.html":{}}}],["es6",{"_index":304,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":35,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event(\"application_started",{"_index":384,"title":{},"body":{"index.html":{}}}],["event.gettime",{"_index":119,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["events",{"_index":280,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["example",{"_index":400,"title":{},"body":{"index.html":{}}}],["examples",{"_index":284,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":55,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["express",{"_index":455,"title":{},"body":{"license.html":{}}}],["extends",{"_index":57,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["failures",{"_index":63,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"unit-test.html":{}}}],["files",{"_index":425,"title":{},"body":{"license.html":{}}}],["fitness",{"_index":460,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":283,"title":{},"body":{"changelog.html":{}}}],["flushevents",{"_index":127,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["following",{"_index":444,"title":{},"body":{"license.html":{}}}],["format",{"_index":241,"title":{},"body":{"changelog.html":{}}}],["free",{"_index":418,"title":{},"body":{"license.html":{}}}],["function",{"_index":92,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["functions",{"_index":483,"title":{},"body":{"unit-test.html":{}}}],["furnished",{"_index":442,"title":{},"body":{"license.html":{}}}],["gauge",{"_index":36,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["gauge.getgroup",{"_index":175,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["gauge.getname",{"_index":176,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["gauge.getvalue",{"_index":174,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["getlog",{"_index":105,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["getmetricname(metric",{"_index":230,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["gets",{"_index":95,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["getting",{"_index":20,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["given",{"_index":140,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["grafana",{"_index":398,"title":{},"body":{"index.html":{}}}],["granted",{"_index":417,"title":{},"body":{"license.html":{}}}],["graphite",{"_index":23,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["graphite.createclient(this.options.host",{"_index":132,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["graphite/carbon",{"_index":370,"title":{},"body":{"index.html":{}}}],["handleresults",{"_index":144,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["helper",{"_index":8,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["hereby",{"_index":416,"title":{},"body":{"license.html":{}}}],["histogram",{"_index":37,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["histogram.getcount",{"_index":180,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["histogram.getgroup",{"_index":183,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["histogram.getname",{"_index":184,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["histogram.getsnapshot",{"_index":182,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["hoc",{"_index":383,"title":{},"body":{"index.html":{}}}],["holders",{"_index":465,"title":{},"body":{"license.html":{}}}],["home",{"_index":412,"title":{},"body":{"index.html":{}}}],["homepage",{"_index":309,"title":{},"body":{"changelog.html":{}}}],["host",{"_index":58,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["http://graphite",{"_index":375,"title":{},"body":{"index.html":{}}}],["http://localhost:3000",{"_index":407,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":350,"title":{},"body":{"coverage.html":{}}}],["implementation",{"_index":301,"title":{},"body":{"changelog.html":{}}}],["implied",{"_index":456,"title":{},"body":{"license.html":{}}}],["import",{"_index":26,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["included",{"_index":449,"title":{},"body":{"license.html":{}}}],["including",{"_index":429,"title":{},"body":{"license.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["initial",{"_index":325,"title":{},"body":{"changelog.html":{}}}],["inspector",{"_index":53,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["install",{"_index":371,"title":{},"body":{"index.html":{}}}],["installed",{"_index":395,"title":{},"body":{"index.html":{}}}],["instance",{"_index":72,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"overview.html":{}}}],["interval",{"_index":86,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["isnan(value",{"_index":163,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["it's",{"_index":98,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["jenkins",{"_index":339,"title":{},"body":{"changelog.html":{}}}],["jsdocs",{"_index":311,"title":{},"body":{"changelog.html":{}}}],["keep",{"_index":243,"title":{},"body":{"changelog.html":{}}}],["kind",{"_index":454,"title":{},"body":{"license.html":{}}}],["left",{"_index":410,"title":{},"body":{"index.html":{}}}],["liability",{"_index":469,"title":{},"body":{"license.html":{}}}],["liable",{"_index":466,"title":{},"body":{"license.html":{}}}],["lib/.../carbonmetricreporter.ts",{"_index":487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/metrics/carbonmetricreporter.ts",{"_index":6,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["library",{"_index":366,"title":{},"body":{"index.html":{}}}],["license",{"_index":333,"title":{"license.html":{}},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["licensed",{"_index":330,"title":{},"body":{"changelog.html":{}}}],["limitation",{"_index":430,"title":{},"body":{"license.html":{}}}],["limited",{"_index":457,"title":{},"body":{"license.html":{}}}],["lines",{"_index":484,"title":{},"body":{"unit-test.html":{}}}],["link",{"_index":88,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["lint",{"_index":329,"title":{},"body":{"changelog.html":{}}}],["linting",{"_index":313,"title":{},"body":{"changelog.html":{}}}],["log",{"_index":64,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["logger",{"_index":38,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["logmetadata",{"_index":71,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["made",{"_index":367,"title":{},"body":{"index.html":{}}}],["map",{"_index":27,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"dependencies.html":{}}}],["map((carbondata",{"_index":150,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["map((result",{"_index":148,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["matching",{"_index":234,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["meant",{"_index":368,"title":{},"body":{"index.html":{}}}],["measurement",{"_index":15,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.count",{"_index":171,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.m15_rate",{"_index":211,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.m1_rate",{"_index":213,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.m5_rate",{"_index":215,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.max",{"_index":186,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.mean",{"_index":188,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.mean_rate",{"_index":217,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.min",{"_index":190,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p50",{"_index":192,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p75",{"_index":194,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p95",{"_index":196,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p98",{"_index":198,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p99",{"_index":200,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p999",{"_index":202,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.stddev",{"_index":204,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.value",{"_index":178,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["memberof",{"_index":60,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["merchantability",{"_index":459,"title":{},"body":{"license.html":{}}}],["merge",{"_index":433,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":69,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["meter",{"_index":39,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["meter.getcount",{"_index":207,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["meter.getgroup",{"_index":208,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["meter.getname",{"_index":209,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["method",{"_index":261,"title":{},"body":{"changelog.html":{}}}],["metric",{"_index":11,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metric.getgroup",{"_index":231,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metric.getgroup()}.${metric.getname",{"_index":232,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metric.getname",{"_index":233,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metriclogger",{"_index":300,"title":{},"body":{"changelog.html":{}}}],["metricregistry",{"_index":40,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["metricreporter",{"_index":68,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metrics",{"_index":54,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["metrics@1.11.0",{"_index":315,"title":{},"body":{"changelog.html":{}}}],["metrics@1.13.0",{"_index":298,"title":{},"body":{"changelog.html":{}}}],["metrics@1.15.0",{"_index":288,"title":{},"body":{"changelog.html":{}}}],["metrics@1.16.0",{"_index":271,"title":{},"body":{"changelog.html":{}}}],["metrics@1.16.x",{"_index":266,"title":{},"body":{"changelog.html":{}}}],["metrics@1.17.2",{"_index":253,"title":{},"body":{"changelog.html":{}}}],["metrics@1.8.3",{"_index":349,"title":{},"body":{"changelog.html":{}}}],["metrics@1.8.7",{"_index":323,"title":{},"body":{"changelog.html":{}}}],["metricsetreportcontext",{"_index":41,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metrictype",{"_index":42,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["millisecond",{"_index":43,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["minimal",{"_index":62,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["minreportingtimeout",{"_index":82,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["miscellaneous",{"_index":485,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mit",{"_index":332,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["mocha",{"_index":335,"title":{},"body":{"changelog.html":{}}}],["modify",{"_index":432,"title":{},"body":{"license.html":{}}}],["module",{"_index":30,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":479,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monotone",{"_index":307,"title":{},"body":{"changelog.html":{}}}],["monotonecounter",{"_index":44,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["name",{"_index":229,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["naming",{"_index":286,"title":{},"body":{"changelog.html":{}}}],["navigate",{"_index":406,"title":{},"body":{"index.html":{}}}],["need",{"_index":392,"title":{},"body":{"index.html":{}}}],["new",{"_index":80,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["node",{"_index":295,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nodejs",{"_index":281,"title":{},"body":{"changelog.html":{}}}],["nodejs.it",{"_index":369,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":463,"title":{},"body":{"license.html":{}}}],["notable",{"_index":237,"title":{},"body":{"changelog.html":{}}}],["nothing",{"_index":126,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["notice",{"_index":447,"title":{},"body":{"license.html":{}}}],["npm",{"_index":372,"title":{},"body":{"index.html":{}}}],["null",{"_index":121,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["number",{"_index":89,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["nyc",{"_index":341,"title":{},"body":{"changelog.html":{}}}],["obtaining",{"_index":421,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":474,"title":{},"body":{"license.html":{}}}],["out",{"_index":476,"title":{},"body":{"license.html":{}}}],["overallctx",{"_index":120,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["overallreportcontext",{"_index":45,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["overview",{"_index":480,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":361,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":310,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":109,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["particular",{"_index":461,"title":{},"body":{"license.html":{}}}],["peer",{"_index":267,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["periodical",{"_index":129,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["permission",{"_index":415,"title":{},"body":{"license.html":{}}}],["permit",{"_index":440,"title":{},"body":{"license.html":{}}}],["person",{"_index":420,"title":{},"body":{"license.html":{}}}],["persons",{"_index":441,"title":{},"body":{"license.html":{}}}],["pipeline",{"_index":340,"title":{},"body":{"changelog.html":{}}}],["playground",{"_index":282,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["playground.shview",{"_index":404,"title":{},"body":{"index.html":{}}}],["portions",{"_index":451,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":169,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["private",{"_index":70,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["project",{"_index":239,"title":{},"body":{"changelog.html":{}}}],["promise",{"_index":113,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["promise((resolve",{"_index":151,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["promise.all(results",{"_index":147,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["properties",{"_index":14,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["protected",{"_index":142,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["provided",{"_index":452,"title":{},"body":{"license.html":{}}}],["provisions",{"_index":399,"title":{},"body":{"index.html":{}}}],["public",{"_index":74,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["publish",{"_index":434,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":462,"title":{},"body":{"license.html":{}}}],["readme",{"_index":285,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":61,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["refactored",{"_index":287,"title":{},"body":{"changelog.html":{}}}],["reference",{"_index":135,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["registry",{"_index":122,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["reject",{"_index":152,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reject(err",{"_index":157,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["report",{"_index":12,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reportcounter",{"_index":161,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reported",{"_index":96,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reporter",{"_index":65,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{}}}],["reporter.addmetricregistry(registry",{"_index":377,"title":{},"body":{"index.html":{}}}],["reporter.gettags().set(\"app",{"_index":379,"title":{},"body":{"index.html":{}}}],["reporter.reportevent(event);dev",{"_index":390,"title":{},"body":{"index.html":{}}}],["reporter.start();set",{"_index":378,"title":{},"body":{"index.html":{}}}],["reportevent>(event",{"_index":115,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reportgauge(gauge",{"_index":173,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reporthistogram(histogram",{"_index":179,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reporting",{"_index":85,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{}}}],["reportingresult",{"_index":46,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reportinterval",{"_index":77,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reportmeter(meter",{"_index":206,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reports",{"_index":112,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reporttimer(timer",{"_index":219,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["representing",{"_index":9,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["require(\"graphite",{"_index":32,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"miscellaneous/variables.html":{}}}],["resolve",{"_index":158,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["restriction",{"_index":428,"title":{},"body":{"license.html":{}}}],["result",{"_index":10,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["result.result",{"_index":149,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["results",{"_index":141,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":106,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["returned",{"_index":136,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["returns",{"_index":104,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["rights",{"_index":431,"title":{},"body":{"license.html":{}}}],["running",{"_index":403,"title":{},"body":{"index.html":{}}}],["save",{"_index":373,"title":{},"body":{"index.html":{}}}],["scheduledmetricreporter",{"_index":47,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["scheduledmetricreporteroptions",{"_index":48,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["scheduler",{"_index":49,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["script",{"_index":293,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["scripts",{"_index":317,"title":{},"body":{"changelog.html":{}}}],["select",{"_index":408,"title":{},"body":{"index.html":{}}}],["sell",{"_index":438,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":245,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":389,"title":{},"body":{"index.html":{}}}],["sent",{"_index":21,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["server",{"_index":24,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["service",{"_index":380,"title":{},"body":{"index.html":{}}}],["services",{"_index":397,"title":{},"body":{"index.html":{}}}],["set",{"_index":272,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["setinterval",{"_index":81,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["setlog(log",{"_index":110,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["sets",{"_index":108,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["settag(\"customtag",{"_index":387,"title":{},"body":{"index.html":{}}}],["settag(\"mode",{"_index":386,"title":{},"body":{"index.html":{}}}],["setup",{"_index":327,"title":{},"body":{"changelog.html":{}}}],["setvalue(1.0",{"_index":385,"title":{},"body":{"index.html":{}}}],["shall",{"_index":448,"title":{},"body":{"license.html":{}}}],["signature",{"_index":262,"title":{},"body":{"changelog.html":{}}}],["sinon",{"_index":338,"title":{},"body":{"changelog.html":{}}}],["snapshot",{"_index":181,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["software",{"_index":423,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"dependencies.html":{}}}],["specialvalue",{"_index":388,"title":{},"body":{"index.html":{}}}],["specified",{"_index":160,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["start",{"_index":130,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{}}}],["started",{"_index":235,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":351,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["stdclock",{"_index":50,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["stop",{"_index":137,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{}}}],["stops",{"_index":134,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["stream",{"_index":275,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":59,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["subject",{"_index":443,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":436,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":450,"title":{},"body":{"license.html":{}}}],["super",{"_index":102,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["super.start",{"_index":133,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["super.stop",{"_index":138,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["support",{"_index":279,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["support/register",{"_index":28,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["table",{"_index":360,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":359,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tags",{"_index":16,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["tags[\"group",{"_index":165,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["tags[\"name",{"_index":167,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["target",{"_index":302,"title":{},"body":{"changelog.html":{}}}],["test",{"_index":292,"title":{"unit-test.html":{}},"body":{"changelog.html":{},"index.html":{},"unit-test.html":{}}}],["testing",{"_index":336,"title":{},"body":{"changelog.html":{}}}],["tevent",{"_index":116,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.buildtags(ctx.registry",{"_index":164,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.client",{"_index":131,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.client.end",{"_index":139,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.client.writetagged(carbondata.measurement",{"_index":153,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.createoverallreportcontext",{"_index":125,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(counter",{"_index":170,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(gauge",{"_index":177,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(histogram",{"_index":185,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(meter",{"_index":210,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(timer",{"_index":224,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(meter.get15minuterate",{"_index":212,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(meter.get1minuterate",{"_index":214,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(meter.get5minuterate",{"_index":216,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(meter.getmeanrate",{"_index":218,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get75thpercentile",{"_index":195,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get95thpercentile",{"_index":197,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get98thpercentile",{"_index":199,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get999thpercentile",{"_index":203,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get99thpercentile",{"_index":201,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getmax",{"_index":187,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getmean",{"_index":189,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getmedian",{"_index":193,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getmin",{"_index":191,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getstddev",{"_index":205,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(timer.get15minuterate",{"_index":225,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(timer.get1minuterate",{"_index":226,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(timer.get5minuterate",{"_index":227,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(timer.getmeanrate",{"_index":228,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.handleresults",{"_index":124,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.logmetadata",{"_index":103,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.options.log",{"_index":107,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.options.log.error(err",{"_index":156,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.reportgauge(event",{"_index":117,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["time",{"_index":87,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timeout",{"_index":94,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer",{"_index":51,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer.getcount",{"_index":220,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer.getgroup",{"_index":222,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer.getname",{"_index":223,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer.getsnapshot",{"_index":221,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timestamp",{"_index":143,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timeunit",{"_index":52,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["tool",{"_index":320,"title":{},"body":{"changelog.html":{}}}],["tort",{"_index":473,"title":{},"body":{"license.html":{}}}],["transitive",{"_index":274,"title":{},"body":{"changelog.html":{}}}],["travis.yml",{"_index":297,"title":{},"body":{"changelog.html":{}}}],["trigger",{"_index":93,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["type",{"_index":17,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{}}}],["typescript",{"_index":328,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["under",{"_index":331,"title":{},"body":{"changelog.html":{}}}],["unit",{"_index":79,"title":{"unit-test.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"unit-test.html":{}}}],["unreleased",{"_index":247,"title":{},"body":{"changelog.html":{}}}],["updated",{"_index":254,"title":{},"body":{"changelog.html":{}}}],["upper",{"_index":409,"title":{},"body":{"index.html":{}}}],["usage",{"_index":374,"title":{},"body":{"index.html":{}}}],["use",{"_index":252,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":84,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["uses",{"_index":128,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["using",{"_index":391,"title":{},"body":{"index.html":{}}}],["v1.2.3\");reporting",{"_index":381,"title":{},"body":{"index.html":{}}}],["value",{"_index":99,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":357,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":486,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":273,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["versioning",{"_index":246,"title":{},"body":{"changelog.html":{}}}],["versions",{"_index":296,"title":{},"body":{"changelog.html":{}}}],["void",{"_index":111,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["warranties",{"_index":458,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":453,"title":{},"body":{"license.html":{}}}],["wether",{"_index":97,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["whether",{"_index":470,"title":{},"body":{"license.html":{}}}],["without",{"_index":427,"title":{},"body":{"license.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/CarbonData.html":{"url":"interfaces/CarbonData.html","title":"interface - CarbonData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CarbonData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/CarbonMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for representing the result of a metric report.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        measurement\n                                \n                                \n                                        tags\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        measurement\n                                    \n                                \n                                \n                                    \n                                        measurement:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Document that is getting sent to the carbon / graphite server.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                    \n                                \n                                \n                                    \n                                        tags:     Tags\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Tags\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Combined tags for the metric.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Graphite / carbon client module.\n */\nconst graphite = require(\"graphite\");\n\nimport {\n    Clock,\n    Counter,\n    Event,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    Scheduler,\n    StdClock,\n    Tags,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\nexport interface CarbonMetricReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * The graphite / carbon host.\n     *\n     * @type {string}\n     * @memberof CarbonMetricReporterOptions\n     */\n    readonly host: string;\n    /**\n     * Minimal logger interface to report failures.\n     *\n     * @type {Logger}\n     * @memberof CarbonMetricReporterOptions\n     */\n    log: Logger;\n}\n\n/**\n * Helper interface for representing the result of a metric report.\n *\n * @export\n * @interface CarbonData\n */\nexport interface CarbonData {\n    /**\n     * Document that is getting sent to the carbon / graphite server.\n     *\n     * @type {*}\n     * @memberof CarbonData\n     */\n    measurement: any;\n    /**\n     * Combined tags for the metric.\n     *\n     * @type {Tags}\n     * @memberof CarbonData\n     */\n    tags: Tags;\n}\n\n/**\n * Metric reporter for graphite / carbon.\n *\n * @export\n * @class CarbonMetricReporter\n * @extends {MetricReporter}\n */\nexport class CarbonMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * Graphite / carbon client instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private client: any;\n\n    /**\n     * Creates an instance of CarbonMetricReporter.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public constructor({\n        host,\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: {\n        /**\n         * The graphite / carbon host.\n         * @type {string}\n         */\n        host: string,\n        /**\n         * The logger instance used to report metrics.\n         * @type {Logger}\n         */\n        log?: Logger,\n        /**\n         * Reporting interval in the time-unit of {@link #unit}.\n         * @type {number}\n         */\n        reportInterval?: number;\n        /**\n         * The time-unit of the reporting interval.\n         * @type {TimeUnit}\n         */\n        unit?: TimeUnit;\n        /**\n         * The clock instance used determine the current time.\n         * @type {Clock}\n         */\n        clock?: Clock;\n        /**\n         * The scheduler function used to trigger reporting.\n         * @type {Scheduler}\n         */\n        scheduler?: Scheduler;\n        /**\n         * The timeout in which a metrics gets reported wether it's value has changed or not.\n         * @type {number}\n         */\n        minReportingTimeout?: number;\n        /**\n         * Common tags for this reporter instance.\n         * @type {Map}\n         */\n        tags?: Map;\n    }) {\n        super({\n            clock,\n            host,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            tags,\n            unit,\n        });\n\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof CarbonMetricReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {Logger} log\n     * @memberof CarbonMetricReporter\n     */\n    public setLog(log: Logger): void {\n        this.options.log = log;\n    }\n\n    /**\n     * Reports an {@link Event}.\n     *\n     * @param {Event} event\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        const result = this.reportGauge(event, {\n            date: event.getTime(),\n            metrics: [],\n            overallCtx: null,\n            registry: null,\n            type: \"gauge\",\n        });\n\n        if (result) {\n            await this.handleResults(\n                this.createOverallReportContext(),\n                null,\n                event.getTime(),\n                \"gauge\",\n                [{\n                    metric: event,\n                    result,\n                }],\n            );\n        }\n\n        return event;\n    }\n\n    /**\n     * Does nothing\n     *\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    public async flushEvents(): Promise {\n    }\n\n    /**\n     * Uses the scheduler function to trigger periodical reporting.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public async start(): Promise {\n        this.client = graphite.createClient(this.options.host);\n        return super.start();\n    }\n\n    /**\n     * Stops the timer reference returned by the scheduler function.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public async stop(): Promise {\n        await super.stop();\n        if (this.client) {\n            await this.client.end();\n        }\n        return this;\n    }\n\n    /**\n     * Uses the client instance to report the given metric results.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @param {Date} timestamp\n     * @param {MetricType} type\n     * @param {ReportingResult[]} results\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    protected handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        timestamp: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        return Promise.all(results\n            .map((result) => result.result)\n            .map((carbonData) => new Promise((resolve, reject) => {\n                this.client.writeTagged(carbonData.measurement, carbonData.tags, timestamp, (err: any) => {\n                    if (err != null) {\n                        if (this.options.log) {\n                            this.options.log.error(err, this.logMetadata);\n                        }\n                        reject(err);\n                    }\n                    resolve();\n                });\n            })));\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Counter} or {@link MonotoneCounter}.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): CarbonData {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const tags = this.buildTags(ctx.registry, counter);\n        tags[\"group\"] = counter.getGroup();\n        tags[\"name\"] = counter.getName();\n\n        const prefix = this.getMetricName(counter);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = counter.getCount() || 0;\n\n        return {\n            measurement,\n            tags,\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Gauge}.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): CarbonData {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const tags = this.buildTags(ctx.registry, gauge);\n        tags[\"group\"] = gauge.getGroup();\n        tags[\"name\"] = gauge.getName();\n\n        const prefix = this.getMetricName(gauge);\n        const measurement: any = {};\n        measurement[`${prefix}.value`] = gauge.getValue() || 0;\n\n        return {\n            measurement,\n            tags,\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Histogram}.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): CarbonData {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const tags = this.buildTags(ctx.registry, histogram);\n        tags[\"group\"] = histogram.getGroup();\n        tags[\"name\"] = histogram.getName();\n\n        const prefix = this.getMetricName(histogram);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = histogram.getCount() || 0;\n        measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax());\n        measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean());\n        measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin());\n        measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            measurement,\n            tags,\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Meter}.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): CarbonData {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const tags = this.buildTags(ctx.registry, meter);\n        tags[\"group\"] = meter.getGroup();\n        tags[\"name\"] = meter.getName();\n\n        const prefix = this.getMetricName(meter);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = meter.getCount() || 0;\n        measurement[`${prefix}.m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        measurement[`${prefix}.m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        measurement[`${prefix}.m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        measurement[`${prefix}.mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, meter),\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Timer}.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): CarbonData {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const tags = this.buildTags(ctx.registry, timer);\n        tags[\"group\"] = timer.getGroup();\n        tags[\"name\"] = timer.getName();\n\n        const prefix = this.getMetricName(timer);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = timer.getCount() || 0;\n        measurement[`${prefix}.m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        measurement[`${prefix}.m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        measurement[`${prefix}.m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax());\n        measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean());\n        measurement[`${prefix}.mean_rate`] = this.getNumber(timer.getMeanRate());\n        measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin());\n        measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, timer),\n        };\n    }\n\n    /**\n     * Builds a name for the metric.\n     *\n     * @protected\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof CarbonMetricReporter\n     */\n    protected getMetricName(metric: Metric): string {\n        if (metric.getGroup()) {\n            return `${metric.getGroup()}.${metric.getName()}`;\n        }\n        return metric.getName();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CarbonMetricReporterOptions.html":{"url":"interfaces/CarbonMetricReporterOptions.html","title":"interface - CarbonMetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CarbonMetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/CarbonMetricReporter.ts\n        \n\n\n            \n                Extends\n            \n            \n                    ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        host\n                                \n                                \n                                        log\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                    \n                                \n                                \n                                    \n                                        host:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The graphite / carbon host.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                    \n                                \n                                \n                                    \n                                        log:     Logger\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Logger\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Minimal logger interface to report failures.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Graphite / carbon client module.\n */\nconst graphite = require(\"graphite\");\n\nimport {\n    Clock,\n    Counter,\n    Event,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    Scheduler,\n    StdClock,\n    Tags,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\nexport interface CarbonMetricReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * The graphite / carbon host.\n     *\n     * @type {string}\n     * @memberof CarbonMetricReporterOptions\n     */\n    readonly host: string;\n    /**\n     * Minimal logger interface to report failures.\n     *\n     * @type {Logger}\n     * @memberof CarbonMetricReporterOptions\n     */\n    log: Logger;\n}\n\n/**\n * Helper interface for representing the result of a metric report.\n *\n * @export\n * @interface CarbonData\n */\nexport interface CarbonData {\n    /**\n     * Document that is getting sent to the carbon / graphite server.\n     *\n     * @type {*}\n     * @memberof CarbonData\n     */\n    measurement: any;\n    /**\n     * Combined tags for the metric.\n     *\n     * @type {Tags}\n     * @memberof CarbonData\n     */\n    tags: Tags;\n}\n\n/**\n * Metric reporter for graphite / carbon.\n *\n * @export\n * @class CarbonMetricReporter\n * @extends {MetricReporter}\n */\nexport class CarbonMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * Graphite / carbon client instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private client: any;\n\n    /**\n     * Creates an instance of CarbonMetricReporter.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public constructor({\n        host,\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: {\n        /**\n         * The graphite / carbon host.\n         * @type {string}\n         */\n        host: string,\n        /**\n         * The logger instance used to report metrics.\n         * @type {Logger}\n         */\n        log?: Logger,\n        /**\n         * Reporting interval in the time-unit of {@link #unit}.\n         * @type {number}\n         */\n        reportInterval?: number;\n        /**\n         * The time-unit of the reporting interval.\n         * @type {TimeUnit}\n         */\n        unit?: TimeUnit;\n        /**\n         * The clock instance used determine the current time.\n         * @type {Clock}\n         */\n        clock?: Clock;\n        /**\n         * The scheduler function used to trigger reporting.\n         * @type {Scheduler}\n         */\n        scheduler?: Scheduler;\n        /**\n         * The timeout in which a metrics gets reported wether it's value has changed or not.\n         * @type {number}\n         */\n        minReportingTimeout?: number;\n        /**\n         * Common tags for this reporter instance.\n         * @type {Map}\n         */\n        tags?: Map;\n    }) {\n        super({\n            clock,\n            host,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            tags,\n            unit,\n        });\n\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof CarbonMetricReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {Logger} log\n     * @memberof CarbonMetricReporter\n     */\n    public setLog(log: Logger): void {\n        this.options.log = log;\n    }\n\n    /**\n     * Reports an {@link Event}.\n     *\n     * @param {Event} event\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        const result = this.reportGauge(event, {\n            date: event.getTime(),\n            metrics: [],\n            overallCtx: null,\n            registry: null,\n            type: \"gauge\",\n        });\n\n        if (result) {\n            await this.handleResults(\n                this.createOverallReportContext(),\n                null,\n                event.getTime(),\n                \"gauge\",\n                [{\n                    metric: event,\n                    result,\n                }],\n            );\n        }\n\n        return event;\n    }\n\n    /**\n     * Does nothing\n     *\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    public async flushEvents(): Promise {\n    }\n\n    /**\n     * Uses the scheduler function to trigger periodical reporting.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public async start(): Promise {\n        this.client = graphite.createClient(this.options.host);\n        return super.start();\n    }\n\n    /**\n     * Stops the timer reference returned by the scheduler function.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public async stop(): Promise {\n        await super.stop();\n        if (this.client) {\n            await this.client.end();\n        }\n        return this;\n    }\n\n    /**\n     * Uses the client instance to report the given metric results.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @param {Date} timestamp\n     * @param {MetricType} type\n     * @param {ReportingResult[]} results\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    protected handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        timestamp: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        return Promise.all(results\n            .map((result) => result.result)\n            .map((carbonData) => new Promise((resolve, reject) => {\n                this.client.writeTagged(carbonData.measurement, carbonData.tags, timestamp, (err: any) => {\n                    if (err != null) {\n                        if (this.options.log) {\n                            this.options.log.error(err, this.logMetadata);\n                        }\n                        reject(err);\n                    }\n                    resolve();\n                });\n            })));\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Counter} or {@link MonotoneCounter}.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): CarbonData {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const tags = this.buildTags(ctx.registry, counter);\n        tags[\"group\"] = counter.getGroup();\n        tags[\"name\"] = counter.getName();\n\n        const prefix = this.getMetricName(counter);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = counter.getCount() || 0;\n\n        return {\n            measurement,\n            tags,\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Gauge}.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): CarbonData {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const tags = this.buildTags(ctx.registry, gauge);\n        tags[\"group\"] = gauge.getGroup();\n        tags[\"name\"] = gauge.getName();\n\n        const prefix = this.getMetricName(gauge);\n        const measurement: any = {};\n        measurement[`${prefix}.value`] = gauge.getValue() || 0;\n\n        return {\n            measurement,\n            tags,\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Histogram}.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): CarbonData {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const tags = this.buildTags(ctx.registry, histogram);\n        tags[\"group\"] = histogram.getGroup();\n        tags[\"name\"] = histogram.getName();\n\n        const prefix = this.getMetricName(histogram);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = histogram.getCount() || 0;\n        measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax());\n        measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean());\n        measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin());\n        measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            measurement,\n            tags,\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Meter}.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): CarbonData {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const tags = this.buildTags(ctx.registry, meter);\n        tags[\"group\"] = meter.getGroup();\n        tags[\"name\"] = meter.getName();\n\n        const prefix = this.getMetricName(meter);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = meter.getCount() || 0;\n        measurement[`${prefix}.m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        measurement[`${prefix}.m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        measurement[`${prefix}.m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        measurement[`${prefix}.mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, meter),\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Timer}.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): CarbonData {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const tags = this.buildTags(ctx.registry, timer);\n        tags[\"group\"] = timer.getGroup();\n        tags[\"name\"] = timer.getName();\n\n        const prefix = this.getMetricName(timer);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = timer.getCount() || 0;\n        measurement[`${prefix}.m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        measurement[`${prefix}.m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        measurement[`${prefix}.m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax());\n        measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean());\n        measurement[`${prefix}.mean_rate`] = this.getNumber(timer.getMeanRate());\n        measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin());\n        measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, timer),\n        };\n    }\n\n    /**\n     * Builds a name for the metric.\n     *\n     * @protected\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof CarbonMetricReporter\n     */\n    protected getMetricName(metric: Metric): string {\n        if (metric.getGroup()) {\n            return `${metric.getGroup()}.${metric.getName()}`;\n        }\n        return metric.getName();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n[Unreleased]\n[2.2.1] - 2019-02-08\nChanged\n\nuse inspector-metrics@1.17.2\nupdated dependencies\n\n[2.2.0] - 2018-11-30\nChanged\n\napplied new start & stop method signature\n\n[2.1.2] - 2018-11-28\nChanged\n\nadded inspector-metrics@1.16.x as peer dependency\n\n[2.1.1] - 2018-11-27\nChanged\n\nuse inspector-metrics@1.16.0\nset version of transitive dependency event-stream to 3.3.4\n\n[2.1.0] - 2018-11-26\nAdded\n\nsupport for reporting events\n\nChanged\n\nadded nodejs 11 to playground\nupdated dependencies\nfixed examples in README\nfixed naming of metrics\nrefactored playground\nuse inspector-metrics@1.15.0\n\n[2.0.0] - 2018-11-04\nAdded\n\nCHANGELOG\ncompile and test script for different node versions\n\nChanged\n\nadded nodejs 11 to travis.yml\nupdated dependencies\nuse inspector-metrics@1.13.0\nadapted new MetricLogger implementation\ncompile target from \"es2017\" to \"es6\"\n\n[1.1.0] - 2018-10-04\nAdded\n\nsupport for monotone counters\n\"description\" & \"homepage\" to package.json\njsdocs for components\n\nChanged\n\nfixed linting config\nrefactored playground\nupdated dependencies\nuse inspector-metrics@1.11.0\nrefactored build scripts\nuse compodoc as documentation tool\n\n[1.0.1] - 2018-07-08\nChanged\n\nupdated dependencies\nuse inspector-metrics@1.8.7\nadded nodejs 10 to travis.yml\n\n[1.0.0] - 2018-02-08\nInitial commit.\nAdded\n\nproject setup\nREADME\ntypescript config\nlint config\n\n\nlicensed under MIT license\nbasic carbon / graphite reporter\nmocha testing (with chai, sinon)\nJenkins pipeline\nNYC code-coverage config\nadded editorconfig file\ntravis.yml for nodejs 6, 7, 8, 9\nbasic playground setup\nuse inspector-metrics@1.8.3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            class\n            CarbonMetricReporter\n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            interface\n            CarbonData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            interface\n            CarbonMetricReporterOptions\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            variable\n            graphite\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            graphite : ^0.1.4\n        \n            inspector-metrics : ^1.17.2\n        \n            source-map-support : ^0.5.10\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            inspector-metrics : >=1.16.x\n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-carbon\nTypescript Metrics Reporter for\ngraphite carbon.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with nodejs.It uses node-graphite as graphite/carbon client.\ninstall\nnpm install --save inspector-carbon\nbasic usage\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter({\n    host: \"http://graphite-server/\",\n});\nconst registry: MetricRegistry = new MetricRegistry();\n\n// add the registry to the reporter\nreporter.addMetricRegistry(registry);\n// start reporting\nawait reporter.start();set common tags for all metrics\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter({\n    host: \"http://graphite-server/\",\n});\n\n// set common tags for all metrics\nreporter.getTags().set(\"app-name\", \"my-service\");\nreporter.getTags().set(\"app-version\", \"v1.2.3\");reporting events\nimport { Event, MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter({\n    host: \"http://graphite-server/\",\n});\n\n// build an ad-hoc event\nconst event = new Event(\"application_started\")\n    .setValue(1.0)\n    .setTag(\"mode\", \"test\")\n    .setTag(\"customTag\", \"specialValue\");\n\n// send the event to graphite\nreporter.reportEvent(event);dev\nusing the playground\nTo use the playground you need to have docker and docker-compose installed.\n# boots all services (graphite / grafana) and provisions the example dashboard\ntest-env/boot.sh\n# running playground script\n./playground.shview data in grafana\n\nNavigate to http://localhost:3000\nselect example dashboard (upper left corner: \"Home\") \"Graphite / Carbon example Dashboard\"\n\n\nLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            graphite   (lib/.../CarbonMetricReporter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/CarbonMetricReporter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            graphite\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require(\"graphite\")\n                        \n                    \n\n                \n                    \n                        Graphite / carbon client module.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
