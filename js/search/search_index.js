var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/interfaces/CarbonData.html",[0,0.68,1,1.088]],["body/interfaces/CarbonData.html",[0,0.844,1,1.784,2,0.665,3,0.876,4,0.26,5,0.416,6,0.665,7,1.115,8,1.115,9,0.066,10,1.36,11,1.632,12,0.416,13,1.115,14,2.656,15,2.334,16,2.221,17,0.093,18,0.554,19,0.838,20,1.115,21,1.074,22,0.679,23,0.876,24,1.115,25,0.876,26,1.324,27,0.665,28,1.054,29,0.26,30,2.308,31,0.522,32,2.159,33,1.696,34,1.011,35,2.265,36,2.032,37,2.656,38,2.159,39,1.131,40,2.499,41,1.44,42,1.115,43,1.685,44,1.115,45,1.115,46,1.115,47,1.115,48,2.355,49,1.115,50,2.265,51,1.44,52,0.331,53,1.877,54,0.9,55,1.44,56,1.596,57,2.032,58,2.853,59,0.665,60,0.665,61,0.665,62,2.032,63,0.697,64,1.768,65,0.665,66,0.665,67,1.685,68,0.665,69,1.779,70,0.665,71,2.159,72,0.665,73,0.665,74,1.685,75,0.665,76,1.35,77,0.563,78,0.665,79,1.44,80,0.522,81,0.934,82,1.115,83,1.44,84,2.61,85,1.685,86,0.665,87,0.665,88,1.131,89,1.115,90,0.665,91,0.665,92,0.665,93,1.963,94,0.522,95,0.522,96,0.665,97,1.115,98,3.002,99,0.665,100,1.44,101,0.416,102,2.768,103,0.665,104,0.665,105,2.265,106,1.685,107,0.665,108,0.665,109,0.665,110,1.44,111,1.115,112,0.665,113,2.355,114,1.131,115,1.131,116,0.665,117,0.665,118,0.665,119,0.665,120,0.665,121,0.199,122,1.115,123,0.665,124,0.665,125,0.876,126,0.665,127,0.665,128,0.665,129,0.665,130,2.656,131,1.44,132,0.665,133,2.499,134,0.665,135,0.665,136,0.665,137,0.665,138,0.665,139,0.665,140,0.665,141,0.665,142,0.665,143,1.115,144,0.665,145,0.665,146,0.665,147,1.27,148,1.877,149,0.665,150,1.115,151,1.877,152,2.159,153,1.877,154,0.665,155,1.877,156,0.665,157,1.877,158,0.665,159,1.685,160,1.877,161,0.665,162,1.115,163,0.665,164,0.665,165,0.665,166,0.665,167,0.665,168,1.115,169,1.115,170,0.665,171,0.665,172,0.665,173,0.665,174,1.115,175,1.115,176,1.115,177,1.115,178,1.115,179,1.115,180,1.115,181,1.115,182,1.115,183,1.115,184,1.115,185,1.115,186,1.115,187,1.115,188,1.115,189,1.115,190,1.115,191,1.115,192,1.115,193,1.115,194,0.665,195,1.115,196,0.665,197,0.665,198,0.665,199,1.115,200,0.665,201,1.115,202,0.665,203,1.115,204,0.665,205,1.115,206,0.665,207,0.665,208,1.115,209,0.665,210,0.665,211,0.665,212,0.665,213,0.665,214,0.665,215,0.665,216,0.665,217,0.416,218,0.665,219,0.665,220,0.665,221,0.665,222,0.03]],["title/interfaces/CarbonMetricReporterOptions.html",[0,0.68,54,1.088]],["body/interfaces/CarbonMetricReporterOptions.html",[0,0.845,1,1.769,2,0.667,3,0.878,4,0.261,5,0.417,7,0.667,8,0.667,9,0.064,10,1.322,11,1.633,12,0.417,13,1.117,14,2.501,15,2.242,16,2.222,17,0.093,18,0.332,19,0.717,20,0.667,21,1.075,22,0.679,23,0.524,24,0.667,25,0.878,26,1.326,27,0.667,28,1.056,29,0.261,30,2.309,31,0.524,32,2.161,33,1.698,34,1.012,35,2.267,36,2.034,37,2.77,38,2.161,39,1.133,40,2.501,41,1.442,42,1.117,43,1.688,44,1.117,45,1.117,46,1.117,47,1.442,48,2.357,49,1.117,50,2.267,51,1.442,52,0.332,53,1.88,54,1.056,55,1.688,56,1.912,57,2.267,58,2.855,59,0.667,60,1.117,61,1.117,62,2.357,63,0.699,64,1.769,65,0.667,66,0.667,67,1.688,68,0.667,69,1.781,70,0.667,71,2.161,72,0.667,73,0.667,74,1.688,75,0.667,76,1.351,77,0.564,78,0.667,79,1.442,80,0.524,81,0.935,82,1.117,83,1.442,84,2.612,85,1.688,86,0.667,87,0.667,88,1.133,89,1.117,90,0.667,91,0.667,92,0.667,93,1.965,94,0.524,95,0.524,96,0.667,97,1.117,98,3.003,99,0.667,100,1.442,101,0.417,102,2.77,103,0.667,104,0.667,105,2.267,106,1.688,107,0.667,108,0.667,109,0.667,110,1.442,111,1.117,112,0.667,113,2.357,114,1.133,115,1.133,116,0.667,117,0.667,118,0.667,119,0.667,120,0.667,121,0.2,122,1.117,123,0.667,124,0.667,125,0.878,126,0.667,127,0.667,128,0.667,129,0.667,130,2.658,131,1.442,132,0.667,133,2.501,134,0.667,135,0.667,136,0.667,137,0.667,138,0.667,139,0.667,140,0.667,141,0.667,142,0.667,143,1.117,144,0.667,145,0.667,146,0.667,147,1.272,148,1.88,149,0.667,150,1.117,151,1.88,152,2.161,153,1.88,154,0.667,155,1.88,156,0.667,157,1.88,158,0.667,159,1.688,160,1.88,161,0.667,162,1.117,163,0.667,164,0.667,165,0.667,166,0.667,167,0.667,168,1.117,169,1.117,170,0.667,171,0.667,172,0.667,173,0.667,174,1.117,175,1.117,176,1.117,177,1.117,178,1.117,179,1.117,180,1.117,181,1.117,182,1.117,183,1.117,184,1.117,185,1.117,186,1.117,187,1.117,188,1.117,189,1.117,190,1.117,191,1.117,192,1.117,193,1.117,194,0.667,195,1.117,196,0.667,197,0.667,198,0.667,199,1.117,200,0.667,201,1.117,202,0.667,203,1.117,204,0.667,205,1.117,206,0.667,207,0.667,208,1.117,209,0.667,210,0.667,211,0.667,212,0.667,213,0.667,214,0.667,215,0.667,216,0.667,217,0.417,218,0.667,219,0.667,220,0.667,221,0.667,222,0.03]],["title/changelog.html",[19,0.738,121,0.445,223,1.485]],["body/changelog.html",[4,0.9,6,1.727,9,0.062,10,0.859,11,1.439,17,0.078,18,1.145,21,0.859,22,0.517,33,1.357,34,1.145,52,1.502,77,0.9,81,1.502,94,2.41,101,1.08,121,0.517,125,1.357,147,1.08,217,1.08,222,0.062,223,2.589,224,2.289,225,3.433,226,2.289,227,2.289,228,2.289,229,2.289,230,2.289,231,2.589,232,2.289,233,2.289,234,3.068,235,4.004,236,2.289,237,2.289,238,2.289,239,2.289,240,2.289,241,2.289,242,3.106,243,2.289,244,1.727,245,2.324,246,2.289,247,2.289,248,2.289,249,2.289,250,2.289,251,2.289,252,2.289,253,2.289,254,2.302,255,3.661,256,2.762,257,3.661,258,3.433,259,1.727,260,3.052,261,3.433,262,2.289,263,2.289,264,3.052,265,3.052,266,1.439,267,2.302,268,2.289,269,1.727,270,3.433,271,2.289,272,2.289,273,2.289,274,2.289,275,2.289,276,2.289,277,2.289,278,2.289,279,3.052,280,2.289,281,2.289,282,2.289,283,2.289,284,2.289,285,3.052,286,3.661,287,2.289,288,2.289,289,2.289,290,2.289,291,2.289,292,3.052,293,2.289,294,2.289,295,2.289,296,2.289,297,2.289,298,3.052,299,1.727,300,1.439,301,2.289,302,1.357,303,2.302,304,2.289,305,2.289,306,2.289,307,2.289,308,2.289,309,2.289,310,2.289,311,1.08,312,2.289,313,2.289,314,2.289,315,2.289,316,2.289,317,2.289]],["title/coverage.html",[311,1.447]],["body/coverage.html",[0,1.11,1,1.508,4,0.943,5,1.948,9,0.077,16,1.894,17,0.087,18,1.199,22,0.723,54,1.508,63,1.508,64,1.508,77,0.943,222,0.077,311,1.508,318,3.197,319,2.412,320,4,321,3.197,322,3.197,323,3.197,324,3.197,325,1.894,326,3.197,327,2.412,328,2.412]],["title/dependencies.html",[245,1.631,329,1.968]],["body/dependencies.html",[3,1.959,9,0.079,10,1.44,17,0.088,22,0.747,26,1.959,52,1.44,222,0.079,244,2.494,245,2.274,254,2.494,330,3.306,331,3.306,332,3.306,333,3.306]],["title/index.html",[12,0.928,19,0.738,121,0.445]],["body/index.html",[9,0.062,10,1.502,11,1.942,15,1.808,17,0.091,21,1.561,22,0.862,23,2.034,25,2.324,28,1.08,29,0.675,30,2.26,34,1.431,39,2.26,52,1.545,56,2.034,64,1.942,69,2.034,77,1.124,81,1.374,95,1.808,101,1.08,114,1.808,115,1.357,121,0.517,147,1.08,217,1.08,222,0.062,231,1.727,242,1.727,256,2.589,259,2.589,266,1.439,267,1.727,269,2.302,299,1.727,300,1.08,302,1.357,303,1.727,334,2.289,335,2.289,336,2.289,337,2.289,338,2.289,339,3.433,340,2.289,341,2.289,342,2.289,343,3.433,344,2.289,345,2.289,346,2.289,347,3.052,348,3.052,349,2.289,350,2.289,351,2.289,352,2.289,353,2.289,354,2.289,355,2.289,356,2.289,357,2.289,358,2.289,359,3.052,360,2.289,361,2.289,362,3.052,363,2.289,364,3.433,365,2.289,366,2.289,367,2.289,368,2.289,369,2.289,370,2.289,371,2.289,372,2.289,373,2.289,374,2.289,375,2.289]],["title/license.html",[19,0.738,121,0.445,300,0.928]],["body/license.html",[4,0.83,9,0.071,17,0.071,18,1.056,34,1.056,81,1.307,222,0.071,234,2.123,300,1.327,302,1.667,376,3.785,377,2.814,378,3.485,379,2.814,380,2.814,381,2.814,382,2.814,383,3.485,384,2.814,385,3.956,386,4.277,387,2.814,388,3.485,389,3.785,390,2.814,391,3.785,392,3.485,393,2.814,394,2.814,395,2.814,396,2.814,397,2.814,398,2.814,399,2.814,400,2.814,401,2.814,402,2.814,403,2.814,404,2.814,405,2.814,406,2.814,407,3.485,408,3.485,409,2.814,410,2.814,411,2.814,412,3.485,413,2.814,414,2.814,415,2.814,416,2.814,417,2.814,418,2.814,419,2.814,420,2.814,421,2.814,422,2.814,423,2.814,424,2.814,425,2.814,426,2.814,427,2.814,428,2.814,429,2.814,430,2.814,431,2.814,432,2.814,433,2.814,434,2.814]],["title/modules.html",[29,0.904]],["body/modules.html",[9,0.081,17,0.081,29,1.019,222,0.081]],["title/overview.html",[435,2.314]],["body/overview.html",[0,1.009,9,0.08,17,0.08,63,1.614,80,2.028,222,0.08,435,2.581,436,3.422]],["title/unit-test.html",[76,1.177,266,1.177]],["body/unit-test.html",[4,0.994,9,0.079,17,0.079,76,1.59,77,0.994,88,1.997,222,0.079,266,1.59,311,1.59,319,2.543,327,2.543,328,2.543,437,3.371,438,3.371]],["title/miscellaneous/variables.html",[325,1.631,439,1.485]],["body/miscellaneous/variables.html",[5,1.567,9,0.079,12,1.567,17,0.086,21,1.246,22,0.945,28,1.567,29,0.979,31,1.968,93,1.968,222,0.079,325,1.968,439,2.506,440,3.322,441,3.322]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":160,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["0.1.4",{"_index":330,"title":{},"body":{"dependencies.html":{}}}],["0.5.9",{"_index":332,"title":{},"body":{"dependencies.html":{}}}],["02",{"_index":295,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":264,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":291,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":292,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":80,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"overview.html":{}}}],["1.0.0",{"_index":294,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":290,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":278,"title":{},"body":{"changelog.html":{}}}],["1.16.x",{"_index":333,"title":{},"body":{"dependencies.html":{}}}],["1.17.0",{"_index":331,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":326,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":279,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":320,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":75,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["11",{"_index":235,"title":{},"body":{"changelog.html":{}}}],["17/17",{"_index":321,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":436,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":263,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":252,"title":{},"body":{"changelog.html":{}}}],["2.1.1",{"_index":246,"title":{},"body":{"changelog.html":{}}}],["2.1.2",{"_index":240,"title":{},"body":{"changelog.html":{}}}],["2.2.0",{"_index":233,"title":{},"body":{"changelog.html":{}}}],["2/3",{"_index":324,"title":{},"body":{"coverage.html":{}}}],["2018",{"_index":234,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["26",{"_index":253,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":247,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":241,"title":{},"body":{"changelog.html":{}}}],["3.3.4",{"_index":251,"title":{},"body":{"changelog.html":{}}}],["3/3",{"_index":322,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":236,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":313,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":323,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":314,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":315,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":316,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":406,"title":{},"body":{"license.html":{}}}],["action",{"_index":428,"title":{},"body":{"license.html":{}}}],["ad",{"_index":242,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["adapt",{"_index":272,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":344,"title":{},"body":{"index.html":{}}}],["adher",{"_index":229,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":399,"title":{},"body":{"license.html":{}}}],["appli",{"_index":237,"title":{},"body":{"changelog.html":{}}}],["aris",{"_index":432,"title":{},"body":{"license.html":{}}}],["array",{"_index":134,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["associ",{"_index":387,"title":{},"body":{"license.html":{}}}],["async",{"_index":106,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["author",{"_index":421,"title":{},"body":{"license.html":{}}}],["await",{"_index":115,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["base",{"_index":227,"title":{},"body":{"changelog.html":{}}}],["basic",{"_index":303,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["boot",{"_index":361,"title":{},"body":{"index.html":{}}}],["branch",{"_index":437,"title":{},"body":{"unit-test.html":{}}}],["build",{"_index":147,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{}}}],["c",{"_index":377,"title":{},"body":{"license.html":{}}}],["carbon",{"_index":21,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["carbondata",{"_index":1,"title":{"interfaces/CarbonData.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{}}}],["carbondata.tag",{"_index":142,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["carbonmetricreport",{"_index":64,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"index.html":{}}}],["carbonmetricreporteropt",{"_index":54,"title":{"interfaces/CarbonMetricReporterOptions.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{}}}],["chai",{"_index":305,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":94,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{}}}],["changelog",{"_index":223,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["charg",{"_index":382,"title":{},"body":{"license.html":{}}}],["claim",{"_index":424,"title":{},"body":{"license.html":{}}}],["class",{"_index":63,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"overview.html":{}}}],["client",{"_index":28,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["clock",{"_index":32,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["code",{"_index":310,"title":{},"body":{"changelog.html":{}}}],["combin",{"_index":24,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["commit",{"_index":297,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":95,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["compil",{"_index":265,"title":{},"body":{"changelog.html":{}}}],["compodoc",{"_index":288,"title":{},"body":{"changelog.html":{}}}],["compon",{"_index":284,"title":{},"body":{"changelog.html":{}}}],["compos",{"_index":360,"title":{},"body":{"index.html":{}}}],["condit",{"_index":405,"title":{},"body":{"license.html":{}}}],["config",{"_index":286,"title":{},"body":{"changelog.html":{}}}],["connect",{"_index":434,"title":{},"body":{"license.html":{}}}],["consol",{"_index":73,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["const",{"_index":30,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["constructor",{"_index":72,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["contract",{"_index":429,"title":{},"body":{"license.html":{}}}],["copi",{"_index":385,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":376,"title":{},"body":{"license.html":{}}}],["corner",{"_index":374,"title":{},"body":{"index.html":{}}}],["counter",{"_index":33,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{}}}],["counter.getcount",{"_index":150,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["counter.getgroup",{"_index":154,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["counter.getnam",{"_index":156,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["coverag",{"_index":311,"title":{"coverage.html":{}},"body":{"changelog.html":{},"coverage.html":{},"unit-test.html":{}}}],["creat",{"_index":70,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["ctx",{"_index":133,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["current",{"_index":87,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["damag",{"_index":425,"title":{},"body":{"license.html":{}}}],["dashboard",{"_index":364,"title":{},"body":{"index.html":{}}}],["data",{"_index":368,"title":{},"body":{"index.html":{}}}],["date",{"_index":110,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["deal",{"_index":388,"title":{},"body":{"license.html":{}}}],["default",{"_index":441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["depend",{"_index":245,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"interfaces/CarbonData.html":{},"changelog.html":{}}}],["determin",{"_index":86,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["differ",{"_index":268,"title":{},"body":{"changelog.html":{}}}],["distribut",{"_index":397,"title":{},"body":{"license.html":{}}}],["docker",{"_index":359,"title":{},"body":{"index.html":{}}}],["document",{"_index":18,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"license.html":{}}}],["editorconfig",{"_index":312,"title":{},"body":{"changelog.html":{}}}],["env/boot.sh",{"_index":365,"title":{},"body":{"index.html":{}}}],["err",{"_index":143,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["es2017",{"_index":276,"title":{},"body":{"changelog.html":{}}}],["es6",{"_index":277,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":34,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event(\"application_start",{"_index":351,"title":{},"body":{"index.html":{}}}],["event.gettim",{"_index":111,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["exampl",{"_index":259,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["export",{"_index":53,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["express",{"_index":414,"title":{},"body":{"license.html":{}}}],["extend",{"_index":55,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["failur",{"_index":61,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["fit",{"_index":417,"title":{},"body":{"license.html":{}}}],["fix",{"_index":258,"title":{},"body":{"changelog.html":{}}}],["flushev",{"_index":119,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["follow",{"_index":404,"title":{},"body":{"license.html":{}}}],["format",{"_index":226,"title":{},"body":{"changelog.html":{}}}],["free",{"_index":381,"title":{},"body":{"license.html":{}}}],["function",{"_index":88,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"unit-test.html":{}}}],["furnish",{"_index":402,"title":{},"body":{"license.html":{}}}],["gaug",{"_index":35,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["gauge.getgroup",{"_index":163,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["gauge.getnam",{"_index":164,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["gauge.getvalu",{"_index":162,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["get",{"_index":19,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["getlog",{"_index":99,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["getmetricname(metr",{"_index":218,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["given",{"_index":129,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["grafana",{"_index":362,"title":{},"body":{"index.html":{}}}],["grant",{"_index":380,"title":{},"body":{"license.html":{}}}],["graphit",{"_index":22,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["graphite.createclient(this.options.host",{"_index":123,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["graphite/carbon",{"_index":338,"title":{},"body":{"index.html":{}}}],["handleresult",{"_index":132,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["helper",{"_index":7,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["herebi",{"_index":379,"title":{},"body":{"license.html":{}}}],["histogram",{"_index":36,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["histogram.getcount",{"_index":168,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["histogram.getgroup",{"_index":171,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["histogram.getnam",{"_index":172,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["histogram.getsnapshot",{"_index":170,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["hoc",{"_index":350,"title":{},"body":{"index.html":{}}}],["holder",{"_index":422,"title":{},"body":{"license.html":{}}}],["home",{"_index":375,"title":{},"body":{"index.html":{}}}],["homepag",{"_index":281,"title":{},"body":{"changelog.html":{}}}],["host",{"_index":56,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["http://graphit",{"_index":343,"title":{},"body":{"index.html":{}}}],["http://localhost:3000",{"_index":370,"title":{},"body":{"index.html":{}}}],["identifi",{"_index":318,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":274,"title":{},"body":{"changelog.html":{}}}],["impli",{"_index":415,"title":{},"body":{"license.html":{}}}],["import",{"_index":25,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["includ",{"_index":391,"title":{},"body":{"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["initi",{"_index":296,"title":{},"body":{"changelog.html":{}}}],["inspector",{"_index":52,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["instal",{"_index":339,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":69,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"overview.html":{}}}],["interv",{"_index":82,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["isnan(valu",{"_index":151,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["it'",{"_index":92,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["jenkin",{"_index":307,"title":{},"body":{"changelog.html":{}}}],["jsdoc",{"_index":283,"title":{},"body":{"changelog.html":{}}}],["keep",{"_index":228,"title":{},"body":{"changelog.html":{}}}],["kind",{"_index":413,"title":{},"body":{"license.html":{}}}],["left",{"_index":373,"title":{},"body":{"index.html":{}}}],["liabil",{"_index":426,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":423,"title":{},"body":{"license.html":{}}}],["lib/.../carbonmetricreporter.t",{"_index":440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/metrics/carbonmetricreporter.t",{"_index":5,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["librari",{"_index":334,"title":{},"body":{"index.html":{}}}],["licens",{"_index":300,"title":{"license.html":{}},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["limit",{"_index":392,"title":{},"body":{"license.html":{}}}],["line",{"_index":438,"title":{},"body":{"unit-test.html":{}}}],["link",{"_index":84,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["lint",{"_index":285,"title":{},"body":{"changelog.html":{}}}],["log",{"_index":62,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["logger",{"_index":37,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["logmetadata",{"_index":68,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["made",{"_index":335,"title":{},"body":{"index.html":{}}}],["map",{"_index":26,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"dependencies.html":{}}}],["map((carbondata",{"_index":138,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["map((result",{"_index":136,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["match",{"_index":222,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["meant",{"_index":336,"title":{},"body":{"index.html":{}}}],["measur",{"_index":14,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.count",{"_index":159,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.m15_r",{"_index":199,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.m1_r",{"_index":201,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.m5_r",{"_index":203,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.max",{"_index":174,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.mean",{"_index":176,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.mean_r",{"_index":205,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.min",{"_index":178,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p50",{"_index":180,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p75",{"_index":182,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p95",{"_index":184,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p98",{"_index":186,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p99",{"_index":188,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p999",{"_index":190,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.stddev",{"_index":192,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.valu",{"_index":166,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["memberof",{"_index":58,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["merchant",{"_index":416,"title":{},"body":{"license.html":{}}}],["merg",{"_index":395,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":66,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["meter",{"_index":38,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["meter.getcount",{"_index":195,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["meter.getgroup",{"_index":196,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["meter.getnam",{"_index":197,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["method",{"_index":238,"title":{},"body":{"changelog.html":{}}}],["metric",{"_index":10,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["metric.getgroup",{"_index":219,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metric.getgroup()}.${metric.getnam",{"_index":220,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metric.getnam",{"_index":221,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metriclogg",{"_index":273,"title":{},"body":{"changelog.html":{}}}],["metricregistri",{"_index":39,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["metricreport",{"_index":65,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metrics@1.11.0",{"_index":287,"title":{},"body":{"changelog.html":{}}}],["metrics@1.13.0",{"_index":271,"title":{},"body":{"changelog.html":{}}}],["metrics@1.15.0",{"_index":262,"title":{},"body":{"changelog.html":{}}}],["metrics@1.16.0",{"_index":248,"title":{},"body":{"changelog.html":{}}}],["metrics@1.16.x",{"_index":243,"title":{},"body":{"changelog.html":{}}}],["metrics@1.8.3",{"_index":317,"title":{},"body":{"changelog.html":{}}}],["metrics@1.8.7",{"_index":293,"title":{},"body":{"changelog.html":{}}}],["metricsetreportcontext",{"_index":40,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metrictyp",{"_index":41,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["millisecond",{"_index":42,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["minim",{"_index":60,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["minreportingtimeout",{"_index":79,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["miscellan",{"_index":439,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mit",{"_index":302,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["mocha",{"_index":304,"title":{},"body":{"changelog.html":{}}}],["modifi",{"_index":394,"title":{},"body":{"license.html":{}}}],["modul",{"_index":29,"title":{"modules.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["monoton",{"_index":280,"title":{},"body":{"changelog.html":{}}}],["monotonecount",{"_index":43,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["name",{"_index":217,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{}}}],["navig",{"_index":369,"title":{},"body":{"index.html":{}}}],["need",{"_index":358,"title":{},"body":{"index.html":{}}}],["new",{"_index":77,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["node",{"_index":269,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nodej",{"_index":255,"title":{},"body":{"changelog.html":{}}}],["nodejs.it",{"_index":337,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":420,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":224,"title":{},"body":{"changelog.html":{}}}],["noth",{"_index":118,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["notic",{"_index":407,"title":{},"body":{"license.html":{}}}],["npm",{"_index":340,"title":{},"body":{"index.html":{}}}],["null",{"_index":113,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["number",{"_index":85,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["nyc",{"_index":309,"title":{},"body":{"changelog.html":{}}}],["obtain",{"_index":384,"title":{},"body":{"license.html":{}}}],["otherwis",{"_index":431,"title":{},"body":{"license.html":{}}}],["out",{"_index":433,"title":{},"body":{"license.html":{}}}],["overallctx",{"_index":112,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["overallreportcontext",{"_index":44,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["overview",{"_index":435,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":329,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":282,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":102,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["particular",{"_index":418,"title":{},"body":{"license.html":{}}}],["peer",{"_index":244,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["period",{"_index":120,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["permiss",{"_index":378,"title":{},"body":{"license.html":{}}}],["permit",{"_index":401,"title":{},"body":{"license.html":{}}}],["person",{"_index":383,"title":{},"body":{"license.html":{}}}],["pipelin",{"_index":308,"title":{},"body":{"changelog.html":{}}}],["playground",{"_index":256,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["playground.shview",{"_index":367,"title":{},"body":{"index.html":{}}}],["portion",{"_index":410,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":157,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["privat",{"_index":67,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["project",{"_index":225,"title":{},"body":{"changelog.html":{}}}],["promis",{"_index":105,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["promise((resolv",{"_index":139,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["promise.all(result",{"_index":135,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["properti",{"_index":13,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["protect",{"_index":130,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["provid",{"_index":411,"title":{},"body":{"license.html":{}}}],["provis",{"_index":363,"title":{},"body":{"index.html":{}}}],["public",{"_index":71,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["publish",{"_index":396,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":419,"title":{},"body":{"license.html":{}}}],["readm",{"_index":260,"title":{},"body":{"changelog.html":{}}}],["readonli",{"_index":59,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["refactor",{"_index":261,"title":{},"body":{"changelog.html":{}}}],["refer",{"_index":126,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["registri",{"_index":114,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["reject",{"_index":140,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reject(err",{"_index":145,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["report",{"_index":11,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{}}}],["reportcount",{"_index":149,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reporter.addmetricregistry(registri",{"_index":345,"title":{},"body":{"index.html":{}}}],["reporter.gettags().set(\"app",{"_index":347,"title":{},"body":{"index.html":{}}}],["reporter.reportevent(event);dev",{"_index":357,"title":{},"body":{"index.html":{}}}],["reporter.start();set",{"_index":346,"title":{},"body":{"index.html":{}}}],["reportevent>(ev",{"_index":107,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reportgauge(gaug",{"_index":161,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reporthistogram(histogram",{"_index":167,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reportingresult",{"_index":45,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reportinterv",{"_index":74,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reportmeter(met",{"_index":194,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reporttimer(tim",{"_index":207,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["repres",{"_index":8,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["require(\"graphit",{"_index":31,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"miscellaneous/variables.html":{}}}],["resolv",{"_index":146,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["restrict",{"_index":390,"title":{},"body":{"license.html":{}}}],["result",{"_index":9,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["result.result",{"_index":137,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["return",{"_index":98,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["right",{"_index":393,"title":{},"body":{"license.html":{}}}],["run",{"_index":366,"title":{},"body":{"index.html":{}}}],["save",{"_index":341,"title":{},"body":{"index.html":{}}}],["schedul",{"_index":48,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["scheduledmetricreport",{"_index":46,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["scheduledmetricreporteropt",{"_index":47,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["script",{"_index":267,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["select",{"_index":371,"title":{},"body":{"index.html":{}}}],["sell",{"_index":400,"title":{},"body":{"license.html":{}}}],["semant",{"_index":230,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":356,"title":{},"body":{"index.html":{}}}],["sent",{"_index":20,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["server",{"_index":23,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["servic",{"_index":348,"title":{},"body":{"index.html":{}}}],["set",{"_index":101,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{}}}],["setinterv",{"_index":78,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["setlog(log",{"_index":103,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["settag(\"customtag",{"_index":354,"title":{},"body":{"index.html":{}}}],["settag(\"mod",{"_index":353,"title":{},"body":{"index.html":{}}}],["setup",{"_index":298,"title":{},"body":{"changelog.html":{}}}],["setvalue(1.0",{"_index":352,"title":{},"body":{"index.html":{}}}],["shall",{"_index":408,"title":{},"body":{"license.html":{}}}],["signatur",{"_index":239,"title":{},"body":{"changelog.html":{}}}],["sinon",{"_index":306,"title":{},"body":{"changelog.html":{}}}],["snapshot",{"_index":169,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["softwar",{"_index":386,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"dependencies.html":{}}}],["specialvalu",{"_index":355,"title":{},"body":{"index.html":{}}}],["specifi",{"_index":148,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["start",{"_index":121,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{}}}],["statement",{"_index":319,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["stdclock",{"_index":49,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["stop",{"_index":125,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{}}}],["stream",{"_index":250,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":57,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["subject",{"_index":403,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":398,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":409,"title":{},"body":{"license.html":{}}}],["super",{"_index":96,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["super.start",{"_index":124,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["super.stop",{"_index":127,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["support",{"_index":254,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["support/regist",{"_index":27,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["tabl",{"_index":328,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":327,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":15,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["tags[\"group",{"_index":153,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["tags[\"nam",{"_index":155,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["target",{"_index":275,"title":{},"body":{"changelog.html":{}}}],["test",{"_index":266,"title":{"unit-test.html":{}},"body":{"changelog.html":{},"index.html":{},"unit-test.html":{}}}],["tevent",{"_index":108,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.buildtags(ctx.registri",{"_index":152,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.client",{"_index":122,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.client.end",{"_index":128,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.client.writetagged(carbondata.measur",{"_index":141,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.createoverallreportcontext",{"_index":117,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(count",{"_index":158,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(gaug",{"_index":165,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(histogram",{"_index":173,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(met",{"_index":198,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(tim",{"_index":212,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(meter.get15minuter",{"_index":200,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(meter.get1minuter",{"_index":202,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(meter.get5minuter",{"_index":204,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(meter.getmeanr",{"_index":206,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get75thpercentil",{"_index":183,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get95thpercentil",{"_index":185,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get98thpercentil",{"_index":187,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get999thpercentil",{"_index":191,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get99thpercentil",{"_index":189,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getmax",{"_index":175,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getmean",{"_index":177,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getmedian",{"_index":181,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getmin",{"_index":179,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getstddev",{"_index":193,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(timer.get15minuter",{"_index":213,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(timer.get1minuter",{"_index":214,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(timer.get5minuter",{"_index":215,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(timer.getmeanr",{"_index":216,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.handleresult",{"_index":116,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.logmetadata",{"_index":97,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.options.log",{"_index":100,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.options.log.error(err",{"_index":144,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.reportgauge(ev",{"_index":109,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["time",{"_index":83,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timeout",{"_index":90,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer",{"_index":50,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer.getcount",{"_index":208,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer.getgroup",{"_index":210,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer.getnam",{"_index":211,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer.getsnapshot",{"_index":209,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timestamp",{"_index":131,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timeunit",{"_index":51,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["tool",{"_index":289,"title":{},"body":{"changelog.html":{}}}],["tort",{"_index":430,"title":{},"body":{"license.html":{}}}],["transit",{"_index":249,"title":{},"body":{"changelog.html":{}}}],["travis.yml",{"_index":270,"title":{},"body":{"changelog.html":{}}}],["trigger",{"_index":89,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["type",{"_index":16,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{}}}],["typescript",{"_index":299,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["under",{"_index":301,"title":{},"body":{"changelog.html":{}}}],["unit",{"_index":76,"title":{"unit-test.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"unit-test.html":{}}}],["unreleas",{"_index":232,"title":{},"body":{"changelog.html":{}}}],["updat",{"_index":257,"title":{},"body":{"changelog.html":{}}}],["upper",{"_index":372,"title":{},"body":{"index.html":{}}}],["us",{"_index":81,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":342,"title":{},"body":{"index.html":{}}}],["v1.2.3\");report",{"_index":349,"title":{},"body":{"index.html":{}}}],["valu",{"_index":93,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"miscellaneous/variables.html":{}}}],["variabl",{"_index":325,"title":{"miscellaneous/variables.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":231,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["void",{"_index":104,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["warranti",{"_index":412,"title":{},"body":{"license.html":{}}}],["wether",{"_index":91,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["whether",{"_index":427,"title":{},"body":{"license.html":{}}}],["without",{"_index":389,"title":{},"body":{"license.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/CarbonData.html":{"url":"interfaces/CarbonData.html","title":"interface - CarbonData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CarbonData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/CarbonMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for representing the result of a metric report.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        measurement\n                                \n                                \n                                        tags\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        measurement\n                                    \n                                \n                                \n                                    \n                                        measurement:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Document that is getting sent to the carbon / graphite server.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                    \n                                \n                                \n                                    \n                                        tags:     Tags\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Tags\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Combined tags for the metric.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Graphite / carbon client module.\n */\nconst graphite = require(\"graphite\");\n\nimport {\n    Clock,\n    Counter,\n    Event,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    Scheduler,\n    StdClock,\n    Tags,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\nexport interface CarbonMetricReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * The graphite / carbon host.\n     *\n     * @type {string}\n     * @memberof CarbonMetricReporterOptions\n     */\n    readonly host: string;\n    /**\n     * Minimal logger interface to report failures.\n     *\n     * @type {Logger}\n     * @memberof CarbonMetricReporterOptions\n     */\n    log: Logger;\n}\n\n/**\n * Helper interface for representing the result of a metric report.\n *\n * @export\n * @interface CarbonData\n */\nexport interface CarbonData {\n    /**\n     * Document that is getting sent to the carbon / graphite server.\n     *\n     * @type {*}\n     * @memberof CarbonData\n     */\n    measurement: any;\n    /**\n     * Combined tags for the metric.\n     *\n     * @type {Tags}\n     * @memberof CarbonData\n     */\n    tags: Tags;\n}\n\n/**\n * Metric reporter for graphite / carbon.\n *\n * @export\n * @class CarbonMetricReporter\n * @extends {MetricReporter}\n */\nexport class CarbonMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * Graphite / carbon client instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private client: any;\n\n    /**\n     * Creates an instance of CarbonMetricReporter.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public constructor({\n        host,\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: {\n        /**\n         * The graphite / carbon host.\n         * @type {string}\n         */\n        host: string,\n        /**\n         * The logger instance used to report metrics.\n         * @type {Logger}\n         */\n        log?: Logger,\n        /**\n         * Reporting interval in the time-unit of {@link #unit}.\n         * @type {number}\n         */\n        reportInterval?: number;\n        /**\n         * The time-unit of the reporting interval.\n         * @type {TimeUnit}\n         */\n        unit?: TimeUnit;\n        /**\n         * The clock instance used determine the current time.\n         * @type {Clock}\n         */\n        clock?: Clock;\n        /**\n         * The scheduler function used to trigger reporting.\n         * @type {Scheduler}\n         */\n        scheduler?: Scheduler;\n        /**\n         * The timeout in which a metrics gets reported wether it's value has changed or not.\n         * @type {number}\n         */\n        minReportingTimeout?: number;\n        /**\n         * Common tags for this reporter instance.\n         * @type {Map}\n         */\n        tags?: Map;\n    }) {\n        super({\n            clock,\n            host,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            tags,\n            unit,\n        });\n\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof CarbonMetricReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {Logger} log\n     * @memberof CarbonMetricReporter\n     */\n    public setLog(log: Logger): void {\n        this.options.log = log;\n    }\n\n    /**\n     * Reports an {@link Event}.\n     *\n     * @param {Event} event\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        const result = this.reportGauge(event, {\n            date: event.getTime(),\n            metrics: [],\n            overallCtx: null,\n            registry: null,\n            type: \"gauge\",\n        });\n\n        if (result) {\n            await this.handleResults(\n                this.createOverallReportContext(),\n                null,\n                event.getTime(),\n                \"gauge\",\n                [{\n                    metric: event,\n                    result,\n                }],\n            );\n        }\n\n        return event;\n    }\n\n    /**\n     * Does nothing\n     *\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    public async flushEvents(): Promise {\n    }\n\n    /**\n     * Uses the scheduler function to trigger periodical reporting.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public async start(): Promise {\n        this.client = graphite.createClient(this.options.host);\n        return super.start();\n    }\n\n    /**\n     * Stops the timer reference returned by the scheduler function.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public async stop(): Promise {\n        await super.stop();\n        if (this.client) {\n            await this.client.end();\n        }\n        return this;\n    }\n\n    /**\n     * Uses the client instance to report the given metric results.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @param {Date} timestamp\n     * @param {MetricType} type\n     * @param {ReportingResult[]} results\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    protected handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        timestamp: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        return Promise.all(results\n            .map((result) => result.result)\n            .map((carbonData) => new Promise((resolve, reject) => {\n                this.client.writeTagged(carbonData.measurement, carbonData.tags, timestamp, (err: any) => {\n                    if (err != null) {\n                        if (this.options.log) {\n                            this.options.log.error(err, this.logMetadata);\n                        }\n                        reject(err);\n                    }\n                    resolve();\n                });\n            })));\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Counter} or {@link MonotoneCounter}.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): CarbonData {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const tags = this.buildTags(ctx.registry, counter);\n        tags[\"group\"] = counter.getGroup();\n        tags[\"name\"] = counter.getName();\n\n        const prefix = this.getMetricName(counter);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = counter.getCount() || 0;\n\n        return {\n            measurement,\n            tags,\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Gauge}.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): CarbonData {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const tags = this.buildTags(ctx.registry, gauge);\n        tags[\"group\"] = gauge.getGroup();\n        tags[\"name\"] = gauge.getName();\n\n        const prefix = this.getMetricName(gauge);\n        const measurement: any = {};\n        measurement[`${prefix}.value`] = gauge.getValue() || 0;\n\n        return {\n            measurement,\n            tags,\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Histogram}.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): CarbonData {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const tags = this.buildTags(ctx.registry, histogram);\n        tags[\"group\"] = histogram.getGroup();\n        tags[\"name\"] = histogram.getName();\n\n        const prefix = this.getMetricName(histogram);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = histogram.getCount() || 0;\n        measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax());\n        measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean());\n        measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin());\n        measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            measurement,\n            tags,\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Meter}.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): CarbonData {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const tags = this.buildTags(ctx.registry, meter);\n        tags[\"group\"] = meter.getGroup();\n        tags[\"name\"] = meter.getName();\n\n        const prefix = this.getMetricName(meter);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = meter.getCount() || 0;\n        measurement[`${prefix}.m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        measurement[`${prefix}.m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        measurement[`${prefix}.m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        measurement[`${prefix}.mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, meter),\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Timer}.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): CarbonData {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const tags = this.buildTags(ctx.registry, timer);\n        tags[\"group\"] = timer.getGroup();\n        tags[\"name\"] = timer.getName();\n\n        const prefix = this.getMetricName(timer);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = timer.getCount() || 0;\n        measurement[`${prefix}.m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        measurement[`${prefix}.m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        measurement[`${prefix}.m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax());\n        measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean());\n        measurement[`${prefix}.mean_rate`] = this.getNumber(timer.getMeanRate());\n        measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin());\n        measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, timer),\n        };\n    }\n\n    /**\n     * Builds a name for the metric.\n     *\n     * @protected\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof CarbonMetricReporter\n     */\n    protected getMetricName(metric: Metric): string {\n        if (metric.getGroup()) {\n            return `${metric.getGroup()}.${metric.getName()}`;\n        }\n        return metric.getName();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CarbonMetricReporterOptions.html":{"url":"interfaces/CarbonMetricReporterOptions.html","title":"interface - CarbonMetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CarbonMetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/CarbonMetricReporter.ts\n        \n\n\n            \n                Extends\n            \n            \n                    ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        host\n                                \n                                \n                                        log\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                    \n                                \n                                \n                                    \n                                        host:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The graphite / carbon host.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                    \n                                \n                                \n                                    \n                                        log:     Logger\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Logger\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Minimal logger interface to report failures.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Graphite / carbon client module.\n */\nconst graphite = require(\"graphite\");\n\nimport {\n    Clock,\n    Counter,\n    Event,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    Scheduler,\n    StdClock,\n    Tags,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\nexport interface CarbonMetricReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * The graphite / carbon host.\n     *\n     * @type {string}\n     * @memberof CarbonMetricReporterOptions\n     */\n    readonly host: string;\n    /**\n     * Minimal logger interface to report failures.\n     *\n     * @type {Logger}\n     * @memberof CarbonMetricReporterOptions\n     */\n    log: Logger;\n}\n\n/**\n * Helper interface for representing the result of a metric report.\n *\n * @export\n * @interface CarbonData\n */\nexport interface CarbonData {\n    /**\n     * Document that is getting sent to the carbon / graphite server.\n     *\n     * @type {*}\n     * @memberof CarbonData\n     */\n    measurement: any;\n    /**\n     * Combined tags for the metric.\n     *\n     * @type {Tags}\n     * @memberof CarbonData\n     */\n    tags: Tags;\n}\n\n/**\n * Metric reporter for graphite / carbon.\n *\n * @export\n * @class CarbonMetricReporter\n * @extends {MetricReporter}\n */\nexport class CarbonMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * Graphite / carbon client instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private client: any;\n\n    /**\n     * Creates an instance of CarbonMetricReporter.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public constructor({\n        host,\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: {\n        /**\n         * The graphite / carbon host.\n         * @type {string}\n         */\n        host: string,\n        /**\n         * The logger instance used to report metrics.\n         * @type {Logger}\n         */\n        log?: Logger,\n        /**\n         * Reporting interval in the time-unit of {@link #unit}.\n         * @type {number}\n         */\n        reportInterval?: number;\n        /**\n         * The time-unit of the reporting interval.\n         * @type {TimeUnit}\n         */\n        unit?: TimeUnit;\n        /**\n         * The clock instance used determine the current time.\n         * @type {Clock}\n         */\n        clock?: Clock;\n        /**\n         * The scheduler function used to trigger reporting.\n         * @type {Scheduler}\n         */\n        scheduler?: Scheduler;\n        /**\n         * The timeout in which a metrics gets reported wether it's value has changed or not.\n         * @type {number}\n         */\n        minReportingTimeout?: number;\n        /**\n         * Common tags for this reporter instance.\n         * @type {Map}\n         */\n        tags?: Map;\n    }) {\n        super({\n            clock,\n            host,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            tags,\n            unit,\n        });\n\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof CarbonMetricReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {Logger} log\n     * @memberof CarbonMetricReporter\n     */\n    public setLog(log: Logger): void {\n        this.options.log = log;\n    }\n\n    /**\n     * Reports an {@link Event}.\n     *\n     * @param {Event} event\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        const result = this.reportGauge(event, {\n            date: event.getTime(),\n            metrics: [],\n            overallCtx: null,\n            registry: null,\n            type: \"gauge\",\n        });\n\n        if (result) {\n            await this.handleResults(\n                this.createOverallReportContext(),\n                null,\n                event.getTime(),\n                \"gauge\",\n                [{\n                    metric: event,\n                    result,\n                }],\n            );\n        }\n\n        return event;\n    }\n\n    /**\n     * Does nothing\n     *\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    public async flushEvents(): Promise {\n    }\n\n    /**\n     * Uses the scheduler function to trigger periodical reporting.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public async start(): Promise {\n        this.client = graphite.createClient(this.options.host);\n        return super.start();\n    }\n\n    /**\n     * Stops the timer reference returned by the scheduler function.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public async stop(): Promise {\n        await super.stop();\n        if (this.client) {\n            await this.client.end();\n        }\n        return this;\n    }\n\n    /**\n     * Uses the client instance to report the given metric results.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @param {Date} timestamp\n     * @param {MetricType} type\n     * @param {ReportingResult[]} results\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    protected handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        timestamp: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        return Promise.all(results\n            .map((result) => result.result)\n            .map((carbonData) => new Promise((resolve, reject) => {\n                this.client.writeTagged(carbonData.measurement, carbonData.tags, timestamp, (err: any) => {\n                    if (err != null) {\n                        if (this.options.log) {\n                            this.options.log.error(err, this.logMetadata);\n                        }\n                        reject(err);\n                    }\n                    resolve();\n                });\n            })));\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Counter} or {@link MonotoneCounter}.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): CarbonData {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const tags = this.buildTags(ctx.registry, counter);\n        tags[\"group\"] = counter.getGroup();\n        tags[\"name\"] = counter.getName();\n\n        const prefix = this.getMetricName(counter);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = counter.getCount() || 0;\n\n        return {\n            measurement,\n            tags,\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Gauge}.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): CarbonData {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const tags = this.buildTags(ctx.registry, gauge);\n        tags[\"group\"] = gauge.getGroup();\n        tags[\"name\"] = gauge.getName();\n\n        const prefix = this.getMetricName(gauge);\n        const measurement: any = {};\n        measurement[`${prefix}.value`] = gauge.getValue() || 0;\n\n        return {\n            measurement,\n            tags,\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Histogram}.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): CarbonData {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const tags = this.buildTags(ctx.registry, histogram);\n        tags[\"group\"] = histogram.getGroup();\n        tags[\"name\"] = histogram.getName();\n\n        const prefix = this.getMetricName(histogram);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = histogram.getCount() || 0;\n        measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax());\n        measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean());\n        measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin());\n        measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            measurement,\n            tags,\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Meter}.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): CarbonData {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const tags = this.buildTags(ctx.registry, meter);\n        tags[\"group\"] = meter.getGroup();\n        tags[\"name\"] = meter.getName();\n\n        const prefix = this.getMetricName(meter);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = meter.getCount() || 0;\n        measurement[`${prefix}.m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        measurement[`${prefix}.m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        measurement[`${prefix}.m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        measurement[`${prefix}.mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, meter),\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Timer}.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): CarbonData {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const tags = this.buildTags(ctx.registry, timer);\n        tags[\"group\"] = timer.getGroup();\n        tags[\"name\"] = timer.getName();\n\n        const prefix = this.getMetricName(timer);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = timer.getCount() || 0;\n        measurement[`${prefix}.m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        measurement[`${prefix}.m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        measurement[`${prefix}.m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax());\n        measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean());\n        measurement[`${prefix}.mean_rate`] = this.getNumber(timer.getMeanRate());\n        measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin());\n        measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, timer),\n        };\n    }\n\n    /**\n     * Builds a name for the metric.\n     *\n     * @protected\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof CarbonMetricReporter\n     */\n    protected getMetricName(metric: Metric): string {\n        if (metric.getGroup()) {\n            return `${metric.getGroup()}.${metric.getName()}`;\n        }\n        return metric.getName();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n[Unreleased]\n[2.2.0] - 2018-11-30\nChanged\n\napplied new start & stop method signature\n\n[2.1.2] - 2018-11-28\nChanged\n\nadded inspector-metrics@1.16.x as peer dependency\n\n[2.1.1] - 2018-11-27\nChanged\n\nuse inspector-metrics@1.16.0\nset version of transitive dependency event-stream to 3.3.4\n\n[2.1.0] - 2018-11-26\nAdded\n\nsupport for reporting events\n\nChanged\n\nadded nodejs 11 to playground\nupdated dependencies\nfixed examples in README\nfixed naming of metrics\nrefactored playground\nuse inspector-metrics@1.15.0\n\n[2.0.0] - 2018-11-04\nAdded\n\nCHANGELOG\ncompile and test script for different node versions\n\nChanged\n\nadded nodejs 11 to travis.yml\nupdated dependencies\nuse inspector-metrics@1.13.0\nadapted new MetricLogger implementation\ncompile target from \"es2017\" to \"es6\"\n\n[1.1.0] - 2018-10-04\nAdded\n\nsupport for monotone counters\n\"description\" & \"homepage\" to package.json\njsdocs for components\n\nChanged\n\nfixed linting config\nrefactored playground\nupdated dependencies\nuse inspector-metrics@1.11.0\nrefactored build scripts\nuse compodoc as documentation tool\n\n[1.0.1] - 2018-07-08\nChanged\n\nupdated dependencies\nuse inspector-metrics@1.8.7\nadded nodejs 10 to travis.yml\n\n[1.0.0] - 2018-02-08\nInitial commit.\nAdded\n\nproject setup\nREADME\ntypescript config\nlint config\n\n\nlicensed under MIT license\nbasic carbon / graphite reporter\nmocha testing (with chai, sinon)\nJenkins pipeline\nNYC code-coverage config\nadded editorconfig file\ntravis.yml for nodejs 6, 7, 8, 9\nbasic playground setup\nuse inspector-metrics@1.8.3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            \n                class\n            \n            \n                CarbonMetricReporter\n            \n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            \n                interface\n            \n            \n                CarbonData\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            \n                interface\n            \n            \n                CarbonMetricReporterOptions\n            \n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            \n                variable\n            \n            \n                graphite\n            \n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            graphite : ^0.1.4\n        \n            inspector-metrics : ^1.17.0\n        \n            source-map-support : ^0.5.9\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            inspector-metrics : >=1.16.x\n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-carbon\nTypescript Metrics Reporter for\ngraphite carbon.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with nodejs.It uses node-graphite as graphite/carbon client.\ninstall\nnpm install --save inspector-carbon\nbasic usage\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter({\n    host: \"http://graphite-server/\",\n});\nconst registry: MetricRegistry = new MetricRegistry();\n\n// add the registry to the reporter\nreporter.addMetricRegistry(registry);\n// start reporting\nawait reporter.start();set common tags for all metrics\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter({\n    host: \"http://graphite-server/\",\n});\n\n// set common tags for all metrics\nreporter.getTags().set(\"app-name\", \"my-service\");\nreporter.getTags().set(\"app-version\", \"v1.2.3\");reporting events\nimport { Event, MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter({\n    host: \"http://graphite-server/\",\n});\n\n// build an ad-hoc event\nconst event = new Event(\"application_started\")\n    .setValue(1.0)\n    .setTag(\"mode\", \"test\")\n    .setTag(\"customTag\", \"specialValue\");\n\n// send the event to graphite\nreporter.reportEvent(event);dev\nusing the playground\nTo use the playground you need to have docker and docker-compose installed.\n# boots all services (graphite / grafana) and provisions the example dashboard\ntest-env/boot.sh\n# running playground script\n./playground.shview data in grafana\n\nNavigate to http://localhost:3000\nselect example dashboard (upper left corner: \"Home\") \"Graphite / Carbon example Dashboard\"\n\n\nLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            graphite   (lib/.../CarbonMetricReporter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/CarbonMetricReporter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            graphite\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        graphite:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"graphite\")\n                        \n                    \n\n                \n                    \n                        Graphite / carbon client module.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
