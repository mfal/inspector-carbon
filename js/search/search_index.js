var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/interfaces/CarbonData.html",[0,0.68,1,1.088]],["body/interfaces/CarbonData.html",[0,0.841,1,1.781,2,0.66,3,0.871,4,0.258,5,0.413,6,0.66,7,1.109,8,1.109,9,0.066,10,1.358,11,1.629,12,0.413,13,1.109,14,2.651,15,2.332,16,2.218,17,0.093,18,0.551,19,0.835,20,1.109,21,1.07,22,0.677,23,0.871,24,1.109,25,0.871,26,1.318,27,0.66,28,1.049,29,0.258,30,2.305,31,0.519,32,2.152,33,1.69,34,1.007,35,2.258,36,2.025,37,2.651,38,2.152,39,1.126,40,2.493,41,1.433,42,1.109,43,1.678,44,1.109,45,1.109,46,1.109,47,1.109,48,2.348,49,1.109,50,2.258,51,1.433,52,0.328,53,1.87,54,0.896,55,1.433,56,1.591,57,2.025,58,2.849,59,0.66,60,0.66,61,0.66,62,2.025,63,0.693,64,1.765,65,0.66,66,0.66,67,1.678,68,0.66,69,1.774,70,0.66,71,2.152,72,0.66,73,0.66,74,1.678,75,0.66,76,1.346,77,0.56,78,0.66,79,1.433,80,0.519,81,0.93,82,1.109,83,1.433,84,2.604,85,1.678,86,0.66,87,0.66,88,1.126,89,1.109,90,0.66,91,0.66,92,0.66,93,1.958,94,0.519,95,0.519,96,0.66,97,1.109,98,2.998,99,0.66,100,1.433,101,0.413,102,2.764,103,0.66,104,0.66,105,2.025,106,1.109,107,0.66,108,0.66,109,0.66,110,1.433,111,1.109,112,0.66,113,2.348,114,1.126,115,0.66,116,0.66,117,0.66,118,0.66,119,0.66,120,0.66,121,0.258,122,1.109,123,0.66,124,0.66,125,1.109,126,0.66,127,0.66,128,0.66,129,0.66,130,2.651,131,1.433,132,0.66,133,2.493,134,0.66,135,0.66,136,0.66,137,0.66,138,0.66,139,0.66,140,0.66,141,0.66,142,0.66,143,1.109,144,0.66,145,0.66,146,0.66,147,1.266,148,1.87,149,0.66,150,1.109,151,1.87,152,2.152,153,1.87,154,0.66,155,1.87,156,0.66,157,1.87,158,0.66,159,1.678,160,1.87,161,0.66,162,1.109,163,0.66,164,0.66,165,0.66,166,0.66,167,0.66,168,1.109,169,1.109,170,0.66,171,0.66,172,0.66,173,0.66,174,1.109,175,1.109,176,1.109,177,1.109,178,1.109,179,1.109,180,1.109,181,1.109,182,1.109,183,1.109,184,1.109,185,1.109,186,1.109,187,1.109,188,1.109,189,1.109,190,1.109,191,1.109,192,1.109,193,1.109,194,0.66,195,1.109,196,0.66,197,0.66,198,0.66,199,1.109,200,0.66,201,1.109,202,0.66,203,1.109,204,0.66,205,1.109,206,0.66,207,0.66,208,1.109,209,0.66,210,0.66,211,0.66,212,0.66,213,0.66,214,0.66,215,0.66,216,0.66,217,0.413,218,0.66,219,0.66,220,0.66,221,0.66,222,0.03]],["title/interfaces/CarbonMetricReporterOptions.html",[0,0.68,54,1.088]],["body/interfaces/CarbonMetricReporterOptions.html",[0,0.842,1,1.766,2,0.662,3,0.873,4,0.259,5,0.414,7,0.662,8,0.662,9,0.064,10,1.319,11,1.63,12,0.414,13,1.111,14,2.495,15,2.239,16,2.219,17,0.093,18,0.329,19,0.714,20,0.662,21,1.072,22,0.677,23,0.52,24,0.662,25,0.873,26,1.32,27,0.662,28,1.051,29,0.259,30,2.306,31,0.52,32,2.155,33,1.692,34,1.008,35,2.261,36,2.028,37,2.766,38,2.155,39,1.128,40,2.495,41,1.436,42,1.111,43,1.681,44,1.111,45,1.111,46,1.111,47,1.436,48,2.351,49,1.111,50,2.261,51,1.436,52,0.329,53,1.873,54,1.051,55,1.681,56,1.907,57,2.261,58,2.851,59,0.662,60,1.111,61,1.111,62,2.351,63,0.695,64,1.766,65,0.662,66,0.662,67,1.681,68,0.662,69,1.776,70,0.662,71,2.155,72,0.662,73,0.662,74,1.681,75,0.662,76,1.347,77,0.561,78,0.662,79,1.436,80,0.52,81,0.932,82,1.111,83,1.436,84,2.607,85,1.681,86,0.662,87,0.662,88,1.128,89,1.111,90,0.662,91,0.662,92,0.662,93,1.96,94,0.52,95,0.52,96,0.662,97,1.111,98,3,99,0.662,100,1.436,101,0.414,102,2.766,103,0.662,104,0.662,105,2.028,106,1.111,107,0.662,108,0.662,109,0.662,110,1.436,111,1.111,112,0.662,113,2.351,114,1.128,115,0.662,116,0.662,117,0.662,118,0.662,119,0.662,120,0.662,121,0.259,122,1.111,123,0.662,124,0.662,125,1.111,126,0.662,127,0.662,128,0.662,129,0.662,130,2.653,131,1.436,132,0.662,133,2.495,134,0.662,135,0.662,136,0.662,137,0.662,138,0.662,139,0.662,140,0.662,141,0.662,142,0.662,143,1.111,144,0.662,145,0.662,146,0.662,147,1.268,148,1.873,149,0.662,150,1.111,151,1.873,152,2.155,153,1.873,154,0.662,155,1.873,156,0.662,157,1.873,158,0.662,159,1.681,160,1.873,161,0.662,162,1.111,163,0.662,164,0.662,165,0.662,166,0.662,167,0.662,168,1.111,169,1.111,170,0.662,171,0.662,172,0.662,173,0.662,174,1.111,175,1.111,176,1.111,177,1.111,178,1.111,179,1.111,180,1.111,181,1.111,182,1.111,183,1.111,184,1.111,185,1.111,186,1.111,187,1.111,188,1.111,189,1.111,190,1.111,191,1.111,192,1.111,193,1.111,194,0.662,195,1.111,196,0.662,197,0.662,198,0.662,199,1.111,200,0.662,201,1.111,202,0.662,203,1.111,204,0.662,205,1.111,206,0.662,207,0.662,208,1.111,209,0.662,210,0.662,211,0.662,212,0.662,213,0.662,214,0.662,215,0.662,216,0.662,217,0.414,218,0.662,219,0.662,220,0.662,221,0.662,222,0.03]],["title/changelog.html",[19,0.738,121,0.58,223,1.485]],["body/changelog.html",[4,0.92,6,1.785,9,0.064,10,0.888,11,1.471,17,0.076,18,1.17,21,0.888,22,0.535,33,1.402,34,1.17,52,1.485,77,0.698,81,1.514,94,2.346,101,1.116,147,1.116,217,1.116,222,0.064,223,2.632,224,2.366,225,3.489,226,2.366,227,2.366,228,2.366,229,2.366,230,2.366,231,2.632,232,2.366,233,2.366,234,2.986,235,3.855,236,2.366,237,2.366,238,2.366,239,2.284,240,2.366,241,2.366,242,2.366,243,2.366,244,3.09,245,2.353,246,3.709,247,2.798,248,3.709,249,3.489,250,1.785,251,3.119,252,3.489,253,2.366,254,2.366,255,3.119,256,3.119,257,1.471,258,2.353,259,2.366,260,1.785,261,3.489,262,2.366,263,2.366,264,2.366,265,2.366,266,2.366,267,2.366,268,2.366,269,2.366,270,3.119,271,2.366,272,2.366,273,2.366,274,2.366,275,2.366,276,3.119,277,3.709,278,2.366,279,2.366,280,2.366,281,2.366,282,2.366,283,3.119,284,2.366,285,2.366,286,2.366,287,2.366,288,2.366,289,3.119,290,1.785,291,1.471,292,2.366,293,1.402,294,2.353,295,2.366,296,2.366,297,2.366,298,2.366,299,2.366,300,2.366,301,2.366,302,1.116,303,2.366,304,2.366,305,2.366,306,2.366,307,2.366,308,2.366]],["title/coverage.html",[302,1.447]],["body/coverage.html",[0,1.109,1,1.506,4,0.941,5,1.947,9,0.077,16,1.892,17,0.087,18,1.198,22,0.722,54,1.506,63,1.506,64,1.506,77,0.941,222,0.077,302,1.506,309,3.193,310,2.409,311,3.998,312,3.193,313,3.193,314,3.193,315,3.193,316,1.892,317,3.193,318,2.409,319,2.409]],["title/dependencies.html",[239,1.631,320,1.968]],["body/dependencies.html",[3,1.986,9,0.079,10,1.258,17,0.087,22,0.758,26,1.986,52,1.258,222,0.079,239,1.986,245,2.529,321,3.352,322,3.352,323,3.352]],["title/index.html",[12,0.928,19,0.738,121,0.58]],["body/index.html",[9,0.062,10,1.501,11,1.941,15,1.804,17,0.091,21,1.56,22,0.861,23,2.031,25,2.322,28,1.076,29,0.673,30,2.257,34,1.429,39,2.257,52,1.544,56,2.031,64,1.941,69,2.031,77,1.123,81,1.372,95,1.804,101,1.076,114,1.804,121,0.673,147,1.076,217,1.076,222,0.062,231,1.721,244,1.721,247,2.585,250,2.585,257,1.436,258,1.721,260,2.297,290,1.721,291,1.076,293,1.352,294,1.721,324,2.282,325,2.282,326,2.282,327,2.282,328,2.282,329,3.427,330,2.282,331,2.282,332,2.282,333,3.427,334,2.282,335,2.282,336,2.282,337,3.045,338,3.045,339,2.282,340,2.282,341,2.282,342,2.282,343,2.282,344,2.282,345,2.282,346,2.282,347,2.282,348,2.282,349,3.045,350,2.282,351,2.282,352,3.045,353,2.282,354,3.427,355,2.282,356,2.282,357,2.282,358,2.282,359,2.282,360,2.282,361,2.282,362,2.282,363,2.282,364,2.282,365,2.282]],["title/license.html",[19,0.738,121,0.58,291,0.928]],["body/license.html",[4,0.827,9,0.071,17,0.071,18,1.053,34,1.053,81,1.305,222,0.071,234,2.117,291,1.324,293,1.663,366,3.781,367,2.806,368,3.479,369,2.806,370,2.806,371,2.806,372,2.806,373,3.479,374,2.806,375,3.952,376,4.275,377,2.806,378,3.479,379,3.781,380,2.806,381,3.781,382,3.479,383,2.806,384,2.806,385,2.806,386,2.806,387,2.806,388,2.806,389,2.806,390,2.806,391,2.806,392,2.806,393,2.806,394,2.806,395,2.806,396,2.806,397,3.479,398,3.479,399,2.806,400,2.806,401,2.806,402,3.479,403,2.806,404,2.806,405,2.806,406,2.806,407,2.806,408,2.806,409,2.806,410,2.806,411,2.806,412,2.806,413,2.806,414,2.806,415,2.806,416,2.806,417,2.806,418,2.806,419,2.806,420,2.806,421,2.806,422,2.806,423,2.806,424,2.806]],["title/modules.html",[29,0.904]],["body/modules.html",[9,0.081,17,0.081,29,1.019,222,0.081]],["title/overview.html",[425,2.314]],["body/overview.html",[0,1.009,9,0.08,17,0.08,63,1.613,80,2.027,222,0.08,425,2.58,426,3.421]],["title/unit-test.html",[76,1.177,257,1.177]],["body/unit-test.html",[4,0.993,9,0.079,17,0.079,76,1.589,77,0.993,88,1.996,222,0.079,257,1.589,302,1.589,310,2.541,318,2.541,319,2.541,427,3.369,428,3.369]],["title/miscellaneous/variables.html",[316,1.631,429,1.485]],["body/miscellaneous/variables.html",[5,1.566,9,0.079,12,1.566,17,0.086,21,1.245,22,0.945,28,1.566,29,0.979,31,1.967,93,1.967,222,0.079,316,1.967,429,2.504,430,3.319,431,3.319]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":160,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["0.1.3",{"_index":321,"title":{},"body":{"dependencies.html":{}}}],["0.5.9",{"_index":323,"title":{},"body":{"dependencies.html":{}}}],["02",{"_index":286,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":255,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":282,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":283,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":80,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"overview.html":{}}}],["1.0.0",{"_index":285,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":281,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":269,"title":{},"body":{"changelog.html":{}}}],["1.16.0",{"_index":322,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":317,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":270,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":311,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":75,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["11",{"_index":235,"title":{},"body":{"changelog.html":{}}}],["17/17",{"_index":312,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":426,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":254,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":242,"title":{},"body":{"changelog.html":{}}}],["2.1.1",{"_index":233,"title":{},"body":{"changelog.html":{}}}],["2/3",{"_index":315,"title":{},"body":{"coverage.html":{}}}],["2018",{"_index":234,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["26",{"_index":243,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":236,"title":{},"body":{"changelog.html":{}}}],["3.3.4",{"_index":241,"title":{},"body":{"changelog.html":{}}}],["3/3",{"_index":313,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":304,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":314,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":305,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":306,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":307,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":396,"title":{},"body":{"license.html":{}}}],["action",{"_index":418,"title":{},"body":{"license.html":{}}}],["ad",{"_index":244,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["adapt",{"_index":263,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":334,"title":{},"body":{"index.html":{}}}],["adher",{"_index":229,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":389,"title":{},"body":{"license.html":{}}}],["aris",{"_index":422,"title":{},"body":{"license.html":{}}}],["array",{"_index":134,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["associ",{"_index":377,"title":{},"body":{"license.html":{}}}],["async",{"_index":106,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["author",{"_index":411,"title":{},"body":{"license.html":{}}}],["await",{"_index":115,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["base",{"_index":227,"title":{},"body":{"changelog.html":{}}}],["basic",{"_index":294,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["boot",{"_index":351,"title":{},"body":{"index.html":{}}}],["branch",{"_index":427,"title":{},"body":{"unit-test.html":{}}}],["build",{"_index":147,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{}}}],["c",{"_index":367,"title":{},"body":{"license.html":{}}}],["carbon",{"_index":21,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["carbondata",{"_index":1,"title":{"interfaces/CarbonData.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{}}}],["carbondata.tag",{"_index":142,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["carbonmetricreport",{"_index":64,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"index.html":{}}}],["carbonmetricreporteropt",{"_index":54,"title":{"interfaces/CarbonMetricReporterOptions.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{}}}],["chai",{"_index":296,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":94,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{}}}],["changelog",{"_index":223,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["charg",{"_index":372,"title":{},"body":{"license.html":{}}}],["claim",{"_index":414,"title":{},"body":{"license.html":{}}}],["class",{"_index":63,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"overview.html":{}}}],["client",{"_index":28,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["clock",{"_index":32,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["code",{"_index":301,"title":{},"body":{"changelog.html":{}}}],["combin",{"_index":24,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["commit",{"_index":288,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":95,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["compil",{"_index":256,"title":{},"body":{"changelog.html":{}}}],["compodoc",{"_index":279,"title":{},"body":{"changelog.html":{}}}],["compon",{"_index":275,"title":{},"body":{"changelog.html":{}}}],["compos",{"_index":350,"title":{},"body":{"index.html":{}}}],["condit",{"_index":395,"title":{},"body":{"license.html":{}}}],["config",{"_index":277,"title":{},"body":{"changelog.html":{}}}],["connect",{"_index":424,"title":{},"body":{"license.html":{}}}],["consol",{"_index":73,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["const",{"_index":30,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["constructor",{"_index":72,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["contract",{"_index":419,"title":{},"body":{"license.html":{}}}],["copi",{"_index":375,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":366,"title":{},"body":{"license.html":{}}}],["corner",{"_index":364,"title":{},"body":{"index.html":{}}}],["counter",{"_index":33,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{}}}],["counter.getcount",{"_index":150,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["counter.getgroup",{"_index":154,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["counter.getnam",{"_index":156,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["coverag",{"_index":302,"title":{"coverage.html":{}},"body":{"changelog.html":{},"coverage.html":{},"unit-test.html":{}}}],["creat",{"_index":70,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["ctx",{"_index":133,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["current",{"_index":87,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["damag",{"_index":415,"title":{},"body":{"license.html":{}}}],["dashboard",{"_index":354,"title":{},"body":{"index.html":{}}}],["data",{"_index":358,"title":{},"body":{"index.html":{}}}],["date",{"_index":110,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["deal",{"_index":378,"title":{},"body":{"license.html":{}}}],["default",{"_index":431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["depend",{"_index":239,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"interfaces/CarbonData.html":{},"changelog.html":{}}}],["determin",{"_index":86,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["differ",{"_index":259,"title":{},"body":{"changelog.html":{}}}],["distribut",{"_index":387,"title":{},"body":{"license.html":{}}}],["docker",{"_index":349,"title":{},"body":{"index.html":{}}}],["document",{"_index":18,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"license.html":{}}}],["editorconfig",{"_index":303,"title":{},"body":{"changelog.html":{}}}],["env/boot.sh",{"_index":355,"title":{},"body":{"index.html":{}}}],["err",{"_index":143,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["es2017",{"_index":267,"title":{},"body":{"changelog.html":{}}}],["es6",{"_index":268,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":34,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event(\"application_start",{"_index":341,"title":{},"body":{"index.html":{}}}],["event.gettim",{"_index":111,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["exampl",{"_index":250,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["export",{"_index":53,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["express",{"_index":404,"title":{},"body":{"license.html":{}}}],["extend",{"_index":55,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["failur",{"_index":61,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["fit",{"_index":407,"title":{},"body":{"license.html":{}}}],["fix",{"_index":249,"title":{},"body":{"changelog.html":{}}}],["flushev",{"_index":119,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["follow",{"_index":394,"title":{},"body":{"license.html":{}}}],["format",{"_index":226,"title":{},"body":{"changelog.html":{}}}],["free",{"_index":371,"title":{},"body":{"license.html":{}}}],["function",{"_index":88,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"unit-test.html":{}}}],["furnish",{"_index":392,"title":{},"body":{"license.html":{}}}],["gaug",{"_index":35,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["gauge.getgroup",{"_index":163,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["gauge.getnam",{"_index":164,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["gauge.getvalu",{"_index":162,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["get",{"_index":19,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["getlog",{"_index":99,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["getmetricname(metr",{"_index":218,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["given",{"_index":129,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["grafana",{"_index":352,"title":{},"body":{"index.html":{}}}],["grant",{"_index":370,"title":{},"body":{"license.html":{}}}],["graphit",{"_index":22,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["graphite.createclient(this.options.host",{"_index":123,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["graphite/carbon",{"_index":328,"title":{},"body":{"index.html":{}}}],["handleresult",{"_index":132,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["helper",{"_index":7,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["herebi",{"_index":369,"title":{},"body":{"license.html":{}}}],["histogram",{"_index":36,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["histogram.getcount",{"_index":168,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["histogram.getgroup",{"_index":171,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["histogram.getnam",{"_index":172,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["histogram.getsnapshot",{"_index":170,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["hoc",{"_index":340,"title":{},"body":{"index.html":{}}}],["holder",{"_index":412,"title":{},"body":{"license.html":{}}}],["home",{"_index":365,"title":{},"body":{"index.html":{}}}],["homepag",{"_index":272,"title":{},"body":{"changelog.html":{}}}],["host",{"_index":56,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["http://graphit",{"_index":333,"title":{},"body":{"index.html":{}}}],["http://localhost:3000",{"_index":360,"title":{},"body":{"index.html":{}}}],["identifi",{"_index":309,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":265,"title":{},"body":{"changelog.html":{}}}],["impli",{"_index":405,"title":{},"body":{"license.html":{}}}],["import",{"_index":25,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["includ",{"_index":381,"title":{},"body":{"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["initi",{"_index":287,"title":{},"body":{"changelog.html":{}}}],["inspector",{"_index":52,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["instal",{"_index":329,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":69,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"overview.html":{}}}],["interv",{"_index":82,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["isnan(valu",{"_index":151,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["it'",{"_index":92,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["jenkin",{"_index":298,"title":{},"body":{"changelog.html":{}}}],["jsdoc",{"_index":274,"title":{},"body":{"changelog.html":{}}}],["keep",{"_index":228,"title":{},"body":{"changelog.html":{}}}],["kind",{"_index":403,"title":{},"body":{"license.html":{}}}],["left",{"_index":363,"title":{},"body":{"index.html":{}}}],["liabil",{"_index":416,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":413,"title":{},"body":{"license.html":{}}}],["lib/.../carbonmetricreporter.t",{"_index":430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/metrics/carbonmetricreporter.t",{"_index":5,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["librari",{"_index":324,"title":{},"body":{"index.html":{}}}],["licens",{"_index":291,"title":{"license.html":{}},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["limit",{"_index":382,"title":{},"body":{"license.html":{}}}],["line",{"_index":428,"title":{},"body":{"unit-test.html":{}}}],["link",{"_index":84,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["lint",{"_index":276,"title":{},"body":{"changelog.html":{}}}],["log",{"_index":62,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["logger",{"_index":37,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["logmetadata",{"_index":68,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["made",{"_index":325,"title":{},"body":{"index.html":{}}}],["map",{"_index":26,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"dependencies.html":{}}}],["map((carbondata",{"_index":138,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["map((result",{"_index":136,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["match",{"_index":222,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["meant",{"_index":326,"title":{},"body":{"index.html":{}}}],["measur",{"_index":14,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.count",{"_index":159,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.m15_r",{"_index":199,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.m1_r",{"_index":201,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.m5_r",{"_index":203,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.max",{"_index":174,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.mean",{"_index":176,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.mean_r",{"_index":205,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.min",{"_index":178,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p50",{"_index":180,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p75",{"_index":182,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p95",{"_index":184,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p98",{"_index":186,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p99",{"_index":188,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.p999",{"_index":190,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.stddev",{"_index":192,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["measurement[`${prefix}.valu",{"_index":166,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["memberof",{"_index":58,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["merchant",{"_index":406,"title":{},"body":{"license.html":{}}}],["merg",{"_index":385,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":66,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["meter",{"_index":38,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["meter.getcount",{"_index":195,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["meter.getgroup",{"_index":196,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["meter.getnam",{"_index":197,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metric",{"_index":10,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["metric.getgroup",{"_index":219,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metric.getgroup()}.${metric.getnam",{"_index":220,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metric.getnam",{"_index":221,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metriclogg",{"_index":264,"title":{},"body":{"changelog.html":{}}}],["metricregistri",{"_index":39,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["metricreport",{"_index":65,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metrics@1.11.0",{"_index":278,"title":{},"body":{"changelog.html":{}}}],["metrics@1.13.0",{"_index":262,"title":{},"body":{"changelog.html":{}}}],["metrics@1.15.0",{"_index":253,"title":{},"body":{"changelog.html":{}}}],["metrics@1.16.0",{"_index":237,"title":{},"body":{"changelog.html":{}}}],["metrics@1.8.3",{"_index":308,"title":{},"body":{"changelog.html":{}}}],["metrics@1.8.7",{"_index":284,"title":{},"body":{"changelog.html":{}}}],["metricsetreportcontext",{"_index":40,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["metrictyp",{"_index":41,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["millisecond",{"_index":42,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["minim",{"_index":60,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["minreportingtimeout",{"_index":79,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["miscellan",{"_index":429,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mit",{"_index":293,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["mocha",{"_index":295,"title":{},"body":{"changelog.html":{}}}],["modifi",{"_index":384,"title":{},"body":{"license.html":{}}}],["modul",{"_index":29,"title":{"modules.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["monoton",{"_index":271,"title":{},"body":{"changelog.html":{}}}],["monotonecount",{"_index":43,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["name",{"_index":217,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{}}}],["navig",{"_index":359,"title":{},"body":{"index.html":{}}}],["need",{"_index":348,"title":{},"body":{"index.html":{}}}],["new",{"_index":77,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["node",{"_index":260,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nodej",{"_index":246,"title":{},"body":{"changelog.html":{}}}],["nodejs.it",{"_index":327,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":410,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":224,"title":{},"body":{"changelog.html":{}}}],["noth",{"_index":118,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["notic",{"_index":397,"title":{},"body":{"license.html":{}}}],["npm",{"_index":330,"title":{},"body":{"index.html":{}}}],["null",{"_index":113,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["number",{"_index":85,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["nyc",{"_index":300,"title":{},"body":{"changelog.html":{}}}],["obtain",{"_index":374,"title":{},"body":{"license.html":{}}}],["otherwis",{"_index":421,"title":{},"body":{"license.html":{}}}],["out",{"_index":423,"title":{},"body":{"license.html":{}}}],["overallctx",{"_index":112,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["overallreportcontext",{"_index":44,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["overview",{"_index":425,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":320,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":273,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":102,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["particular",{"_index":408,"title":{},"body":{"license.html":{}}}],["period",{"_index":120,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["permiss",{"_index":368,"title":{},"body":{"license.html":{}}}],["permit",{"_index":391,"title":{},"body":{"license.html":{}}}],["person",{"_index":373,"title":{},"body":{"license.html":{}}}],["pipelin",{"_index":299,"title":{},"body":{"changelog.html":{}}}],["playground",{"_index":247,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["playground.shview",{"_index":357,"title":{},"body":{"index.html":{}}}],["portion",{"_index":400,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":157,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["privat",{"_index":67,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["project",{"_index":225,"title":{},"body":{"changelog.html":{}}}],["promis",{"_index":105,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["promise((resolv",{"_index":139,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["promise.all(result",{"_index":135,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["properti",{"_index":13,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["protect",{"_index":130,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["provid",{"_index":401,"title":{},"body":{"license.html":{}}}],["provis",{"_index":353,"title":{},"body":{"index.html":{}}}],["public",{"_index":71,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["publish",{"_index":386,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":409,"title":{},"body":{"license.html":{}}}],["readm",{"_index":251,"title":{},"body":{"changelog.html":{}}}],["readonli",{"_index":59,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["refactor",{"_index":252,"title":{},"body":{"changelog.html":{}}}],["refer",{"_index":126,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["registri",{"_index":114,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["reject",{"_index":140,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reject(err",{"_index":145,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["report",{"_index":11,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{}}}],["reportcount",{"_index":149,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reporter.addmetricregistry(registri",{"_index":335,"title":{},"body":{"index.html":{}}}],["reporter.gettags().set(\"app",{"_index":337,"title":{},"body":{"index.html":{}}}],["reporter.reportevent(event);dev",{"_index":347,"title":{},"body":{"index.html":{}}}],["reporter.start();set",{"_index":336,"title":{},"body":{"index.html":{}}}],["reportevent>(ev",{"_index":107,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reportgauge(gaug",{"_index":161,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reporthistogram(histogram",{"_index":167,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reportingresult",{"_index":45,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reportinterv",{"_index":74,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reportmeter(met",{"_index":194,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["reporttimer(tim",{"_index":207,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["repres",{"_index":8,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["require(\"graphit",{"_index":31,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"miscellaneous/variables.html":{}}}],["resolv",{"_index":146,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["restrict",{"_index":380,"title":{},"body":{"license.html":{}}}],["result",{"_index":9,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["result.result",{"_index":137,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["return",{"_index":98,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["right",{"_index":383,"title":{},"body":{"license.html":{}}}],["run",{"_index":356,"title":{},"body":{"index.html":{}}}],["save",{"_index":331,"title":{},"body":{"index.html":{}}}],["schedul",{"_index":48,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["scheduledmetricreport",{"_index":46,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["scheduledmetricreporteropt",{"_index":47,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["script",{"_index":258,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["select",{"_index":361,"title":{},"body":{"index.html":{}}}],["sell",{"_index":390,"title":{},"body":{"license.html":{}}}],["semant",{"_index":230,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":346,"title":{},"body":{"index.html":{}}}],["sent",{"_index":20,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["server",{"_index":23,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["servic",{"_index":338,"title":{},"body":{"index.html":{}}}],["set",{"_index":101,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{}}}],["setinterv",{"_index":78,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["setlog(log",{"_index":103,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["settag(\"customtag",{"_index":344,"title":{},"body":{"index.html":{}}}],["settag(\"mod",{"_index":343,"title":{},"body":{"index.html":{}}}],["setup",{"_index":289,"title":{},"body":{"changelog.html":{}}}],["setvalue(1.0",{"_index":342,"title":{},"body":{"index.html":{}}}],["shall",{"_index":398,"title":{},"body":{"license.html":{}}}],["sinon",{"_index":297,"title":{},"body":{"changelog.html":{}}}],["snapshot",{"_index":169,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["softwar",{"_index":376,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"dependencies.html":{}}}],["specialvalu",{"_index":345,"title":{},"body":{"index.html":{}}}],["specifi",{"_index":148,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["start",{"_index":121,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["statement",{"_index":310,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["stdclock",{"_index":49,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["stop",{"_index":125,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["stream",{"_index":240,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":57,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["subject",{"_index":393,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":388,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":399,"title":{},"body":{"license.html":{}}}],["super",{"_index":96,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["super.start",{"_index":124,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["super.stop",{"_index":127,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["support",{"_index":245,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["support/regist",{"_index":27,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["tabl",{"_index":319,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":318,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":15,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"index.html":{}}}],["tags[\"group",{"_index":153,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["tags[\"nam",{"_index":155,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["target",{"_index":266,"title":{},"body":{"changelog.html":{}}}],["test",{"_index":257,"title":{"unit-test.html":{}},"body":{"changelog.html":{},"index.html":{},"unit-test.html":{}}}],["tevent",{"_index":108,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.buildtags(ctx.registri",{"_index":152,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.client",{"_index":122,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.client.end",{"_index":128,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.client.writetagged(carbondata.measur",{"_index":141,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.createoverallreportcontext",{"_index":117,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(count",{"_index":158,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(gaug",{"_index":165,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(histogram",{"_index":173,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(met",{"_index":198,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getmetricname(tim",{"_index":212,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(meter.get15minuter",{"_index":200,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(meter.get1minuter",{"_index":202,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(meter.get5minuter",{"_index":204,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(meter.getmeanr",{"_index":206,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get75thpercentil",{"_index":183,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get95thpercentil",{"_index":185,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get98thpercentil",{"_index":187,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get999thpercentil",{"_index":191,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.get99thpercentil",{"_index":189,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getmax",{"_index":175,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getmean",{"_index":177,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getmedian",{"_index":181,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getmin",{"_index":179,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(snapshot.getstddev",{"_index":193,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(timer.get15minuter",{"_index":213,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(timer.get1minuter",{"_index":214,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(timer.get5minuter",{"_index":215,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.getnumber(timer.getmeanr",{"_index":216,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.handleresult",{"_index":116,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.logmetadata",{"_index":97,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.options.log",{"_index":100,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.options.log.error(err",{"_index":144,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["this.reportgauge(ev",{"_index":109,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["time",{"_index":83,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timeout",{"_index":90,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer",{"_index":50,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer.getcount",{"_index":208,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer.getgroup",{"_index":210,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer.getnam",{"_index":211,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timer.getsnapshot",{"_index":209,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timestamp",{"_index":131,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["timeunit",{"_index":51,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["tool",{"_index":280,"title":{},"body":{"changelog.html":{}}}],["tort",{"_index":420,"title":{},"body":{"license.html":{}}}],["transit",{"_index":238,"title":{},"body":{"changelog.html":{}}}],["travis.yml",{"_index":261,"title":{},"body":{"changelog.html":{}}}],["trigger",{"_index":89,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["type",{"_index":16,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"coverage.html":{}}}],["typescript",{"_index":290,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["under",{"_index":292,"title":{},"body":{"changelog.html":{}}}],["unit",{"_index":76,"title":{"unit-test.html":{}},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"unit-test.html":{}}}],["unreleas",{"_index":232,"title":{},"body":{"changelog.html":{}}}],["updat",{"_index":248,"title":{},"body":{"changelog.html":{}}}],["upper",{"_index":362,"title":{},"body":{"index.html":{}}}],["us",{"_index":81,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":332,"title":{},"body":{"index.html":{}}}],["v1.2.3\");report",{"_index":339,"title":{},"body":{"index.html":{}}}],["valu",{"_index":93,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{},"miscellaneous/variables.html":{}}}],["variabl",{"_index":316,"title":{"miscellaneous/variables.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":231,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["void",{"_index":104,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["warranti",{"_index":402,"title":{},"body":{"license.html":{}}}],["wether",{"_index":91,"title":{},"body":{"interfaces/CarbonData.html":{},"interfaces/CarbonMetricReporterOptions.html":{}}}],["whether",{"_index":417,"title":{},"body":{"license.html":{}}}],["without",{"_index":379,"title":{},"body":{"license.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/CarbonData.html":{"url":"interfaces/CarbonData.html","title":"interface - CarbonData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CarbonData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/CarbonMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for representing the result of a metric report.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        measurement\n                                \n                                \n                                        tags\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        measurement\n                                    \n                                \n                                \n                                    \n                                        measurement:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Document that is getting sent to the carbon / graphite server.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                    \n                                \n                                \n                                    \n                                        tags:     Tags\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Tags\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Combined tags for the metric.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Graphite / carbon client module.\n */\nconst graphite = require(\"graphite\");\n\nimport {\n    Clock,\n    Counter,\n    Event,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    Scheduler,\n    StdClock,\n    Tags,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\nexport interface CarbonMetricReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * The graphite / carbon host.\n     *\n     * @type {string}\n     * @memberof CarbonMetricReporterOptions\n     */\n    readonly host: string;\n    /**\n     * Minimal logger interface to report failures.\n     *\n     * @type {Logger}\n     * @memberof CarbonMetricReporterOptions\n     */\n    log: Logger;\n}\n\n/**\n * Helper interface for representing the result of a metric report.\n *\n * @export\n * @interface CarbonData\n */\nexport interface CarbonData {\n    /**\n     * Document that is getting sent to the carbon / graphite server.\n     *\n     * @type {*}\n     * @memberof CarbonData\n     */\n    measurement: any;\n    /**\n     * Combined tags for the metric.\n     *\n     * @type {Tags}\n     * @memberof CarbonData\n     */\n    tags: Tags;\n}\n\n/**\n * Metric reporter for graphite / carbon.\n *\n * @export\n * @class CarbonMetricReporter\n * @extends {MetricReporter}\n */\nexport class CarbonMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * Graphite / carbon client instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private client: any;\n\n    /**\n     * Creates an instance of CarbonMetricReporter.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public constructor({\n        host,\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: {\n        /**\n         * The graphite / carbon host.\n         * @type {string}\n         */\n        host: string,\n        /**\n         * The logger instance used to report metrics.\n         * @type {Logger}\n         */\n        log?: Logger,\n        /**\n         * Reporting interval in the time-unit of {@link #unit}.\n         * @type {number}\n         */\n        reportInterval?: number;\n        /**\n         * The time-unit of the reporting interval.\n         * @type {TimeUnit}\n         */\n        unit?: TimeUnit;\n        /**\n         * The clock instance used determine the current time.\n         * @type {Clock}\n         */\n        clock?: Clock;\n        /**\n         * The scheduler function used to trigger reporting.\n         * @type {Scheduler}\n         */\n        scheduler?: Scheduler;\n        /**\n         * The timeout in which a metrics gets reported wether it's value has changed or not.\n         * @type {number}\n         */\n        minReportingTimeout?: number;\n        /**\n         * Common tags for this reporter instance.\n         * @type {Map}\n         */\n        tags?: Map;\n    }) {\n        super({\n            clock,\n            host,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            tags,\n            unit,\n        });\n\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof CarbonMetricReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {Logger} log\n     * @memberof CarbonMetricReporter\n     */\n    public setLog(log: Logger): void {\n        this.options.log = log;\n    }\n\n    /**\n     * Reports an {@link Event}.\n     *\n     * @param {Event} event\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        const result = this.reportGauge(event, {\n            date: event.getTime(),\n            metrics: [],\n            overallCtx: null,\n            registry: null,\n            type: \"gauge\",\n        });\n\n        if (result) {\n            await this.handleResults(\n                this.createOverallReportContext(),\n                null,\n                event.getTime(),\n                \"gauge\",\n                [{\n                    metric: event,\n                    result,\n                }],\n            );\n        }\n\n        return event;\n    }\n\n    /**\n     * Does nothing\n     *\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    public async flushEvents(): Promise {\n    }\n\n    /**\n     * Uses the scheduler function to trigger periodical reporting.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public start(): this {\n        this.client = graphite.createClient(this.options.host);\n        return super.start();\n    }\n\n    /**\n     * Stops the timer reference returned by the scheduler function.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public stop(): this {\n        super.stop();\n        if (this.client) {\n            this.client.end();\n        }\n        return this;\n    }\n\n    /**\n     * Uses the client instance to report the given metric results.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @param {Date} timestamp\n     * @param {MetricType} type\n     * @param {ReportingResult[]} results\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    protected handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        timestamp: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        return Promise.all(results\n            .map((result) => result.result)\n            .map((carbonData) => new Promise((resolve, reject) => {\n                this.client.writeTagged(carbonData.measurement, carbonData.tags, timestamp, (err: any) => {\n                    if (err != null) {\n                        if (this.options.log) {\n                            this.options.log.error(err, this.logMetadata);\n                        }\n                        reject(err);\n                    }\n                    resolve();\n                });\n            })));\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Counter} or {@link MonotoneCounter}.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): CarbonData {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const tags = this.buildTags(ctx.registry, counter);\n        tags[\"group\"] = counter.getGroup();\n        tags[\"name\"] = counter.getName();\n\n        const prefix = this.getMetricName(counter);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = counter.getCount() || 0;\n\n        return {\n            measurement,\n            tags,\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Gauge}.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): CarbonData {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const tags = this.buildTags(ctx.registry, gauge);\n        tags[\"group\"] = gauge.getGroup();\n        tags[\"name\"] = gauge.getName();\n\n        const prefix = this.getMetricName(gauge);\n        const measurement: any = {};\n        measurement[`${prefix}.value`] = gauge.getValue() || 0;\n\n        return {\n            measurement,\n            tags,\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Histogram}.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): CarbonData {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const tags = this.buildTags(ctx.registry, histogram);\n        tags[\"group\"] = histogram.getGroup();\n        tags[\"name\"] = histogram.getName();\n\n        const prefix = this.getMetricName(histogram);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = histogram.getCount() || 0;\n        measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax());\n        measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean());\n        measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin());\n        measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            measurement,\n            tags,\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Meter}.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): CarbonData {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const tags = this.buildTags(ctx.registry, meter);\n        tags[\"group\"] = meter.getGroup();\n        tags[\"name\"] = meter.getName();\n\n        const prefix = this.getMetricName(meter);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = meter.getCount() || 0;\n        measurement[`${prefix}.m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        measurement[`${prefix}.m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        measurement[`${prefix}.m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        measurement[`${prefix}.mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, meter),\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Timer}.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): CarbonData {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const tags = this.buildTags(ctx.registry, timer);\n        tags[\"group\"] = timer.getGroup();\n        tags[\"name\"] = timer.getName();\n\n        const prefix = this.getMetricName(timer);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = timer.getCount() || 0;\n        measurement[`${prefix}.m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        measurement[`${prefix}.m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        measurement[`${prefix}.m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax());\n        measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean());\n        measurement[`${prefix}.mean_rate`] = this.getNumber(timer.getMeanRate());\n        measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin());\n        measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, timer),\n        };\n    }\n\n    /**\n     * Builds a name for the metric.\n     *\n     * @protected\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof CarbonMetricReporter\n     */\n    protected getMetricName(metric: Metric): string {\n        if (metric.getGroup()) {\n            return `${metric.getGroup()}.${metric.getName()}`;\n        }\n        return metric.getName();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CarbonMetricReporterOptions.html":{"url":"interfaces/CarbonMetricReporterOptions.html","title":"interface - CarbonMetricReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CarbonMetricReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/CarbonMetricReporter.ts\n        \n\n\n            \n                Extends\n            \n            \n                    ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        host\n                                \n                                \n                                        log\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                    \n                                \n                                \n                                    \n                                        host:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The graphite / carbon host.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                    \n                                \n                                \n                                    \n                                        log:     Logger\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Logger\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Minimal logger interface to report failures.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Graphite / carbon client module.\n */\nconst graphite = require(\"graphite\");\n\nimport {\n    Clock,\n    Counter,\n    Event,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    Scheduler,\n    StdClock,\n    Tags,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\nexport interface CarbonMetricReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * The graphite / carbon host.\n     *\n     * @type {string}\n     * @memberof CarbonMetricReporterOptions\n     */\n    readonly host: string;\n    /**\n     * Minimal logger interface to report failures.\n     *\n     * @type {Logger}\n     * @memberof CarbonMetricReporterOptions\n     */\n    log: Logger;\n}\n\n/**\n * Helper interface for representing the result of a metric report.\n *\n * @export\n * @interface CarbonData\n */\nexport interface CarbonData {\n    /**\n     * Document that is getting sent to the carbon / graphite server.\n     *\n     * @type {*}\n     * @memberof CarbonData\n     */\n    measurement: any;\n    /**\n     * Combined tags for the metric.\n     *\n     * @type {Tags}\n     * @memberof CarbonData\n     */\n    tags: Tags;\n}\n\n/**\n * Metric reporter for graphite / carbon.\n *\n * @export\n * @class CarbonMetricReporter\n * @extends {MetricReporter}\n */\nexport class CarbonMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * Graphite / carbon client instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof CarbonMetricReporter\n     */\n    private client: any;\n\n    /**\n     * Creates an instance of CarbonMetricReporter.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public constructor({\n        host,\n        log = console,\n        reportInterval = 1000,\n        unit = MILLISECOND,\n        clock = new StdClock(),\n        scheduler = setInterval,\n        minReportingTimeout = 1,\n        tags = new Map(),\n    }: {\n        /**\n         * The graphite / carbon host.\n         * @type {string}\n         */\n        host: string,\n        /**\n         * The logger instance used to report metrics.\n         * @type {Logger}\n         */\n        log?: Logger,\n        /**\n         * Reporting interval in the time-unit of {@link #unit}.\n         * @type {number}\n         */\n        reportInterval?: number;\n        /**\n         * The time-unit of the reporting interval.\n         * @type {TimeUnit}\n         */\n        unit?: TimeUnit;\n        /**\n         * The clock instance used determine the current time.\n         * @type {Clock}\n         */\n        clock?: Clock;\n        /**\n         * The scheduler function used to trigger reporting.\n         * @type {Scheduler}\n         */\n        scheduler?: Scheduler;\n        /**\n         * The timeout in which a metrics gets reported wether it's value has changed or not.\n         * @type {number}\n         */\n        minReportingTimeout?: number;\n        /**\n         * Common tags for this reporter instance.\n         * @type {Map}\n         */\n        tags?: Map;\n    }) {\n        super({\n            clock,\n            host,\n            log,\n            minReportingTimeout,\n            reportInterval,\n            scheduler,\n            tags,\n            unit,\n        });\n\n        this.logMetadata = {\n            reportInterval,\n            tags,\n            unit,\n        };\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof CarbonMetricReporter\n     */\n    public getLog(): Logger {\n        return this.options.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {Logger} log\n     * @memberof CarbonMetricReporter\n     */\n    public setLog(log: Logger): void {\n        this.options.log = log;\n    }\n\n    /**\n     * Reports an {@link Event}.\n     *\n     * @param {Event} event\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        const result = this.reportGauge(event, {\n            date: event.getTime(),\n            metrics: [],\n            overallCtx: null,\n            registry: null,\n            type: \"gauge\",\n        });\n\n        if (result) {\n            await this.handleResults(\n                this.createOverallReportContext(),\n                null,\n                event.getTime(),\n                \"gauge\",\n                [{\n                    metric: event,\n                    result,\n                }],\n            );\n        }\n\n        return event;\n    }\n\n    /**\n     * Does nothing\n     *\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    public async flushEvents(): Promise {\n    }\n\n    /**\n     * Uses the scheduler function to trigger periodical reporting.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public start(): this {\n        this.client = graphite.createClient(this.options.host);\n        return super.start();\n    }\n\n    /**\n     * Stops the timer reference returned by the scheduler function.\n     *\n     * @memberof CarbonMetricReporter\n     */\n    public stop(): this {\n        super.stop();\n        if (this.client) {\n            this.client.end();\n        }\n        return this;\n    }\n\n    /**\n     * Uses the client instance to report the given metric results.\n     *\n     * @protected\n     * @param {MetricRegistry} registry\n     * @param {Date} timestamp\n     * @param {MetricType} type\n     * @param {ReportingResult[]} results\n     * @returns {Promise}\n     * @memberof CarbonMetricReporter\n     */\n    protected handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        timestamp: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        return Promise.all(results\n            .map((result) => result.result)\n            .map((carbonData) => new Promise((resolve, reject) => {\n                this.client.writeTagged(carbonData.measurement, carbonData.tags, timestamp, (err: any) => {\n                    if (err != null) {\n                        if (this.options.log) {\n                            this.options.log.error(err, this.logMetadata);\n                        }\n                        reject(err);\n                    }\n                    resolve();\n                });\n            })));\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Counter} or {@link MonotoneCounter}.\n     *\n     * @protected\n     * @param {(MonotoneCounter | Counter)} counter\n     * @param {(MetricSetReportContext)} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): CarbonData {\n        const value = counter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const tags = this.buildTags(ctx.registry, counter);\n        tags[\"group\"] = counter.getGroup();\n        tags[\"name\"] = counter.getName();\n\n        const prefix = this.getMetricName(counter);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = counter.getCount() || 0;\n\n        return {\n            measurement,\n            tags,\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Gauge}.\n     *\n     * @protected\n     * @param {Gauge} gauge\n     * @param {MetricSetReportContext>} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): CarbonData {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const tags = this.buildTags(ctx.registry, gauge);\n        tags[\"group\"] = gauge.getGroup();\n        tags[\"name\"] = gauge.getName();\n\n        const prefix = this.getMetricName(gauge);\n        const measurement: any = {};\n        measurement[`${prefix}.value`] = gauge.getValue() || 0;\n\n        return {\n            measurement,\n            tags,\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Histogram}.\n     *\n     * @protected\n     * @param {Histogram} histogram\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): CarbonData {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const tags = this.buildTags(ctx.registry, histogram);\n        tags[\"group\"] = histogram.getGroup();\n        tags[\"name\"] = histogram.getName();\n\n        const prefix = this.getMetricName(histogram);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = histogram.getCount() || 0;\n        measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax());\n        measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean());\n        measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin());\n        measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            measurement,\n            tags,\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Meter}.\n     *\n     * @protected\n     * @param {Meter} meter\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): CarbonData {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const tags = this.buildTags(ctx.registry, meter);\n        tags[\"group\"] = meter.getGroup();\n        tags[\"name\"] = meter.getName();\n\n        const prefix = this.getMetricName(meter);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = meter.getCount() || 0;\n        measurement[`${prefix}.m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        measurement[`${prefix}.m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        measurement[`${prefix}.m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        measurement[`${prefix}.mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, meter),\n        };\n    }\n\n    /**\n     * Builds the {@link CarbonData} for the specified {@link Timer}.\n     *\n     * @protected\n     * @param {Timer} timer\n     * @param {MetricSetReportContext} ctx\n     * @returns {CarbonData}\n     * @memberof CarbonMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): CarbonData {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const tags = this.buildTags(ctx.registry, timer);\n        tags[\"group\"] = timer.getGroup();\n        tags[\"name\"] = timer.getName();\n\n        const prefix = this.getMetricName(timer);\n        const measurement: any = {};\n        measurement[`${prefix}.count`] = timer.getCount() || 0;\n        measurement[`${prefix}.m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        measurement[`${prefix}.m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        measurement[`${prefix}.m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        measurement[`${prefix}.max`] = this.getNumber(snapshot.getMax());\n        measurement[`${prefix}.mean`] = this.getNumber(snapshot.getMean());\n        measurement[`${prefix}.mean_rate`] = this.getNumber(timer.getMeanRate());\n        measurement[`${prefix}.min`] = this.getNumber(snapshot.getMin());\n        measurement[`${prefix}.p50`] = this.getNumber(snapshot.getMedian());\n        measurement[`${prefix}.p75`] = this.getNumber(snapshot.get75thPercentile());\n        measurement[`${prefix}.p95`] = this.getNumber(snapshot.get95thPercentile());\n        measurement[`${prefix}.p98`] = this.getNumber(snapshot.get98thPercentile());\n        measurement[`${prefix}.p99`] = this.getNumber(snapshot.get99thPercentile());\n        measurement[`${prefix}.p999`] = this.getNumber(snapshot.get999thPercentile());\n        measurement[`${prefix}.stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            measurement,\n            tags: this.buildTags(ctx.registry, timer),\n        };\n    }\n\n    /**\n     * Builds a name for the metric.\n     *\n     * @protected\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof CarbonMetricReporter\n     */\n    protected getMetricName(metric: Metric): string {\n        if (metric.getGroup()) {\n            return `${metric.getGroup()}.${metric.getName()}`;\n        }\n        return metric.getName();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n[Unreleased]\n[2.1.1] - 2018-11-27\nChanged\n\nuse inspector-metrics@1.16.0\nset version of transitive dependency event-stream to 3.3.4\n\n[2.1.0] - 2018-11-26\nAdded\n\nsupport for reporting events\n\nChanged\n\nadded nodejs 11 to playground\nupdated dependencies\nfixed examples in README\nfixed naming of metrics\nrefactored playground\nuse inspector-metrics@1.15.0\n\n[2.0.0] - 2018-11-04\nAdded\n\nCHANGELOG\ncompile and test script for different node versions\n\nChanged\n\nadded nodejs 11 to travis.yml\nupdated dependencies\nuse inspector-metrics@1.13.0\nadapted new MetricLogger implementation\ncompile target from \"es2017\" to \"es6\"\n\n[1.1.0] - 2018-10-04\nAdded\n\nsupport for monotone counters\n\"description\" & \"homepage\" to package.json\njsdocs for components\n\nChanged\n\nfixed linting config\nrefactored playground\nupdated dependencies\nuse inspector-metrics@1.11.0\nrefactored build scripts\nuse compodoc as documentation tool\n\n[1.0.1] - 2018-07-08\nChanged\n\nupdated dependencies\nuse inspector-metrics@1.8.7\nadded nodejs 10 to travis.yml\n\n[1.0.0] - 2018-02-08\nInitial commit.\nAdded\n\nproject setup\nREADME\ntypescript config\nlint config\n\n\nlicensed under MIT license\nbasic carbon / graphite reporter\nmocha testing (with chai, sinon)\nJenkins pipeline\nNYC code-coverage config\nadded editorconfig file\ntravis.yml for nodejs 6, 7, 8, 9\nbasic playground setup\nuse inspector-metrics@1.8.3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            \n                class\n            \n            \n                CarbonMetricReporter\n            \n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            \n                interface\n            \n            \n                CarbonData\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            \n                interface\n            \n            \n                CarbonMetricReporterOptions\n            \n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                lib/metrics/CarbonMetricReporter.ts\n            \n            \n                variable\n            \n            \n                graphite\n            \n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            graphite : 0.1.3\n        \n            inspector-metrics : 1.16.0\n        \n            source-map-support : 0.5.9\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-carbon\nTypescript Metrics Reporter for\ngraphite carbon.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with nodejs.It uses node-graphite as graphite/carbon client.\ninstall\nnpm install --save inspector-carbon\nbasic usage\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter({\n    host: \"http://graphite-server/\",\n});\nconst registry: MetricRegistry = new MetricRegistry();\n\n// add the registry to the reporter\nreporter.addMetricRegistry(registry);\n// start reporting\nreporter.start();set common tags for all metrics\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter({\n    host: \"http://graphite-server/\",\n});\n\n// set common tags for all metrics\nreporter.getTags().set(\"app-name\", \"my-service\");\nreporter.getTags().set(\"app-version\", \"v1.2.3\");reporting events\nimport { Event, MetricRegistry } from \"inspector-metrics\";\nimport { CarbonMetricReporter } from \"inspector-carbon\";\n\n// instance the carbon reporter\nconst reporter: CarbonMetricReporter = new CarbonMetricReporter({\n    host: \"http://graphite-server/\",\n});\n\n// build an ad-hoc event\nconst event = new Event(\"application_started\")\n    .setValue(1.0)\n    .setTag(\"mode\", \"test\")\n    .setTag(\"customTag\", \"specialValue\");\n\n// send the event to graphite\nreporter.reportEvent(event);dev\nusing the playground\nTo use the playground you need to have docker and docker-compose installed.\n# boots all services (graphite / grafana) and provisions the example dashboard\ntest-env/boot.sh\n# running playground script\n./playground.shview data in grafana\n\nNavigate to http://localhost:3000\nselect example dashboard (upper left corner: \"Home\") \"Graphite / Carbon example Dashboard\"\n\n\nLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            graphite   (lib/.../CarbonMetricReporter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/CarbonMetricReporter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            graphite\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        graphite:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"graphite\")\n                        \n                    \n\n                \n                    \n                        Graphite / carbon client module.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
